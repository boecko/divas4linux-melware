#! /bin/bash

# --------------------------------------------------------------------------
#  DIVA CONFIGURATION WIZARD
#  Copyright by Dialogic Corporation 1993-2009
# --------------------------------------------------------------------------

NEW_LANG=$(echo $LANG | sed -e "s/\..*$//" - 2>/dev/null)
locale -a 2>/dev/null | grep "$NEW_LANG\$" > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
  LANG="$NEW_LANG"
fi

# ---------------------------------------------------------------
#  CONSTANTS
# ---------------------------------------------------------------
i=1
CCardSN[$i]=-1
i=65
CCardSN[$i]=-1
diva_dir="/usr/lib/divas/"
diva_softip_dir="/usr/lib/eicon/diva.softip/"
diva_sipcontrol_dir="/usr/lib/eicon/diva.sipcontrol/"
dlg_ss7_dir="/usr/lib/eicon/dlgss7/"
diva_ss7_dir="/usr/lib/divas.ss7/"
diva_proc="/proc/net/isdn/eicon/"
cfg_lib_device="${diva_proc}divadidd"
cfg_lib_version="35"
cfg_lib_available=0
system_file="${dlg_ss7_dir}system.txt"
driver_load="insmod"
host_driver_load="insmod"
driver_unload="rmmod"
divaload="${diva_dir}divactrl load -c"
divacfg="${diva_dir}divactrl cfglib"
divacfglib="${diva_dir}divactrl load -CfgLib"
divaresponse="${diva_dir}diva.response.awk"
mantool="${diva_dir}divactrl mantool -b -Exclusive -WDog"
opendiva=0
kernel_greater_2_6_8=0
driver_suffix=".o"
failed_driver="none"
errtitle="Configuration Aborted"
backtitle="Diva Configuration Wizard (c) Copyright by Dialogic 1993 - 2009"
no_server_cards=0
configuration_aborted=0
exit_configuration=0
current_card=1
current_line=0
tmp=${diva_dir}dialog.ret
max_card=1
VerifyCardSerialNumber=1
ForceDriverLoad=0
StartCAPI=1
StartHMPMode=1
StartTTY=0
TTY_PIAFS=0
TTY_FAX=0
StartDivalogd=0
StartDivaSnmp=0
StartDivaSS7=0
StartDivaSIPcontrol=0
DivaSIPcontrol_bin="sipcontrol_aki"
StartDivaSoftIP=0
DivaMtpxMode=0
StartOnBoot=1
DivaTTYWaitCause=0
DivaTTYIgnoreNumberType=0
DivaTTYNoCarrier=0
LoadInDebugMode=0
total_channels=0
diva_pro_pc_card=0
diva_tty_major=8
diva_tty_minors_per_major=255
logical_adapters=0
logical_adapter=0
cmd_generate_config=0
start_extended_configuration=0
check_diva_device_nodes=0
show_frozen_adapter_info=0
diva_use_cfg_lib=1
diva_use_reentrant=1
mtpx_cfg_changed=0
usb_device_detected=0
pci_device_detected=0
divas_pci_e_adapter_present=0
divas_server_adapter_present=0
HSIPORT=0
mtpx_board_name="M-Board "

#
# Default values for Diva SDK
# debug/trace facility
#
diva_default_sdk_trace_file="/var/log/dssdk.log"
SDKLogFilename="$diva_default_sdk_trace_file"
SDKLogFormat=2
SDKLogLevel=1

#
# CfgLib constants
#
tei_RamOffset=8
nt2_RamOffset=9
DidLen_RamOffset=10
WatchDog_RamOffset=11
Permanent_RamOffset=12
L1TristateOrQsig_RamOffset=13
StableL2_RamOffset=14
NoOrderCheck_RamOffset=15
ForceLaw_RamOffset=16
Reserved1_RamOffset=17
LowChannel_RamOffset=18
ProtVersion_RamOffset=19
crc4_RamOffset=20
NoHscx30_RamOffset=21
Oad0_RamOffset=32
Osa0_RamOffset=64
Spid0_RamOffset=96
Oad1_RamOffset=128
Osa1_RamOffset=160
Spid1_RamOffset=192

# PCINIT values
PCINIT_END_OF_LIST=$((0x00))
PCINIT_MODEM_GUARD_TONE=$((0x01))
PCINIT_MODEM_MIN_SPEED=$((0x02))
PCINIT_MODEM_MAX_SPEED=$((0x03))
PCINIT_MODEM_PROTOCOL_OPTIONS=$((0x04))
PCINIT_FAX_OPTIONS=$((0x05))
PCINIT_FAX_MAX_SPEED=$((0x06))
PCINIT_MODEM_OPTIONS=$((0x07))
PCINIT_MODEM_NEGOTIATION_MODE=$((0x08))
PCINIT_MODEM_MODULATIONS_MASK=$((0x09))
PCINIT_MODEM_TRANSMIT_LEVEL=$((0x0a))
PCINIT_FAX_DISABLED_RESOLUTIONS=$((0x0b))
PCINIT_FAX_MAX_RECORDING_WIDTH=$((0x0c))
PCINIT_FAX_MAX_RECORDING_LENGTH=$((0x0d))
PCINIT_FAX_MIN_SCANLINE_TIME=$((0x0e))
PCINIT_US_EKTS_CACH_HANDLES=$((0x0f))
PCINIT_US_EKTS_BEGIN_CONF=$((0x10))
PCINIT_US_EKTS_DROP_CONF=$((0x11))
PCINIT_US_EKTS_CALL_TRANSFER=$((0x12))
PCINIT_RINGERTONE_OPTION=$((0x13))
PCINIT_CARD_ADDRESS=$((0x14))
PCINIT_FPGA_FEATURES=$((0x15))
PCINIT_US_EKTS_MWI=$((0x16))
PCINIT_MODEM_SPEAKER_CONTROL=$((0x17))
PCINIT_MODEM_SPEAKER_VOLUME=$((0x18))
PCINIT_MODEM_CARRIER_WAIT_TIME=$((0x19))
PCINIT_MODEM_CARRIER_LOSS_TIME=$((0x1a))
PCINIT_UNCHAN_B_MASK=$((0x1b))
PCINIT_PART68_LIMITER=$((0x1c))
PCINIT_XDI_FEATURES=$((0x1d))
PCINIT_QSIG_DIALECT=$((0x1e))
PCINIT_DISABLE_AUTOSPID_FLAG=$((0x1f))
PCINIT_FORCE_VOICE_MAIL_ALERT=$((0x20))
PCINIT_PIAFS_TURNAROUND_FRAMES=$((0x21))
PCINIT_L2_COUNT=$((0x22))
PCINIT_QSIG_FEATURES=$((0x23))
PCINIT_NO_SIGNALLING=$((0x24))
PCINIT_CARD_SN=$((0x25))
PCINIT_CARD_PORT=$((0x26))
PCINIT_ALERTTO=$((0x27))
PCINIT_MODEM_EYE_SETUP=$((0x28))
PCINIT_FAX_V34_OPTIONS=$((0x29))
PCINIT_CCBS_REL_TIMER=$((0x2a))
PCINIT_DISABLED_DSPS_MASK=$((0x2b))
PCINIT_SUPPL_SERVICE_FEATURES=$((0x2c))
PCINIT_R2_DIALECT=$((0x2d))
PCINIT_R2_CASOPTIONS=$((0x2e))
PCINIT_R2_CTRYLENGTH=$((0x2f))
PCINIT_DISCAFTERPROGRESS=$((0x30))
PCINIT_V110_OPTIONS=$((0x31))
PCINIT_V110_PURE_SYNC_TIME=$((0x32))
PCINIT_V110_DATA_START_DELAY=$((0x33))
PCINIT_DSP_IMAGE_LENGTH=$((0x34))
PCINIT_DIAL_PULSE_DETECTOR=$((0x35))
PCINIT_ANIDNILIMITER=$((0x36))
PCINIT_CORNETDEFAULTS=$((0x37))
PCINIT_XCONNECT_EXPORT_MEMORY=$((0x38))
PCINIT_XCONNECT_EXPORT=$((0x39))
PCINIT_TXATTENUATION=$((0x3a))
PCINIT_VIRTUAL_SIGNALLING_ACCESS=$((0x3b))
PCINIT_CFG_LINE_NUMBER=$((0x3c))
PCINIT_REJECTCAUSENOLISTEN=$((0x3d))
PCINIT_SET_LINE_TYPE=$((0x3e))
PCINIT_CAS_BC=$((0x3f))
PCINIT_CAS_ANSWERDELAY=$((0x40))
PCINIT_CAS_DEBUG=$((0x41))
PCINIT_CAS_RXDIGITTIMEOUT=$((0x42))
PCINIT_CAS_CONFIG=$((0x43))
PCINIT_CAS_GLARERESOLUTION=$((0x44))
PCINIT_CAS_DIALTYPE=$((0x45))
PCINIT_CAS_TRUNCTYPE=$((0x46))
PCINIT_CAS_ANSWERSUPERVISION=$((0x47))
PCINIT_DID_LENGTH=$((0x48))
PCINIT_POTS_DIAL_CHAR=$((0x49))
PCINIT_DTMF_SUPPRESSOR=$((0x4a))
PCINIT_FAX_MIN_SPEED=$((0x4b))
PCINIT_FAX_MAX_OVERHEAD=$((0x4c))
PCINIT_RECORDING_AGC=$((0x4f))
PCINIT_DTMFCOLLECTLEN=$((0x50))
PCINIT_RBS_SILENCE_TIMEOUT=$((0x52))
PCINIT_CALLERIDDETECT=$((0x53))
PCINIT_RINGSTILANSWER=$((0x54))
PCINIT_SPI_DMA_DESCRIPTOR=$((0x55))
PCINIT_SPI_DMA_DESCRIPTOR_LENGTH=$((0x56))
PCINIT_REJECTCAUSEIGNORE=$((0x57))
PCINIT_POTS_SWAPHOLD=$((0x58))
PCINIT_POTS_DISCACTIVCALL=$((0x59))
PCINIT_POTS_DISCPASSIVCALL=$((0x5a))
PCINIT_POTS_CONSULT=$((0x5b))
PCINIT_POTS_3PTYCONNECT=$((0x5c))
PCINIT_POTS_3PTYDISC=$((0x5d))
PCINIT_POTS_TRANSFER=$((0x5e))
PCINIT_POTS_CALLBACKAFTERRETRIEVE=$((0x5f))
PCINIT_POTS_CALLBACKTIMER=$((0x60))
PCINIT_POTS_SWAPRETRIEVEACKTIMER=$((0x61))
PCINIT_POTS_RETRIEVEHOOKOFFTIMER=$((0x62))
PCINIT_FLASHLENGTH=$((0x63))
PCINIT_MONITOR_SPI_DMA_DESCRIPTOR=$((0x64))
PCINIT_XCONNECT_SPI_DMA_DESCRIPTOR=$((0x65))
PCINIT_POTS_CONFIGCPN=$((0x66))
PCINIT_POTS_SUPPRESSCPN=$((0x67))
PCINIT_POTS_DIRECTION=$((0x68))
PCINIT_POTS_CALIBRATIONMODE=$((0x69))
PCINIT_CARD_MODE=$((0x6f))
PCINIT_L1_CLOCK_BIAS=$((0x70))
PCINIT_L1_SYNC_OP_MODE=$((0x71))
PCINIT_L1_SYNC_PORT_NO=$((0x72))
PCINIT_OPTIMIZATION=$((0x74))

#
# Extended system startup options
#
SysLIFixPCIBus=0
SysRebootOnError=0
LoadMaintOn=0
StartCtransferOn=0
SysCAPIIrq=0
SysMSIIrq=1

#
# Set initial trace decoder settings
#
TraceDecodeAll=1
TraceDecodePPP="detect"
TraceDecodeVSIG=0
cur_trace_drv=0
while [ $((cur_trace_drv)) -le $((32)) ]
do
  TraceDecodeS[$cur_trace_drv]=0
  cur_trace_drv=$(($cur_trace_drv+1))
done
TraceDecodeChannel="all"

#
# Check it it OpenDiva or Diva installation
# and change some constants if this is OpenDiva
#
if [ -f ${diva_dir}/divadidd.ko ]
then
  driver_suffix=".ko"
  diva_proc="/proc/net/eicon/"
  check_diva_device_nodes=1
  cfg_lib_device="/dev/DivasDIDD"
else

if [ ! -f ${diva_dir}/divadidd.o ]
then
driver_load="modprobe"
host_driver_load="modprobe"
diva_dir=" "
driver_suffix=" "
divaload="/sbin/divactrl load -c"
divacfg="/sbin/divactrl cfglib"
divacfglib="/sbin/divactrl load -CfgLib"
divaresponse="/sbin/diva.response.awk"
opendiva=1
fi

fi

didd_file="${diva_proc}divadidd"
xdi_file="${diva_proc}divas"
dbg_file="${diva_proc}maint"
diva_xml="${diva_dir}diva.xml.$$"
diva_response_xml="${diva_dir}diva.response.xml.$$"
diva_instance="${diva_dir}diva.instance.awk"
diva_variables="${diva_dir}diva.variables.awk"
diva_instance_file="${diva_dir}diva.instance.xml"
diva_variables_file="${diva_dir}diva.variables.xml"

# detect kernel version
kernel_major=$(uname -r 2>/dev/null | sed -e "s/^.\.//" -e "s/\..*$//" - 2>/dev/null)
kernel_minor=$(uname -r 2>/dev/null | sed -e "s/^.\..\.//" -e "s/[-\.].*$//" - 2>/dev/null)
if [ $kernel_major -gt 5 -a $kernel_minor -gt 8 ]
then
  kernel_greater_2_6_8=1
fi

max_softip_adapters=0
max_softip_links=0
if [ -f ${diva_softip_dir}DivasP.ko -o -x ${diva_softip_dir}DivasP ]
then
	if [ -f ${diva_softip_dir}softip-version ]
	then
		max_softip_links=$(${diva_dir}licman -p ${diva_softip_dir} | grep Links | sed -e "s/.*Links\:\W*//g;" | sort -r | head -1)
		if [ $(($?)) -eq 0 -a $((max_softip_links)) -gt 0 ]
		then
			if [ $((max_softip_links)) -gt 120 ]
			then
				max_softip_links=120
			fi
			max_softip_adapters=$((max_softip_links/30))
			if [ $((max_softip_links%30)) -gt 0 ]
			then
				max_softip_adapters=$(($max_softip_adapters+1))
			fi
		else
			max_softip_links=0
		fi
	fi
fi

sipcontrol_present=0
if [ -f ${diva_sipcontrol_dir}license.xml -a -f ${diva_sipcontrol_dir}sipcontrol-version ]
then
	sipcontrol_present=1
fi

max_ss7_links=0
ss7_found=0
# if [ -f ${diva_ss7_dir}ss7-release ]
# then
  ss7_found=1
# fi

if [ $((ss7_found)) -eq $((1)) ]
then
	max_ss7_links=$(${diva_dir}licman -p ${diva_ss7_dir} 2>/dev/null | grep Links | sed -e "s/.*Links\:\W*//g;" | sort -r | head -1 2>/dev/null)
	if [ $(($?)) -ne 0 ]
	then
		max_ss7_links=0
	fi
fi

#
# Always use own dialog utility
#
dialog="${diva_dir}dialog"
help=""
hlp_base="${diva_dir}/help.txt"
hlp="${diva_dir}/cfg.hlp"
if [ ! -f ${hlp_base} ]
then
	echo > ${hlp_base}
fi

fold="fold -s -w 67"
echo "Test" | ${fold} >/dev/null 2>&1
if [ $(($?)) -ne 0 ]
then
  fold="sed -nl 67 l - "
  echo "Test" | ${fold} >/dev/null 2>&1
  if [ $(($?)) -ne 0 ]
  then
    fold='echo Help does not work, please install fold!'
  fi
fi


#
# Verify if MTPX adapter is present
#
MtpxOn=0
if [ -s ${diva_dir}diva_mtpx${driver_suffix} ]
then
MtpxOn=1
fi

if [ $((opendiva)) -eq 1 ]
then
  mantool="divactrl mantool -b -Exclusive -WDog"
fi

set_help_id()
{
	ident="$1"
	help=""

	sed -ne "/<$ident>/,/<$ident\/>/p" ${hlp_base} | \
	    sed -e "/<$ident>/d" -e "/<$ident\/>/d" - | \
	    sed -e "s/<\/p>/\n\n/g" - | \
	    sed -e "s/<cs id=\"128\">\xae<\/cs>/(R)/g" - | \
	    sed -e "s/<[a-zA-Z\/][^>]*>//g" - | ${fold} > ${hlp}
	if [ $(($?)) -eq 0 ]
	then
		if [ -s ${hlp} ]
		then
			help="--helptag ${hlp}"
		fi
	fi

}

# ---------------------------------------------------------------------
# Set suitable for HMP Diva trace/debug defaults
# ---------------------------------------------------------------------
set_system_hmp_debug_defaults()
{
	CLoadMaintOn="1"
	CSDKLogFilename="/dev/DivasDBGIFC"
	CSDKLogFormat="1"
	CSDKLogLevel="6"

	LoadMaintOn="$CLoadMaintOn"
	SDKLogFilename="$CSDKLogFilename"
	SDKLogFormat="$CSDKLogFormat"
	SDKLogLevel="$CSDKLogLevel"
}

# ---------------------------------------------------------------------
#  Add instance specific data
#
#  1 - owner
#  2 - instance
#  3 - file
#
# ---------------------------------------------------------------------
add_instance_data()
{
    if [ -s "${diva_instance_file}" ]
    then
      awk -f ${diva_instance} -v owner="$1" -v instance="*" ${diva_instance_file} > ${diva_dir}diva.instance.tmp.$$ 2>/dev/null
      awk -f ${diva_instance} -v owner="$1" -v instance="$2" ${diva_instance_file} >> ${diva_dir}diva.instance.tmp.$$ 2>/dev/null
      if [ -s "${diva_dir}diva.instance.tmp.$$" ]
      then
        echo "" >> $3
        echo "# ---------------------------" >> $3
        echo "# diva.instance.xml" >> $3
        echo "# ---------------------------" >> $3
        cat "${diva_dir}diva.instance.tmp.$$" >> $3
        echo "# ---------------------------" >> $3
        echo "" >> $3
      fi
      rm -f "${diva_dir}diva.instance.tmp.$$"
    fi
}

dialog_show_license()
{
	${diva_dir}/licman -p "$2" > $tmp
	$dialog --title "$1" --backtitle "$backtitle" --clear --textbox $tmp 18 70
	rm -f $tmp
}

dialog_backup_license_files()
{
	local backuplicensedir="$HOME"

	while [ $((1)) -eq $((1)) ]
	do
		$dialog --clear --title "$1" --backtitle "$backtitle" \
						--inputbox "Please enter distination directory" 10 70 "$backuplicensedir" 2>$tmp
		if [ $(($?)) -ne 0 ]
		then
			return
		fi
		backuplicensedir=$(cat $tmp)

		if [ -z "$backuplicensedir" -o ! -d "$backuplicensedir" ]
		then
			$dialog --backtitle "$backtitle" --infobox "Directory '$backuplicensedir' not found" 3 70
			continue
		fi

		cp -r -v -f "$2" "$backuplicensedir" > $tmp 2>&1
		if [ $(($?)) -eq 0 ]
		then
			$dialog --title "Operation success" --backtitle "$backtitle" --clear --textbox $tmp 18 70
			return
		else
			$dialog --title "Operation failed" --backtitle "$backtitle" --clear --textbox $tmp 18 70
		fi
	done
}

dialog_save_adapter_uid()
{
  local uidfile="$HOME/divauid.txt"

  while [ $((1)) -eq $((1)) ]
  do
    $dialog --clear --title "$1" --backtitle "$backtitle" \
            --inputbox "Please enter file name" 10 70 "$uidfile" 2>$tmp
    if [ $(($?)) -ne 0 ]
    then
      return
    fi
    uidfile=$(cat $tmp)

    if [ -z "$uidfile" ]
    then
      continue
    fi

    echo "Available Diva Board:" > ${tmp}
    echo "" >> ${tmp}

    i=1
    while [ $((${CardSN[$((i))]})) -ge $((1)) ]
    do
      echo "  ${CardVISUALNAME[$i]} SN:${CardSN[$i]}" >> ${tmp}
      if [ $((${CardADAPTERS[$i]})) -gt 1 ]
      then
       i=$(($i+$((${CardADAPTERS[$i]}))))
      else
        i=$(($i+1))
      fi
    done
    echo "" >> ${tmp}

    echo "Available Diva Board UID:" >> ${tmp}
    echo "" >> ${tmp}
    ${diva_dir}licman -crd 2>/dev/null >> ${tmp}

    cp -r -v -f "${tmp}" "$uidfile" > ${diva_dir}/cards.dlg 2>&1
    if [ $(($?)) -eq 0 ]
    then
      $dialog --title "Operation success: $uidfile" --backtitle "$backtitle" --clear --textbox $uidfile 18 70
      return
    else
      $dialog --title "Operation failed" --backtitle "$backtitle" --clear --textbox ${diva_dir}/cards.dlg 18 70
    fi
  done
}

diva_install_license_file()
{
  local sourcelicensedir="$HOME"
	local license_files[$items]=0
	local selected_file=0
	local i=0

  local licensefile=""
  local msg=""
  local items=0
  local hight=0
  local license_files[$items]=0
  local selected_file=0
  local j=0

  while [ $((1)) -eq $((1)) ]
  do
    $dialog --clear --title "Install license" --backtitle "$backtitle" \
            --inputbox "Please enter source directory" 10 70 "$sourcelicensedir" 2>$tmp
    if [ $(($?)) -ne 0 ]
    then
      return
    fi
    sourcelicensedir=$(cat $tmp)

    if [ -z "$sourcelicensedir" -o ! -d "$sourcelicensedir" ]
    then
      $dialog --backtitle "$backtitle" --infobox "Directory '$sourcelicensedir' not found" 3 70
      continue
    fi

	  licensefile=""
	  msg=""
	  items=0
	  hight=0
	  license_files[$items]=0
	  selected_file=0
	  j=0

	  msg=" \"X\" \"Exit\" off "
	  items=$(($items+1))
	  for licensefile in $(ls $sourcelicensedir)
	  do
			echo "$sourcelicensedir/$licensefile" | grep "\.lic$" > /dev/null 2>&1
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
	    license_files[$items]="$sourcelicensedir/$licensefile"
	    licensefile=$(echo $licensefile | head -c 62)
	    echo $licensefile | grep "\.lic$" > /dev/null 2>&1
	    if [ $(($?)) -ne 0 ]
	    then
	      licensefile=$(echo $licensefile | head -c 55)
	      licensefile="${licensefile}....lic"
	    fi
	    msg="$msg\"$((items))\" \"$licensefile"
	    msg="$msg\""
	    msg="$msg off "
	    items=$(($items+1))
	  done

		if [ $((items)) -le 1 ]
		then
			$dialog --backtitle "$backtitle" --infobox "No license files (*.lic) was found in '$sourcelicensedir' directory" 5 70
			continue
		fi

	  msg="$msg \"I\" \"Show license info\" off "
	  items=$(($items+1))

	  high=$(($items+7))
	  msg="$dialog ${help} --clear \
	      --title \"Install license\" --backtitle \"$backtitle\" \
	      --radiolist \"Please select license file to install\" $high 75 $(($items)) $msg"
	  echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	  sh ${diva_dir}/cards.dlg
	  if [ $(($?)) -ne 0 ]
	  then
	    return
	  fi

		items=$(($items-1))

	  selected_file="$(cat $tmp)"

	  if [ "$selected_file" = "I" ]
		then
			j=1
			rm -f $tmp
			while [ $((j)) -lt $((items)) ]
			do
				echo ${license_files[$j]} >> ${tmp}
				${diva_dir}/licman -e "${license_files[$((j))]}" >> ${tmp} 2>&1
				echo "" >> ${tmp} 2>&1
				j=$(($j+1))
			done
			$dialog --title "License info" --backtitle "$backtitle" --clear --textbox $tmp 18 70
			continue
		fi

	  if [ "$selected_file" = "X" -o $(($selected_file)) -le 0 -o $((selected_file)) -ge $((items)) ]
	  then
	    return
	  fi

		${diva_dir}/licman -i "${license_files[$((selected_file))]}" ${diva_dir}licenses > ${tmp} 2>&1
		$dialog --title "Operation status" --backtitle "$backtitle" --clear --textbox $tmp 18 70
		return
  done
}

diva_remove_license_file()
{
	local licensefile=""
	local msg=""
	local items=0
	local hight=0
	local license_files[$items]=0
	local selected_file=0
	local i=0
	local j=0

	msg=" \"X\" \"Exit\" off "
	items=$(($items+1))
	for licensefile in $(ls $2)
	do
		license_files[$items]="$2/$licensefile"
		licensefile=$(echo $licensefile | head -c 62)
		echo $licensefile | grep "\.lic$" > /dev/null 2>&1
		if [ $(($?)) -ne 0 ]
		then
			licensefile=$(echo $licensefile | head -c 55)
			licensefile="${licensefile}....lic"
		fi
    msg="$msg\"$((items))\" \"$licensefile"
    msg="$msg\""
    msg="$msg off "
    items=$(($items+1))
	done

	if [ $((items)) -gt 1 ]
	then
		msg="$msg \"I\" \"Show license info\" off "
		items=$(($items+1))
	fi

	high=$(($items+7))
  msg="$dialog ${help} --clear \
      --title \"$1\" --backtitle \"$backtitle\" \
      --radiolist \"Please select license file to delete\" $high 75 $(($items)) $msg"
  echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
  sh ${diva_dir}/cards.dlg
  if [ $(($?)) -ne 0 ]
  then
    return
  fi

	items=$(($items-1))

	selected_file="$(cat $tmp)"

	if [ "$selected_file" = "I" ]
	then
		j=1
		rm -f $tmp
		while [ $((j)) -lt $((items)) ]
		do
			echo ${license_files[$j]} >> ${tmp}
			${diva_dir}/licman -e "${license_files[$((j))]}" >> ${tmp} 2>&1
			echo "" >> ${tmp} 2>&1
			j=$(($j+1))
		done
		$dialog --title "License info" --backtitle "$backtitle" --clear --textbox $tmp 18 70
		return
	fi

	if [ "$selected_file" = "X" -o $(($selected_file)) -le 0 -o $((selected_file)) -ge $((items)) ]
	then
		return
	fi

	rm -v "${license_files[$((selected_file))]}" > $tmp 2>&1
	if [ $(($?)) -eq 0 ]
	then
		$dialog --title "Operation success" --backtitle "$backtitle" --clear --textbox $tmp 18 70
	else
		$dialog --title "Operation failed" --backtitle "$backtitle" --clear --textbox $tmp 18 70
	fi
}

# -------------------------------------------------------------------
#  License manager
# -------------------------------------------------------------------
manage_adapter_licenses()
{
	local i=1
	local msg=""
	local high=0
	local items=1
	local selected_card=1
	local licensedir=""

	msg=" \"X\" \"Exit license manager\" off "
	msg="$msg\"+\" \"Install license"
	msg="$msg\""
	msg="$msg off "
	items=$(($items+1))
	msg="$msg\"V\" \"Show Board UID"
	msg="$msg\""
	msg="$msg off "
	items=$(($items+1))
	msg="$msg\"S\" \"Save Board UID to file"
	msg="$msg\""
	msg="$msg off "
	items=$(($items+1))

	while [ $((${CardSN[$((i))]})) -ge $((1)) ]
	do
		if [ $((${Card_FROZEN[$((i))]})) -eq $((0)) -a $((${Card_FROZEN2[$((i))]})) -eq $((0)) ]
		then
		msg="$msg\"$i\" \"${CardVISUALNAME[$i]} SN:${CardSN[$i]}"
		msg="$msg\""
		if [ $((i)) -eq $((selected_card)) ]
		then
			msg="$msg on "
		else
			msg="$msg off "
		fi
			items=$(($items+1))
		fi
		if [ $((${CardADAPTERS[$i]})) -gt 1 ]
		then
			i=$(($i+$((${CardADAPTERS[$i]}))))
		else
			i=$(($i+1))
		fi
	done

	if [ $(($items-1)) -ge 9 ]
	then
		items=9
	fi
	high=$(($items+7))
	set_help_id license_manager
	msg="$dialog ${help} --clear \
			--title \"Diva Board selection\" --backtitle \"$backtitle\" \
			--radiolist \"Please select available Diva Board or exit license manager\" $high 75 $(($items)) $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 1
	fi
	selected_card=$(cat $tmp)

	if [ "$selected_card" = "X" ]
	then
		return 1
	fi

	if [ "$selected_card" = "+" ]
	then
		diva_install_license_file
		return 0
	fi

	if [ "$selected_card" = "V" ]
	then
		echo "Available Diva Board:" > ${tmp}
		echo "" >> ${tmp}

		i=1
	  while [ $((${CardSN[$((i))]})) -ge $((1)) ]
	  do
	    echo "  ${CardVISUALNAME[$i]} SN:${CardSN[$i]}" >> ${tmp}
	    if [ $((${CardADAPTERS[$i]})) -gt 1 ]
	    then
 	     i=$(($i+$((${CardADAPTERS[$i]}))))
	    else
	      i=$(($i+1))
	    fi
	  done
		echo "" >> ${tmp}

		echo "Available Diva Board UID:" >> ${tmp}
		echo "" >> ${tmp}
		${diva_dir}licman -crd 2>/dev/null >> ${tmp}
		$dialog --title "Diva Board UID" --backtitle "$backtitle" --clear --textbox $tmp 18 70
		return 0
	fi
	if [ "$selected_card" = "S" ]
	then
		dialog_save_adapter_uid "Save Board UID"
		return 0
	fi

	if [ $((selected_card)) -le  $((0)) ]
	then
		return 0
	fi

	msg=" \"X\" \"Exit\" off "
	items=1
	licensedir=$(printf "${diva_dir}licenses/%x_%d" ${CardNAME[$selected_card]} ${CardSN[$selected_card]})
	if [ -d "$licensedir" -a $(($(ls "$licensedir" 2>/dev/null | wc -l))) -gt 0 ]
	then
		msg="$msg\"V\" \"View license"
		msg="$msg\""
		msg="$msg off "
		items=$(($items+1))
		msg="$msg\"B\" \"Backup license files"
		msg="$msg\""
		msg="$msg off "
		items=$(($items+1))
		msg="$msg\"-\" \"Remove license"
		msg="$msg\""
		msg="$msg off "
		items=$(($items+1))
	fi
	high=$(($items+7))
	set_help_id license_manager_commands
	msg="$dialog ${help} --clear \
			--title \"Diva Board selection\" --backtitle \"$backtitle\" \
			--radiolist \"Please select command or exit license manager\" $high 75 $(($items)) $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 0
	fi

	case "$(cat $tmp)" in
		'V') dialog_show_license "${CardVISUALNAME[$selected_card]} SN:${CardSN[$selected_card]}" "$licensedir"
				;;
		'B') dialog_backup_license_files "${CardVISUALNAME[$selected_card]} SN:${CardSN[$selected_card]}" "$licensedir"
				;;
		'-') diva_remove_license_file "${CardVISUALNAME[$selected_card]} SN:${CardSN[$selected_card]}" "$licensedir"
				;;
		*) return 0
			;;
	esac

	return 0
}

manage_adapter_license()
{
	local active_adapters=0
	local active_adapter=""

	for active_adapter in $(${mantool} -L 2>/dev/null | sed -ne "/:{.*}/p;" - | sed -e "s/^.*:.*{//" -e "s/,/ /g" -e "s/}.*$//" - 2>/dev/null)
	do
		if [ $((active_adapter)) -gt 0 -a $((active_adapter)) -lt 65 ]
		then
			active_adapters=$((active_adapters+1))
		fi
	done

	if [ $((active_adapters)) -lt 1 ]
	then
		$dialog --backtitle "$backtitle" --infobox "Please activate Diva board first" 5 70
		return
	fi

	while [ $((1)) -eq $((1)) ]
	do
		manage_adapter_licenses
		if [ $(($?)) -ne 0 ]
		then
			return
		fi
	done
}

# -------------------------------------------------------------------
#  Returns device major as decimal number
# -------------------------------------------------------------------
diva_get_device_major()
{
  if [ -c "$1" ]
	then
		return $((0x$(stat --format "%t" "$1")))
	fi

	return 0
}

diva_get_driver_major()
{
	if [ -f "/proc/devices" ]
	then
		return $(($(cat /proc/devices | grep " *$1 *$" | sed -e "s/^ //g;" -e "s/ .*$//" -)))
	fi

	return 0
}

files_cleanup()
{
	rm -f ${diva_dir}*.tmp
	rm -f ${diva_dir}cards.dlg
	rm -f ${diva_xml}
	rm -f ${diva_xml}.capi
	rm -f ${diva_xml}.mtpx
	rm -f ${diva_xml}.tty
	rm -f ${diva_response_xml}
}

view_mtpx_configuration()
{
	tmp_i=1
	max_mtpx_adapter=0
	tmp_j=1
	mtpx_cards[0]=0

	rm -f $tmp

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		if [ $((tmp_j)) -gt $((max_mtpx_adapter)) ]
		then
			max_mtpx_adapter=$((tmp_j))
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		if [ $((tmp_j)) -gt $((max_mtpx_adapter)) ]
		then
			max_mtpx_adapter=$((tmp_j))
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_j=1
	while [ $((tmp_j)) -le $((max_mtpx_adapter)) ]
	do
		mtpx_cards[$tmp_j]=0
		tmp_j=$(($tmp_j+1))
	done

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		tmp_k=$((mtpx_cards[$tmp_j]))
		mtpx_cards[$tmp_j]=$(($tmp_k+1))
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		tmp_k=$((mtpx_cards[$tmp_j]))
		mtpx_cards[$tmp_j]=$(($tmp_k+1))
		tmp_i=$(($tmp_i+1))
	done


	tmp_j=101
	true_number=1
	while [ $((tmp_j)) -le $((max_mtpx_adapter)) ]
	do
		if [ $((mtpx_cards[$tmp_j])) -gt 0 ]
		then
			if [ $((mtpx_cards[$tmp_j])) -eq 1 ]
			then
				echo "${mtpx_board_name}$((true_number)), assigned one Diva Board:" >> $tmp
			else
				echo "${mtpx_board_name}$((true_number)), assigned $((mtpx_cards[$tmp_j])) Diva Boards:" >> $tmp
			fi

			tmp_i=1
			while [ $((${CardSN[$tmp_i]})) -gt 0 ]
			do

				if [ $((${Card_MADAPTER[$tmp_i]})) -eq $((tmp_j)) ]
				then
					echo "  +Card $((tmp_i)) ${CardVISUALNAME[$tmp_i]} SN:${CardSN[$tmp_i]}${CardPORT[$tmp_i]}" >> $tmp
				fi
				tmp_i=$(($tmp_i+1))
			done
			tmp_i=65
			while [ $((${CardSN[$tmp_i]})) -eq 0 ]
			do

				if [ $((${Card_MADAPTER[$tmp_i]})) -eq $((tmp_j)) ]
				then
					echo "  +Card $((tmp_i)) softIP" >> $tmp
				fi
				tmp_i=$(($tmp_i+1))
			done
			echo "" >> $tmp
			true_number=$(($true_number+1))
		fi

		tmp_j=$(($tmp_j+1))
	done

	$dialog --title "Diva M-Board configuration" \
						--backtitle "$backtitle" \
						--clear --textbox $tmp 18 70
}

release_mtpx_adapter_pool()
{
	local current_madapter=101
	local tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		Card_MADAPTER[$tmp_i]=$((current_madapter))
		tmp_i=$(($tmp_i+1))
		current_madapter=$(($current_madapter+1))
	done
	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do
		Card_MADAPTER[$tmp_i]=$((current_madapter))
		tmp_i=$(($tmp_i+1))
		current_madapter=$(($current_madapter+1))
	done
}

get_resourceboard_channels()
{
	local ret_i=0
	local tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		if [ $((Card_ResourceBoard[$tmp_i])) -eq $((1)) ]
		then
			if [ $((${CardPRI[$tmp_i]})) -eq 1 ]
			then
				ret_i=$(($ret_i+$((${PriProtCH[${CardPROT[$tmp_i]}]}))))
			else
				ret_i=$(($ret_i+2))
			fi
		fi
		tmp_i=$(($tmp_i+1))
	done

	return $(($ret_i))
}

get_adapter_channel_count()
{
	local remaining_links
	local tmp_i=$(($1))
	if [ $((CardSN[$tmp_i])) -gt 0 ]
	then
		if [ $((Card_ANALOG[$tmp_i])) -gt 0 ]
		then
			return $((Card_ANALOG[$tmp_i]))
		else
			if [ $((${CardPRI[$tmp_i]})) -eq 1 ]
			then
				return $((${PriProtCH[${CardPROT[$tmp_i]}]}))
			else
				return 2
			fi
		fi
	else
		if [ $(($tmp_i)) -ge $((65)) ]
		then
			get_resourceboard_channels
			remaining_links=$(($max_softip_links-(($?))-(($tmp_i-65)*30)))
			if [ $(($remaining_links)) -gt $((30)) ]
			then
				return 30
			else
				if [ $(($remaining_links)) -gt $((0)) ]
				then
					return $(($remaining_links))
				else
					return 0
				fi
			fi
		else
			return 0
		fi
	fi
}

check_softip_adapters()
{
	local tmp_i=65
	while [ $((1)) -eq $((1)) ]
	do
		get_adapter_channel_count $(($tmp_i))
		if [ $(($?)) -gt $((0)) ]
		then
			CardSN[$tmp_i]=0
		else
			CardSN[$tmp_i]=-1
			return
		fi
		tmp_i=$(($tmp_i+1))
	done
}

create_mtpx_adapter_pool()
{
	local current_madapter=101
	local mtpx_pass=0
	local tmp_i=1
	local mtpx_channels=0

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do #  {

		if [ $((Card_FROZEN[$tmp_i])) -eq $((0)) -a $((${PriProtNOSIG[${CardPROT[$tmp_i]}]})) -eq $((0)) ]
		then # {

			get_adapter_channel_count $((tmp_i))
			card_channels=$(($?))

			mtpx_channels=$(($mtpx_channels+card_channels))
			if [ $((mtpx_channels)) -gt $((120)) ]
			then
				mtpx_channels=$((card_channels))
				current_madapter=$(($current_madapter+1))
			fi

			Card_MADAPTER[$tmp_i]=$((current_madapter))

		fi # }

		tmp_i=$(($tmp_i+1))
	done # }

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do #  {

		get_adapter_channel_count $((tmp_i))
		card_channels=$(($?))

		mtpx_channels=$(($mtpx_channels+card_channels))
		if [ $((mtpx_channels)) -gt $((120)) ]
		then
			mtpx_channels=$((card_channels))
			current_madapter=$(($current_madapter+1))
		fi

		Card_MADAPTER[$tmp_i]=$((current_madapter))

		tmp_i=$(($tmp_i+1))

	done # }

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do #  {

		if [ $((Card_FROZEN[$tmp_i])) -ne $((0)) -o $((${PriProtNOSIG[${CardPROT[$tmp_i]}]})) -ne $((0)) ]
		then # {

			current_madapter=$(($current_madapter+1))
			Card_MADAPTER[$tmp_i]=$((current_madapter))

		fi # }

		tmp_i=$(($tmp_i+1))
	done # }

}

#
# 1 - MTPX adapter NR
# 2 - Xdi adapter nr
#
verify_mtpx_channel_count()
{
	c_i=1
	c_j=0
	c_k=0
	one_frozen=0
	one_nosig=0

	while [ $((${CardSN[$c_i]})) -gt 0 ]
	do   #  {
		if [ $((c_i)) -ne $(($2)) ]
		then # {
			if [ $((${Card_MADAPTER[$c_i]})) -eq $(($1)) ]
			then # {
				get_adapter_channel_count $((c_i))
				c_k=$(($?))
				c_j=$(($c_j+$c_k))
			fi  # }

			if [ $((Card_FROZEN[$c_i])) -ne 0 -a $((${Card_MADAPTER[$c_i]})) -eq $(($1)) ]
			then
				one_frozen=1
			fi
			if [ $((${PriProtNOSIG[${CardPROT[$c_i]}]})) -ne 0 -a $((${Card_MADAPTER[$c_i]})) -eq $(($1)) ]
			then
				one_nosig=1
			fi

		fi # }
		c_i=$(($c_i+1))
	done # }

	c_i=65

	while [ $((${CardSN[$c_i]})) -eq 0 ]
	do   #  {
		if [ $((c_i)) -ne $(($2)) ]
		then # {
			if [ $((${Card_MADAPTER[$c_i]})) -eq $(($1)) ]
			then # {
				get_adapter_channel_count $((c_i))
				c_k=$(($?))
				c_j=$(($c_j+$c_k))
			fi  # }

		fi # }
		c_i=$(($c_i+1))
	done # }

	if [ $((one_frozen)) -ne 0 -a $((Card_FROZEN[$2])) -eq 0 ]
	then
		return 1
	fi

	if [ $((Card_FROZEN[$2])) -ne 0 -a $((c_j)) -ne 0 ]
	then
		return 1
	fi

	if [ $((one_nosig)) -ne 0 -a $((${PriProtNOSIG[${CardPROT[$2]}]})) -eq 0 ]
	then
		return 3
	fi

	if [ $((${PriProtNOSIG[${CardPROT[$2]}]})) -ne 0 -a $((c_j)) -ne 0 ]
	then
		return 3
	fi

	get_adapter_channel_count $(($2))
	c_k=$(($?))
	c_j=$(($c_j+$c_k))

	if [ $((c_j)) -gt 120 ]
	then
		return 2
	fi

	return 0
}

edit_mtpx_adapter_configuration()
{

	tmp_i=1
	max_mtpx_adapter=0
	min_xdi_adapter=65
	card_mtpx[0]=0
	true_adapter[0]=0
	m_adapter[0]=0

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		if [ $((tmp_j)) -gt $((max_mtpx_adapter)) ]
		then
			max_mtpx_adapter=$((tmp_j))
		fi
		if [ $((min_xdi_adapter)) -gt $((tmp_i)) ]
		then
			min_xdi_adapter=$((tmp_i))
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		if [ $((tmp_j)) -gt $((max_mtpx_adapter)) ]
		then
			max_mtpx_adapter=$((tmp_j))
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=101
	while [ $((tmp_i)) -le $((max_mtpx_adapter)) ]
	do
		card_mtpx[$tmp_i]=0
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]=$((card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]+1))
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do
		card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]=$((card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]+1))
		tmp_i=$(($tmp_i+1))
	done

# First analyse M-Board config, to calculate flat M-Board number
	tmp_i=101
	true_number=1
	while [ $((tmp_i)) -le $((max_mtpx_adapter)) ]
	do
		if [ $((card_mtpx[$tmp_i])) -ne 0 ]
		then
			true_adapter[$true_number]=$(($tmp_i))
			m_adapter[$tmp_i]=$(($true_number))
			true_number=$(($true_number+1))
		fi

		tmp_i=$(($tmp_i+1))
	done

	true_adapter[$true_number]=$(($tmp_i))

	msg2="$msg"
	tmp_i=1
	tmp_nr=0
	msg=""
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do

		msg="$msg\"$tmp_i\" \"${CardVISUALNAME[$tmp_i]} SN:${CardSN[$tmp_i]}${CardPORT[$tmp_i]}"
		msg="$msg ${mtpx_board_name}$((m_adapter[${Card_MADAPTER[$tmp_i]}]))"

		msg="$msg\""
		if [ $((tmp_i)) -eq $((min_xdi_adapter)) ]
		then
			msg="$msg on "
		else
			msg="$msg off "
		fi

		tmp_i=$(($tmp_i+1))
		tmp_nr=$(($tmp_nr+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do

		msg="$msg\"$tmp_i\" \"Card $tmp_i softIP"
		msg="$msg M-Board $((m_adapter[${Card_MADAPTER[$tmp_i]}]))"

		msg="$msg\""
		if [ $((tmp_i)) -eq $((min_xdi_adapter)) ]
		then
			msg="$msg on "
		else
			msg="$msg off "
		fi

		tmp_i=$(($tmp_i+1))
		tmp_nr=$(($tmp_nr+1))
	done

	if [ $(($tmp_nr)) -ge 9 ]
	then
		tmp_nr=9
	fi
	high=$(($tmp_nr+7))

	set_help_id mtpx_cfg
	msg="$dialog ${help} --clear \
			--title \"M-Board configuration\" --backtitle \"$backtitle\" \
			--radiolist \"Please select available Diva Board\" $high 80 $(($tmp_nr)) $msg"

	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 1
	fi
	tmp_j=$(cat $tmp)

	tmp_i=101
	true_number=1
	msg=""
	while [ $((tmp_i)) -le $((max_mtpx_adapter)) ]
	do
		if [ $((card_mtpx[$tmp_i])) -ne 0 ]
		then
			if [ $((tmp_i)) -eq ${Card_MADAPTER[$((tmp_j))]} ]
			then
				msg="$msg\"$true_number\" \"Leave as it is (M-Board $((true_number)))"
			else
				msg="$msg\"$true_number\" \"Assign to existing M-Board $((true_number))"
			fi

			msg="$msg\""
			if [ $((true_number)) -eq $((1)) ]
			then
				msg="$msg on "
			else
				msg="$msg off "
			fi
			true_number=$(($true_number+1))
		fi

		tmp_i=$(($tmp_i+1))
	done

	if [ $((card_mtpx[${Card_MADAPTER[$((tmp_j))]}])) -gt $((1)) -o $((Card_MADAPTER[$((tmp_j))])) -ne $((max_mtpx_adapter)) ]
	then
		if [ $((card_mtpx[${Card_MADAPTER[$((tmp_j))]}])) -gt $((1)) ]
		then
			msg="$msg\"$true_number\" \"Assign to new M-Board $((true_number))"
		else
			msg="$msg\"$true_number\" \"Move to end of list"
		fi
		msg="$msg\""
		if [ $((true_number)) -eq $((1)) ]
		then
			msg="$msg on "
		else
			msg="$msg off "
		fi
		true_number=$(($true_number+1))
	fi

	if [ $(($true_number)) -ge 9 ]
	then
		true_number=9
	fi
	true_number=$(($true_number-1))
	high=$(($true_number+7))

	set_help_id mtpx_cfg
	msg="$dialog ${help} --clear \
			--title \"Assign Diva Board to M-Board\" --backtitle \"$backtitle\" \
			--radiolist \"Please select available M-Board\" $high 70 $(($true_number)) $msg"

	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 1
	fi
	tmp_i=$(cat $tmp)
	tmp_i=$((true_adapter[$tmp_i]))
	if [ $(($tmp_i)) -ge 101 ]
	then

		verify_mtpx_channel_count $((tmp_i)) $((tmp_j))
		case $(($?)) in
			0)
				;;
			1) echo "ERROR: This feature is not available for discontinued hardware" > $tmp
				 $dialog --title "Operation failed" \
						--backtitle "$backtitle" \
						--clear --textbox $tmp 18 70
				return 1
				;;
			2) echo "ERROR: Too many channels for selected M-Board" > $tmp
				 $dialog --title "Operation failed" \
						--backtitle "$backtitle" \
						--clear --textbox $tmp 18 70
				return 1
				;;
			*) echo "ERROR: This feature is not available for softSS7 Boards" > $tmp
				 $dialog --title "Operation failed" \
						--backtitle "$backtitle" \
						--clear --textbox $tmp 18 70
				return 1
				;;
		esac

		Card_MADAPTER[$((tmp_j))]=$((tmp_i))
	fi
	return 0
}

mtpx_ect_configuration()
{
	tmp_i=1
	max_mtpx_adapter=0
	card_mtpx[0]=0

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		if [ $((tmp_j)) -gt $((max_mtpx_adapter)) ]
		then
			max_mtpx_adapter=$((tmp_j))
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		if [ $((tmp_j)) -gt $((max_mtpx_adapter)) ]
		then
			max_mtpx_adapter=$((tmp_j))
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=101
	while [ $((tmp_i)) -le $((max_mtpx_adapter)) ]
	do
		card_mtpx[$tmp_i]=0
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do

		if [ $((Card_FROZEN[$tmp_i])) -ne 0 ]
		then
			card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]=-1
		else
			if [ $((${card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]})) -eq 0 ]
			then
				card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]=1
			fi
		fi

		tmp_i=$(($tmp_i+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do

		if [ $((${card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]})) -eq 0 ]
		then
			card_mtpx[$((${Card_MADAPTER[$tmp_i]}))]=1
		fi

		tmp_i=$(($tmp_i+1))
	done

	msg=""

	tmp_i=101
	true_number=1
	m_adapter[0]=0
	while [ $((tmp_i)) -le $((max_mtpx_adapter)) ]
	do
		if [ $((${card_mtpx[$tmp_i]})) -gt 0 ]
		then
			msg="$msg\"$true_number\" \"Activate ECT emulation for ${mtpx_board_name}$((true_number))"
			msg="$msg\""
			if [ $((${MTPX_ECT[$tmp_i]})) -ne 0 ]
			then
				msg="$msg on "
			else
				msg="$msg off "
			fi
			m_adapter[$tmp_i]=$(($true_number))
			true_number=$(($true_number+1))
		fi
		tmp_i=$(($tmp_i+1))
	done

	internal_h=$(($true_number-1))
	if [ $(($internal_h)) -ge 9 ]
	then
		internal_h=9
	fi
	high=$(($internal_h+7))

	set_help_id adapter_ect_emulation
	msg="$dialog ${help} --clear \
 	   --title \"ECT emulation\" --backtitle \"$backtitle\" \
			--separate-output \
			--checklist \"Please configure ECT emulation\" $((high)) 70 $((internal_h)) $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi

	tmp_i=101
	while [ $((tmp_i)) -le $((max_mtpx_adapter)) ]
	do
		grep "^$((m_adapter[$tmp_i]))$" $tmp > /dev/null 2>&1
		if [ $(($?)) -eq 0 ]
		then
			MTPX_ECT[$tmp_i]=1
		else
			MTPX_ECT[$tmp_i]=0
		fi
		tmp_i=$(($tmp_i+1))
	done
}

group_opt_configuration()
{
	if [ $((StartHMPMode)) -ne 0 ]
	then
		GlobalCapiGO=0
		return
	fi

	if [ $((StartCAPI)) -ne 0 ]
	then #{

		msg="\"0\" \"- Off (broadcast incoming call to all applications)\""
		if [ $((${GlobalCapiGO})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- On  (distribute calls on 'per group' basis)\""
		if [ $((${GlobalCapiGO})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id capi_go
		msg="$dialog ${help} \
			--clear --title \"CAPI call distribution\" --backtitle \"$backtitle\" \
			--radiolist \"         Please configure global CAPI call distribution policy\n                     (Group Optimization)\" 10 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		GlobalCapiGO=$(cat $tmp)

	fi #}
}

callrate_limit_configuration()
{
	i=0
	msg=" "
	while [ $((i)) -le 50 ]
	do
		if [ $((i)) -eq 0 ]
		then
			msg="$msg \"$((i))\" \"- off (default)\""
		fi
		if [ $((i)) -ge 1 ]
		then
			msg="$msg \"$((i))\" \"- call delay $(($i*20)) msec\""
		fi
		if [ $((${GlobalCallRateLimit})) -eq $((i)) ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		i=$(($i+1))
	done
	set_help_id callrate_limit
	msg="$dialog ${help} --clear \
		--title \"Call Rate Limiter\" --backtitle \"$backtitle\" \
		--radiolist \"Please select Call Rate Limit\" 19 70 12 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	GlobalCallRateLimit=$(cat $tmp)
}

fatal_exit()
{
	msg="none"

	if [ $((cmd_generate_config)) -ne 0 ]
	then
		exit 2
	fi

	if [ $((exit_configuration)) -eq 1 ]
	then
		if [ $((0)) -ne $((0)) ]
		then
			return
		else
			msg=$(cat $tmp)
			if [ "$msg" = "X" ]
			then
				configuration_aborted=1
			else

# ------------------------------------------------------------------
#   Console mode configuration of MTPX adapter
# ------------------------------------------------------------------
				if [ $((StartHMPMode)) -eq 0 ]
				then
					mtpx_tmp=0
					mtpx_board_name="M-Board "
				else
					mtpx_tmp=0
					mtpx_cfg_changed=1
					mtpx_board_name="dtiB"
					release_mtpx_adapter_pool
					#view_mtpx_configuration
					mtpx_tmp=0
				fi

				while [ $((mtpx_tmp)) -eq 3 ]
				do # {
					mtpx_tmp=0

					set_help_id use_mtpx_hlp
					msg="$dialog ${help} --clear --title \"Diva M-Board configuration\" "
					msg="$msg --backtitle \"$backtitle\" --radiolist \"Diva Board to M-Board assigment\" 12 70 5"

					if [ $((mtpx_cfg_changed)) -eq 0 ]
					then
						msg="$msg \"0\" \"Preserve existing configuration\""
						if [ $((DivaMtpxMode)) -eq 0 ]
						then
							msg="$msg on "
						else
							msg="$msg off "
						fi
          else
						msg="$msg \"0\" \"Save configuration\""
						if [ $((DivaMtpxMode)) -eq 0 ]
						then
							msg="$msg on "
						else
							msg="$msg off "
						fi
					fi

					msg="$msg \"1\" \"Bind every Diva Board to own M-Board\""
					msg="$msg off "
					msg="$msg \"2\" \"Join all Boards to Board pool\""
					if [ $((DivaMtpxMode)) -ne 0 ]
					then
						msg="$msg on "
					else
						msg="$msg off "
					fi
					msg="$msg \"3\" \"View current configuration\""
					msg="$msg off "
					msg="$msg \"4\" \"Edit configuration\""
					msg="$msg off "

					echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
					sh ${diva_dir}/cards.dlg
					if [ $(($?)) -eq 0 ]
					then
						mtpx_tmp=$(cat $tmp)
					fi

					case $((mtpx_tmp)) in # {
						1) mtpx_cfg_changed=1
							 release_mtpx_adapter_pool
               view_mtpx_configuration
							 mtpx_tmp=3
							 ;;

						2) mtpx_cfg_changed=1
							 create_mtpx_adapter_pool
               view_mtpx_configuration
							 mtpx_tmp=3
							 ;;

						3) view_mtpx_configuration
							;;

						4) edit_mtpx_adapter_configuration
							 if [ $(($?)) -eq 0 ]
							 then
                 mtpx_cfg_changed=1
	               view_mtpx_configuration
								 mtpx_tmp=3
							 else
								mtpx_tmp=3
							 fi
							;;
					esac # }


				done # }


				#mtpx_ect_configuration
				#group_opt_configuration
				#callrate_limit_configuration

				sn_on="on"
				dbg_on="on"
				force_on="on"
				call_log_on="on"
				diva_snmp_on="on"
				diva_start_on_boot_on="on"
				diva_reboot_after_system_error_on="on"
				diva_load_maint_on="on"
				if [ $((VerifyCardSerialNumber)) -eq 0 ]
				then
					sn_on="off"
				fi
				if [ $((LoadInDebugMode)) -eq 0 ]
				then
					dbg_on="off"
				fi
				if [ $((ForceDriverLoad)) -eq 0 ]
				then
					force_on="off"
				fi
				if [ $((StartDivalogd)) -eq 0 ]
				then
					call_log_on="off"
				fi
				if [ $((StartDivaSnmp)) -eq 0 ]
				then
					diva_snmp_on="off"
				fi
				if [ $((StartOnBoot)) -eq 0 ]
				then
					diva_start_on_boot_on="off"
				fi
				if [ $((SysRebootOnError)) -eq 0 ]
				then
					diva_reboot_after_system_error_on="off"
				fi
				if [ $((LoadMaintOn)) -eq 0 ]
				then
				  diva_load_maint_on="off"
				fi

        box_h=16
        box_wh=8

				if [ $((StartHMPMode)) -ne 0 ]
				then
					box_h=$(($box_h-1))
					box_wh=$(($box_wh-1))
				fi

				set_help_id card_startup_opt
			  msg="$dialog ${help} --clear --title \"Exit Diva Configuration Wizard\" --separate-output "
			  msg="$msg --backtitle \"$backtitle\" --checklist \"Card startup options\" $((box_h)) 70 $((box_wh))"
        msg="$msg \"V\" \"Verify Board serial number before microcode load\" $sn_on "
        msg="$msg \"D\" \"Use debug mode for microcode load\" $dbg_on "
        msg="$msg \"F\" \"Forced (insmod -f) driver load\" $force_on "
        msg="$msg \"L\" \"Write call history to '/var/log/divalog'\" $call_log_on "
				if [ $((StartHMPMode)) -eq 0 ]
				then
					msg="$msg \"M\" \"Load MAINT debug/trace driver\" $diva_load_maint_on "
				fi
				echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
				sh ${diva_dir}/cards.dlg
				if [ $(($?)) -ne 0 ]
				then
					return
				else
					grep "^V$" $tmp > /dev/null 2>&1
					if [ $(($?)) -eq 0 ]
					then
						VerifyCardSerialNumber=1
					else
						VerifyCardSerialNumber=0
					fi
					grep "^D$" $tmp > /dev/null 2>&1
					if [ $(($?)) -eq 0 ]
					then
						LoadInDebugMode=1
					else
						LoadInDebugMode=0
					fi
					grep "^F$" $tmp > /dev/null 2>&1
					if [ $(($?)) -eq 0 ]
					then
						ForceDriverLoad=1
					else
						ForceDriverLoad=0
					fi
					grep "^L$" $tmp > /dev/null 2>&1
					if [ $(($?)) -eq 0 ]
					then
						StartDivalogd=1
					else
						StartDivalogd=0
					fi
					grep "^N$" $tmp > /dev/null 2>&1
					if [ $(($?)) -eq 0 ]
					then
						StartDivaSnmp=1
					else
						StartDivaSnmp=0
					fi
					grep "^B$" $tmp > /dev/null 2>&1
					if [ $(($?)) -eq 0 ]
					then
						StartOnBoot=1
						/bin/bash ${diva_dir}cfg_util.sh 1  > /dev/null 2>&1
					else
						StartOnBoot=0
						/bin/bash ${diva_dir}cfg_util.sh 2  > /dev/null 2>&1
					fi
					grep "^R$" $tmp > /dev/null 2>&1
					if [ $(($?)) -eq 0 ]
					then
						SysRebootOnError=1
					else
						SysRebootOnError=0
					fi

					if [ $((StartHMPMode)) -eq 0 ]
					then
						grep "^M$" $tmp > /dev/null 2>&1
						if [ $(($?)) -eq 0 ]
						then
							LoadMaintOn=1
						else
							LoadMaintOn=0
						fi
					else
						set_system_hmp_debug_defaults
					fi

					$dialog --backtitle "$backtitle" \
								 --infobox "Create system configuration file ..." 3 70
					create_card_configuration_file
					diva_check_hsi_port
					store_card_configuration_to_file
					echo "" > $tmp
					echo 'Generated device nodes:' >> $tmp
					echo "" >> $tmp
					if [ $((StartCAPI)) -eq 1 ]
					then
						echo "  /dev/capi20           : MAJOR 68 MINOR 0" >> $tmp
						echo '                          Used by CAPI2.0 applications.' >> $tmp
					fi
					if [ $((StartTTY)) -eq 1 ]
					then
						if [ $((total_channels)) -ge 10 ]
						then
							echo "  /dev/ttyds[01-$((total_channels))]     : MAJOR   $((diva_tty_major)) MINOR [1-$((total_channels))]" >> $tmp
						else
							echo "  /dev/ttyds[01-0$((total_channels))]     : MAJOR   $((diva_tty_major)) MINOR [1-$((total_channels))]" >> $tmp
						fi
						echo '                          DIVA TTY device with data/fax modem emulation and' >> $tmp
						echo "                          extended features (caller ID support," >> $tmp
						echo '                          automatic detection of B-channel protocol,' >> $tmp
						echo '                          SYNC PPP support, ASYNC PPP support,' >> $tmp
						echo '                          automatic detection of PPP framing type,' >> $tmp
						echo '                          automatic ASYNC/SYNC PPP conversion' >> $tmp
						echo '                          All TTY features can be controlled by AT commands.' >> $tmp
					fi
					echo "" >> $tmp
					echo "  proc FS directory      : $diva_proc" >> $tmp
					echo "                           Access to driver/card trace/status information and" >> $tmp
					echo "                           to IDI/Management interface." >> $tmp
					echo "" >> $tmp
					echo "Genarated card configuration file:" >> $tmp
					echo "" >> $tmp
					cat ${diva_dir}divas_cfg.rc >> $tmp

					$dialog --title "Configuration Complete" \
						--backtitle "$backtitle" \
						--clear --textbox $tmp 18 70
					setterm -default
					setterm -clear
					files_cleanup

					${diva_dir}/divas_cfg.rc restart -1

					exit 0
				fi
			fi
		fi
	fi
	if [ ${failed_driver} != "none" ]
	then
		msg="'${failed_driver}' driver load failed. Please check system installation (kernel version, missing files)"
	fi
	if [ $((no_server_cards)) -eq 1 ]
	then
		msg="No Diva Boards were found"
	fi
	if [ $((configuration_aborted)) -eq 1 ]
	then
		msg="\n                  Configuration aborted by user"
	fi
	if [ "$msg" != "none" ]
	then
		$dialog --title "$errtitle" --backtitle "$backtitle" \
					 --clear --msgbox "$msg" 7 70
	fi

	setterm -default
	setterm -clear

	files_cleanup

	exit 1
}

#
# Check Diva driver device node
# Parameter 1 - driver name
# Parameter 2 - device node name
# Parameter 3 - minor
#
check_diva_device_node_file()
{
	diva_get_driver_major "$1"
	drv_major=$(($?))
	drv_minor=0

	if [ $(($#)) -gt $((2)) ]
	then
		drv_minor=$(($3))
	fi

	diva_get_device_major "$2"
	dev_major=$(($?))

	if [ $((drv_major)) -le $((0)) ]
	then
    	failed_driver="$1"
		fatal_exit
	fi

	if [ $((drv_major)) -ne $((dev_major)) ]
	then
		rm -f "$2"
		mknod "$2" c $((drv_major)) $((drv_minor))
		if [ $(($?)) -ne 0 ]
		then
	    	failed_driver="$2"
			fatal_exit
		fi
	fi
}

# ----------------------------------------------------------------------
# ENTRY POINT for hidden operation mode
#
# 1 - re-create the configuration file
#			return 0 on success and 1 on error
# 2 - Load DIDD/XDI drivers
#
# ----------------------------------------------------------------------
if [ $(($#)) -ge 1 ]
then
	case $(($1)) in
		1) dialog="false"
			 cmd_generate_config=1
			;;

		*) if [ "$1" = "-extended" ]
			 then
			   start_extended_configuration=1
			 else
			   exit 2
			 fi
			;;
	esac
fi


# ----------------------------------------------------------------------
# SYSTEM MODE
# ras_tty, piafs_tty, fax_tty, fax_capi, uni
# ----------------------------------------------------------------------
StartTTY=0
CStartTTY="$StartTTY"
TTY_PIAFS=0
CTTY_PIAFS="$TTY_PIAFS"
TTY_FAX=0
CTTY_FAX="$TTY_FAX"
StartCAPI=1
CStartCAPI="$StartCAPI"
CStartHMPMode="$StartHMPMode"
StartDivaSIPcontrol=0
CStartDivaSIPcontrol="$StartDivaSIPcontrol"
DivaSIPcontrol_bin="sipcontrol_aki"
CDivaSIPcontrol_bin="$DivaSIPcontrol_bin"
if [ $((max_softip_adapters)) -gt 0 ]
then
	StartDivaSoftIP=1
else
	StartDivaSoftIP=0
fi
CStartDivaSoftIP="$StartDivaSoftIP"
if [ $((max_ss7_links)) -gt 0 ]
then
	StartDivaSS7=1
else
	StartDivaSS7=0
fi
CStartDivaSS7="$StartDivaSS7"

# ----------------------------------------------------------------------
# Debug and Trace
# ----------------------------------------------------------------------
DebugTraceProfile="s"
CDebugTraceProfile="${DebugTraceProfile}"

DebugTraceADAPTER="0x00"
CDebugTraceADAPTER="${DebugTraceADAPTER}"

DebugTraceADAPTERLayer1="0"
CDebugTraceADAPTERLayer1="${DebugTraceADAPTERLayer1}"

DebugTraceADAPTERRBS="3"
CDebugTraceADAPTERRBS="${DebugTraceADAPTERRBS}"

DebugTraceADAPTERRTP="0"
CDebugTraceADAPTERRTP="${DebugTraceADAPTERRTP}"

DebugTraceSoftIPRTP="0"
CDebugTraceSoftIPRTP="${DebugTraceSoftIPRTP}"

DebugTraceSoftIP="0x104210f"
CDebugTraceSoftIP="${DebugTraceSoftIP}"

DebugTraceSIP="0x83"
CDebugTraceSIP="${DebugTraceSIP}"

DebugTraceXDI="0x197"
CDebugTraceXDI="${DebugTraceXDI}"

DebugTraceMTPX="0x197"
CDebugTraceMTPX="${DebugTraceMTPX}"

DebugTraceCAPI="0x197"
CDebugTraceCAPI="${DebugTraceCAPI}"

DebugTraceTTY="0x197"
CDebugTraceTTY="${DebugTraceTTY}"

DebugTraceSS7_MTP3="0x7"
CDebugTraceSS7_MTP3="${DebugTraceSS7_MTP3}"

DebugTraceSS7_ISUP="0x7"
CDebugTraceSS7_ISUP="${DebugTraceSS7_ISUP}"

# ----------------------------------------------------------------------
# GLOBAL FAX CLASS 2 OPTIONS
# ----------------------------------------------------------------------
GlobalFaxClass2Options=3
CGlobalFaxClass2Options="$GlobalFaxClass2Options"
GlobalFaxClass2OptionsSEP=0
CGlobalFaxClass2OptionsSEP="$GlobalFaxClass2OptionsSEP"
GlobalFaxClass2OptionsV34Rate=0
CGlobalFaxClass2OptionsV34Rate="$GlobalFaxClass2OptionsV34Rate"
GlobalFaxClass2OptionsHiRes=0
CGlobalFaxClass2OptionsHiRes="$GlobalFaxClass2OptionsHiRes"

# ----------------------------------------------------------------------
# Global PIAFS protocol options
# ----------------------------------------------------------------------
GlobalPiafsRTF=15
CGlobalPiafsRTF="$GlobalPiafsRTF"

# ----------------------------------------------------------------------
# Global TTY initialization string
# ----------------------------------------------------------------------
GlobalTTYATInit=""
CGlobalTTYATInit="$GlobalTTYATInit"

# ----------------------------------------------------------------------
# Global CAPI Group Optimization
# ----------------------------------------------------------------------
GlobalCapiGO=1
CGlobalCapiGO="$GlobalCapiGO"

GlobalCallRateLimit=0
CGlobalCallRateLimit="$GlobalCallRateLimit"
# ----------------------------------------------------------------------
# OTHER Settings
# ----------------------------------------------------------------------
CVerifyCardSerialNumber="$VerifyCardSerialNumber"
CLoadInDebugMode="$LoadInDebugMode"
CForceDriverLoad="$ForceDriverLoad"
CStartDivalogd="$StartDivalogd"
CStartDivaSnmp="$StartDivaSnmp"
CDivaMtpxMode="$DivaMtpxMode"
CStartOnBoot="$StartOnBoot"
CDivaTTYWaitCause="$DivaTTYWaitCause"
CDivaTTYIgnoreNumberType="$DivaTTYIgnoreNumberType"
CDivaTTYNoCarrier="$DivaTTYNoCarrier"

CMtpxOn="$MtpxOn"

CSDKLogFilename="$SDKLogFilename"
CSDKLogFormat="$SDKLogFormat"
CSDKLogLevel="$SDKLogLevel"

CSysLIFixPCIBus="$SysLIFixPCIBus"
CSysRebootOnError="$SysRebootOnError"
CLoadMaintOn="$LoadMaintOn"
CStartCtransferOn="$StartCtransferOn"
CSysCAPIIrq="$SysCAPIIrq"
CSysMSIIrq="$SysMSIIrq"

CTraceDecodeAll="$TraceDecodeAll"
CTraceDecodePPP="$TraceDecodePPP"
CTraceDecodeVSIG="$TraceDecodeVSIG"
cur_trace_drv=0
while [ $((cur_trace_drv)) -le $((32)) ]
do
  CTraceDecodeS[$cur_trace_drv]="${TraceDecodeS[$cur_trace_drv]}"
  cur_trace_drv=$(($cur_trace_drv+1))
done
CTraceDecodeChannel="$TraceDecodeChannel"

CHSIPORT="$HSIPORT"

# ----------------------------------------------------------------------
# TRY TO READ PREVIOUS SETTINGS
# ----------------------------------------------------------------------
sed -ne "/SHELL_CFG_START/,/SHELL_CFG_END/p;" ${diva_dir}divas_cfg.rc > ${diva_dir}cfg.tmp 2>/dev/null

source ${diva_dir}cfg.tmp

rm -f ${diva_dir}cfg.tmp

if [ "$CSystemMode" != "" ]
then
	if [ "$CSystemMode" = "ras_tty" ]
	then
		StartTTY=1
		TTY_PIAFS=0
		TTY_FAX=0
		StartCAPI=0
		StartDivaSIPcontrol=0
		StartDivaSoftIP=0
		StartDivaSS7=0
	fi
	if [ "$CSystemMode" = "piafs_tty" ]
	then
		StartTTY=1
		TTY_PIAFS=1
		TTY_FAX=0
		StartCAPI=0
		StartDivaSIPcontrol=0
		StartDivaSoftIP=0
		StartDivaSS7=0
	fi
	if [ "$CSystemMode" = "fax_tty" ]
	then
		StartTTY=1
		TTY_PIAFS=0
		TTY_FAX=1
		StartCAPI=0
		StartDivaSIPcontrol=0
		StartDivaSoftIP=0
		StartDivaSS7=0
	fi
	if [ "$CSystemMode" = "fax_capi" ]
	then
		StartTTY=0
		TTY_PIAFS=0
		TTY_FAX=0
		StartCAPI=1
		StartDivaSIPcontrol=0
		StartDivaSoftIP=0
		StartDivaSS7=0
	fi
	if [ "$CSystemMode" = "uni" ]
	then
		StartTTY=1
		TTY_PIAFS=0
		TTY_FAX=1
		StartCAPI=1
		StartDivaSIPcontrol=0
		StartDivaSoftIP=0
		StartDivaSS7=0
	fi
	DivaSIPcontrol_bin="sipcontrol_aki"
else
	StartTTY="$CStartTTY"
	TTY_PIAFS="$CTTY_PIAFS"
	TTY_FAX="$CTTY_FAX"
	StartCAPI="$CStartCAPI"
	StartDivaSIPcontrol="$CStartDivaSIPcontrol"
	DivaSIPcontrol_bin="$CDivaSIPcontrol_bin"
	StartDivaSoftIP="$CStartDivaSoftIP"
	StartDivaSS7="$CStartDivaSS7"
	StartHMPMode="$CStartHMPMode"
fi
if [ -z "$CSS7_type" ]
then
	SS7_type="native" # WebGUI default on divas_cfg.rc creation
else
	SS7_type="$CSS7_type"
fi

hw_adapters=$(lspci -d 0x1133:)
if [ $((max_softip_adapters)) -gt 0 -a "${hw_adapters}" == "" ]
then
	StartDivaSoftIP=1
	StartCAPI=1
	StartHMPMode=0
fi

if [ $((StartHMPMode)) -ne 0 ]
then
	StartTTY=0
  TTY_PIAFS=0
  TTY_FAX=0
  StartCAPI=1
  StartDivaSIPcontrol=0
  StartDivaSoftIP=0
  StartDivaSS7="$CStartDivaSS7"
  SS7_type="native"

	set_system_hmp_debug_defaults
fi

# ----------------------------------------------------------------------
# Debug and Trace
# ----------------------------------------------------------------------

DebugTraceProfile="$CDebugTraceProfile"
DebugTraceADAPTER="$CDebugTraceADAPTER"
DebugTraceADAPTERLayer1="$CDebugTraceADAPTERLayer1"
DebugTraceADAPTERRBS="$CDebugTraceADAPTERRBS"
DebugTraceADAPTERRTP="$CDebugTraceADAPTERRTP"
DebugTraceSoftIPRTP="$CDebugTraceSoftIPRTP"
DebugTraceSoftIP="$CDebugTraceSoftIP"
DebugTraceSIP="$CDebugTraceSIP"
DebugTraceXDI="$CDebugTraceXDI"
DebugTraceMTPX="$CDebugTraceMTPX"
DebugTraceCAPI="$CDebugTraceCAPI"
DebugTraceTTY="$CDebugTraceTTY"
DebugTraceSS7_MTP3="$CDebugTraceSS7_MTP3"
DebugTraceSS7_ISUP="$CDebugTraceSS7_ISUP"

# ----------------------------------------------------------------------

GlobalFaxClass2Options="$CGlobalFaxClass2Options"
GlobalFaxClass2OptionsSEP="$CGlobalFaxClass2OptionsSEP"
GlobalFaxClass2OptionsV34Rate="$CGlobalFaxClass2OptionsV34Rate"
GlobalFaxClass2OptionsHiRes="$CGlobalFaxClass2OptionsHiRes"
VerifyCardSerialNumber="$CVerifyCardSerialNumber"
LoadInDebugMode="$CLoadInDebugMode"
ForceDriverLoad="$CForceDriverLoad"
StartDivalogd="$CStartDivalogd"
StartDivaSnmp="$CStartDivaSnmp"

TraceDecodeAll="$CTraceDecodeAll"
TraceDecodePPP="$CTraceDecodePPP"
TraceDecodeVSIG="$CTraceDecodeVSIG"
cur_trace_drv=0
while [ $((cur_trace_drv)) -le $((32)) ]
do
  TraceDecodeS[$cur_trace_drv]="${CTraceDecodeS[$cur_trace_drv]}"
  cur_trace_drv=$(($cur_trace_drv+1))
done
TraceDecodeChannel="$CTraceDecodeChannel"

DivaMtpxMode="$CDivaMtpxMode"
StartOnBoot="$CStartOnBoot"
DivaTTYWaitCause="$CDivaTTYWaitCause"
DivaTTYIgnoreNumberType="$CDivaTTYIgnoreNumberType"
DivaTTYNoCarrier="$CDivaTTYNoCarrier"
GlobalPiafsRTF="$CGlobalPiafsRTF"
GlobalTTYATInit="$CGlobalTTYATInit"

GlobalCapiGO="$CGlobalCapiGO"
if [ $((StartHMPMode)) -ne 0 ]
then
	GlobalCapiGO=0
fi
GlobalCallRateLimit="$CGlobalCallRateLimit"

SDKLogFilename="$CSDKLogFilename"
SDKLogFormat="$CSDKLogFormat"
SDKLogLevel="$CSDKLogLevel"

SysLIFixPCIBus="$CSysLIFixPCIBus"
SysRebootOnError="$CSysRebootOnError"
LoadMaintOn="$CLoadMaintOn"
StartCtransferOn="$CStartCtransferOn"
SysCAPIIrq="$CSysCAPIIrq"
SysMSIIrq="$CSysMSIIrq"

HSIPORT="$CHSIPORT"

# ----------------------------------------------------------------------
# Pri protocol table
# ----------------------------------------------------------------------
cur=1
PriProtPROT[$cur]=1TR6
PriProtNOTE[$cur]="Germany, National (1TR6)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_1tr6"
Pri_PROT_IMAGE_MULTY[$cur]=""
Pri_PROT_VALUE[$cur]="0"
cur=$(($cur+1))

PriProtPROT[$cur]=ETSI
PriProtNOTE[$cur]="Europe/other countries, Euro-ISDN (ETSI-DSS1)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=1
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

PriProtPROT[$cur]=QSIG
PriProtNOTE[$cur]="PBX, Q.SIG E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=1
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="21"
resource_board_protocol=$((cur))
cur=$(($cur+1))

PriProtPROT[$cur]=T1QSIG
PriProtNOTE[$cur]="PBX, Q.SIG T1"
PriProtCH[$cur]=23
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=1
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="27"
cur=$(($cur+1))

PriProtPROT[$cur]=FRANC
PriProtNOTE[$cur]="France, National (VN3)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="2"
cur=$(($cur+1))

PriProtPROT[$cur]=BELG
PriProtNOTE[$cur]="Belgium, National (NET3)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="3"
cur=$(($cur+1))

PriProtPROT[$cur]=SWED
PriProtNOTE[$cur]="Sweden, Benelux Euro-ISDN (ETSI-DSS1)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=1
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="4"
cur=$(($cur+1))

PriProtPROT[$cur]=NI
PriProtNOTE[$cur]="USA/Canada, Nortel DMS100 (National ISDN), Lucent"
PriProtCH[$cur]=23
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="5"
cur=$(($cur+1))

PriProtPROT[$cur]=5ESS
PriProtNOTE[$cur]="USA/Canada, AT&T 5ESS (Custom ISDN)"
PriProtCH[$cur]=23
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="6"
cur=$(($cur+1))

PriProtPROT[$cur]=JAPAN
PriProtNOTE[$cur]="Japan, National (INS-1500)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_japan"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="7"
cur=$(($cur+1))

PriProtPROT[$cur]=ATEL
PriProtNOTE[$cur]="ATEL, Australia, old TPH1962"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="8"
cur=$(($cur+1))

PriProtPROT[$cur]=ITALY
PriProtNOTE[$cur]="Italy/Austria, Euro-ISDN (ETSI-DSS1)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=1
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="10"
cur=$(($cur+1))

PriProtPROT[$cur]=TWAN
PriProtNOTE[$cur]="DSS1, Taiwan"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="11"
cur=$(($cur+1))

PriProtPROT[$cur]=AUSTRAL
PriProtNOTE[$cur]="Australia, OnRamp (ETSI-DSS1)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="12"
cur=$(($cur+1))

PriProtPROT[$cur]=4ESS_SDN
PriProtNOTE[$cur]="USA/Canada, AT&T Software Defined Network"
PriProtCH[$cur]=23
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="13"
cur=$(($cur+1))

PriProtPROT[$cur]=4ESS_SDS
PriProtNOTE[$cur]="USA/Canada, AT&T Switched Digital Service"
PriProtCH[$cur]=23
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="14"
cur=$(($cur+1))

PriProtPROT[$cur]=4ESS_LDS
PriProtNOTE[$cur]="USA/Canada, AT&T Long Distance Service"
PriProtCH[$cur]=23
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="15"
cur=$(($cur+1))

PriProtPROT[$cur]=4ESS_MGC
PriProtNOTE[$cur]="USA/Canada, AT&T Megacom"
PriProtCH[$cur]=23
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="16"
cur=$(($cur+1))

PriProtPROT[$cur]=4ESS_MGI
PriProtNOTE[$cur]="USA/Canada, AT&T Megacom International"
PriProtCH[$cur]=23
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="17"
cur=$(($cur+1))

PriProtPROT[$cur]=HONGKONG
PriProtNOTE[$cur]="Hongkong, Euro-ISDN (ETSI-DSS1)"
PriProtCH[$cur]=23
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="18"
cur=$(($cur+1))

PriProtPROT[$cur]=RBSCAS
PriProtNOTE[$cur]="USA, RBS T1 (Robbed Bit Signaling)"
PriProtCH[$cur]=24
PriProtNT2[$cur]=0
PriProtRBS[$cur]=1
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="19"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, CN1 channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=E1_NOSIG
PriProtNOTE[$cur]="External Signaling E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=1
PriProtNOSIG_BASE[$cur]=ETSI
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

PriProtPROT[$cur]=T1_NOSIG
PriProtNOTE[$cur]="External Signaling T1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=1
PriProtNOSIG_BASE[$cur]=5ESS
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="6"
cur=$(($cur+1))

PriProtPROT[$cur]=E1CHAN
PriProtNOTE[$cur]="Channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=2
PriProtNOSIG_BASE[$cur]=E1CHAN
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="30"
cur=$(($cur+1))

PriProtPROT[$cur]=T1CHAN
PriProtNOTE[$cur]="Channelized T1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=2
PriProtNOSIG_BASE[$cur]=T1CHAN
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="31"
cur=$(($cur+1))

PriProtPROT[$cur]=E1UNCH
PriProtNOTE[$cur]="Unchannelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=2
PriProtNOSIG_BASE[$cur]=E1UNCH
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="28"
cur=$(($cur+1))

PriProtPROT[$cur]=T1UNCH
PriProtNOTE[$cur]="Unchannelized T1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=2
PriProtNOSIG_BASE[$cur]=T1UNCH
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="29"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, INDIA channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=1
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=VN6
PriProtNOTE[$cur]="France, National (VN4, VN6), Matra"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="33"
cur=$(($cur+1))

PriProtPROT[$cur]=E1MON
PriProtNOTE[$cur]="E1 Monitoring"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=4
PriProtNOSIG_BASE[$cur]=ETSI
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

PriProtPROT[$cur]=T1MON
PriProtNOTE[$cur]="T1 Monitoring"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=4
PriProtNOSIG_BASE[$cur]=5ESS
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="6"
cur=$(($cur+1))

PriProtPROT[$cur]="DSS1-CN"
PriProtNOTE[$cur]="ETSI-DSS1 China"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=1
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

PriProtPROT[$cur]="NEWZEAL"
PriProtNOTE[$cur]="New Zealand, (ETSI-DSS1)"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="36"
cur=$(($cur+1))

PriProtPROT[$cur]="SS7"
PriProtNOTE[$cur]="softSS7 Support"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=3
PriProtNOSIG_BASE[$cur]=ETSI
PriProtSS7[$cur]=1
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="21"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, Indonesia channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=2
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, Thailand channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=3
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, Philippines channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=4
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, Brazil channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=5
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, Mexico channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=6
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, ITU-T channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=100
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, Korean channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=7
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]="DSS1-JP"
PriProtNOTE[$cur]="ETSI-DSS1 Japan"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=1
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

PriProtPROT[$cur]="SERBIA"
PriProtNOTE[$cur]="Serbia Euro-ISDN (ETSI-DSS1) with CRC4 off"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=1
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="37"
cur=$(($cur+1))

PriProtPROT[$cur]="LINESIDEE1"
PriProtNOTE[$cur]="Lineside E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="38"
cur=$(($cur+1))

PriProtPROT[$cur]="SS7_E1"
PriProtNOTE[$cur]="DSI SS7 E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=3
PriProtNOSIG_BASE[$cur]=ETSI
PriProtSS7[$cur]=1
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="21"
cur=$(($cur+1))

PriProtPROT[$cur]="SS7_T1"
PriProtNOTE[$cur]="DSI SS7 T1"
PriProtCH[$cur]=24
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=1
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=3
PriProtNOSIG_BASE[$cur]=5ESS
PriProtSS7[$cur]=1
Pri_PROT_IMAGE[$cur]="te_us"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="27"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, Argentina channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=8
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=R2CAS
PriProtNOTE[$cur]="R2 signaling, Venezuela channelized E1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=0
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=0
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=1
PriProtR2Dialect[$cur]=9
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]=""
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="32"
cur=$(($cur+1))

PriProtPROT[$cur]=Res01
PriProtNOTE[$cur]="Reserved 1"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=1
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="21"
resource_board_protocol=$((cur))
cur=$(($cur+1))

PriProtPROT[$cur]=Res02
PriProtNOTE[$cur]="Reserved 2"
PriProtCH[$cur]=23
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=1
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="27"
cur=$(($cur+1))

PriProtPROT[$cur]=Res03
PriProtNOTE[$cur]="Reserved 3"
PriProtCH[$cur]=30
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=1
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="21"
resource_board_protocol=$((cur))
cur=$(($cur+1))

PriProtPROT[$cur]=Res04
PriProtNOTE[$cur]="Reserved 4"
PriProtCH[$cur]=23
PriProtNT2[$cur]=1
PriProtRBS[$cur]=0
PriProtQSIG[$cur]=1
PriProtETSI_SuppSrv[$cur]=0
PriProtNT2NO[$cur]=0
PriProtR2[$cur]=0
PriProtNOSIG[$cur]=0
PriProtSS7[$cur]=0
Pri_PROT_IMAGE[$cur]="te_etsi"
Pri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Pri_PROT_VALUE[$cur]="27"
cur=$(($cur+1))

PriProtPROT[$cur]=none

# -------------------------------------------------------------------
#  BRI protocols
# -------------------------------------------------------------------
cur=1
BriProtPROT[$cur]=1TR6
BriProtNOTE[$cur]="Germany, National (1TR6)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=1
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_1tr6"
Bri_PROT_IMAGE_MULTY[$cur]=""
Bri_PROT_VALUE[$cur]="0"
cur=$(($cur+1))

BriProtPROT[$cur]=ETSI
BriProtNOTE[$cur]="Europe/other countries, Euro-ISDN (ETSI-DSS1)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=1
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

BriProtPROT[$cur]="QSIG"
BriProtNOTE[$cur]="PBX, Q.SIG"
BriProtCH[$cur]=2
BriProtNT2[$cur]=1
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=1
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="21"
cur=$(($cur+1))

BriProtPROT[$cur]="FRANC"
BriProtNOTE[$cur]="France, National (VN3)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="2"
cur=$(($cur+1))


BriProtPROT[$cur]="BELG"
BriProtNOTE[$cur]="Belgium, National (NET3)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="3"
cur=$(($cur+1))


BriProtPROT[$cur]="NI"
BriProtNOTE[$cur]="USA/Canada, Nortel DMS100 (National ISDN)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=1
BriProtNI[$cur]=1
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_us"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="5"
cur=$(($cur+1))

BriProtPROT[$cur]="5ESS"
BriProtNOTE[$cur]="USA/Canada, AT&T 5ESS (Custom ISDN)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=1
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_us"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="6"
cur=$(($cur+1))

BriProtPROT[$cur]="JAPAN"
BriProtNOTE[$cur]="Japan, National (INS-64)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=1
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_japan"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="7"
cur=$(($cur+1))

BriProtPROT[$cur]="ITALY"
BriProtNOTE[$cur]="Italy/Austria, Euro-ISDN (ETSI-DSS1)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=1
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="10"
cur=$(($cur+1))

BriProtPROT[$cur]="TWAN"
BriProtNOTE[$cur]="Taiwan, Euro-ISDN (ETSI-DSS1)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="11"
cur=$(($cur+1))

BriProtPROT[$cur]="AUSTRAL"
BriProtNOTE[$cur]="Australia, OnRamp (ETSI-DSS1)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="12"
cur=$(($cur+1))

BriProtPROT[$cur]="HONGKONG"
BriProtNOTE[$cur]="Hongkong, Euro-ISDN (ETSI-DSS1)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="18"
cur=$(($cur+1))

BriProtPROT[$cur]="EWSD"
BriProtNOTE[$cur]="USA/Canada, Siemens EWSD (National ISDN)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=1
BriProtNI[$cur]=1
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_us"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="22"
cur=$(($cur+1))

BriProtPROT[$cur]="5ESS_NI"
BriProtNOTE[$cur]="USA/Canada, Lucent Avaya 5ESS (National ISDN)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=1
BriProtNI[$cur]=1
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_us"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="23"
cur=$(($cur+1))

BriProtPROT[$cur]="US_NOSIG"
BriProtNOTE[$cur]="US BRI with External Signaling"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=1
BriProtNOSIG[$cur]=1
BriProtNOSIG_BASE[$cur]=5ESS
Bri_PROT_IMAGE[$cur]="te_us"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="6"
cur=$(($cur+1))

BriProtPROT[$cur]="ETSI_NOSIG"
BriProtNOTE[$cur]="ETSI BRI with External Signaling"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=1
BriProtNT2NO[$cur]=1
BriProtNOSIG[$cur]=1
BriProtNOSIG_BASE[$cur]=ETSI
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

BriProtPROT[$cur]="VN6"
BriProtNOTE[$cur]="France, National (VN4, VN6)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="33"
cur=$(($cur+1))

BriProtPROT[$cur]="ALAW_MON"
BriProtNOTE[$cur]="A-Law Monitoring"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=1
BriProtNOSIG[$cur]=2
BriProtNOSIG_BASE[$cur]=ETSI
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

BriProtPROT[$cur]="ULAW_MON"
BriProtNOTE[$cur]="u-Law Monitoring"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=1
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=1
BriProtNOSIG[$cur]=2
Bri_PROT_IMAGE[$cur]="te_us"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="6"
cur=$(($cur+1))

BriProtPROT[$cur]="NEWZEAL"
BriProtNOTE[$cur]="New Zealand, (ETSI-DSS1)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="36"
cur=$(($cur+1))

BriProtPROT[$cur]="DSS1-CN"
BriProtNOTE[$cur]="China, Euro-ISDN (ETSI-DSS1)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=1
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

BriProtPROT[$cur]="DSS1-JP"
BriProtNOTE[$cur]="Japan, Euro-ISDN (ETSI-DSS1)"
BriProtCH[$cur]=2
BriProtNT2[$cur]=0
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=0
BriProtETSI_SuppSrv[$cur]=1
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="1"
cur=$(($cur+1))

BriProtPROT[$cur]="Res01"
BriProtNOTE[$cur]="Reserved 1"
BriProtCH[$cur]=2
BriProtNT2[$cur]=1
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=1
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="21"
cur=$(($cur+1))

BriProtPROT[$cur]="Res02"
BriProtNOTE[$cur]="Reserved 2"
BriProtCH[$cur]=2
BriProtNT2[$cur]=1
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=1
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="21"
cur=$(($cur+1))

BriProtPROT[$cur]="Res03"
BriProtNOTE[$cur]="Reserved 3"
BriProtCH[$cur]=2
BriProtNT2[$cur]=1
BriProtRBS[$cur]=0
BriProtUS[$cur]=0
BriProtNI[$cur]=0
BriProtQSIG[$cur]=1
BriProtETSI_SuppSrv[$cur]=0
BriProtNT2NO[$cur]=0
BriProtNOSIG[$cur]=0
Bri_PROT_IMAGE[$cur]="te_etsi"
Bri_PROT_IMAGE_MULTY[$cur]="te_dmlt"
Bri_PROT_VALUE[$cur]="21"
cur=$(($cur+1))

BriProtPROT[$cur]=none
cur=0

# -------------------------------------------------------------------
#  Analog protocols
# -------------------------------------------------------------------
cur=1

AnalogProtPROT[$cur]="TBR21"
AnalogProtNOTE[$cur]="Europe/other countries"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="0"
Analog_PROT_MAN_PATH[$cur]="EUROPE-TBR21"
cur=$(($cur+1))

AnalogProtPROT[$cur]="USA-CAN"
AnalogProtNOTE[$cur]="USA/Canada"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="1"
Analog_PROT_MAN_PATH[$cur]="USA-CAN"
cur=$(($cur+1))

AnalogProtPROT[$cur]="DENMARK"
AnalogProtNOTE[$cur]="Denmark"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="2"
Analog_PROT_MAN_PATH[$cur]="DENMARK"
cur=$(($cur+1))

AnalogProtPROT[$cur]="SWEDEN"
AnalogProtNOTE[$cur]="Sweden"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="3"
Analog_PROT_MAN_PATH[$cur]="SWEDEN"
cur=$(($cur+1))

AnalogProtPROT[$cur]="UAE"
AnalogProtNOTE[$cur]="United Arabian Emirates"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="4"
Analog_PROT_MAN_PATH[$cur]="UAE"
cur=$(($cur+1))

AnalogProtPROT[$cur]="NETHERLANDS"
AnalogProtNOTE[$cur]="Netherlands"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="5"
Analog_PROT_MAN_PATH[$cur]="NETHERLANDS"
cur=$(($cur+1))

AnalogProtPROT[$cur]="AUSTRALIA"
AnalogProtNOTE[$cur]="Australia"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="6"
Analog_PROT_MAN_PATH[$cur]="AUSTRALIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="JAPAN"
AnalogProtNOTE[$cur]="Japan"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="7"
Analog_PROT_MAN_PATH[$cur]="JAPAN"
cur=$(($cur+1))

AnalogProtPROT[$cur]="UK"
AnalogProtNOTE[$cur]="GB-UK"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="8"
Analog_PROT_MAN_PATH[$cur]="UK"
cur=$(($cur+1))

AnalogProtPROT[$cur]="SOUTH-KOREA"
AnalogProtNOTE[$cur]="South Korea"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="9"
Analog_PROT_MAN_PATH[$cur]="SOUTH-KOREA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="CHINA"
AnalogProtNOTE[$cur]="China"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="10"
Analog_PROT_MAN_PATH[$cur]="CHINA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="INDIA"
AnalogProtNOTE[$cur]="India"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="11"
Analog_PROT_MAN_PATH[$cur]="INDIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="MALAYSIA"
AnalogProtNOTE[$cur]="Malaysia"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="12"
Analog_PROT_MAN_PATH[$cur]="MALAYSIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="SINGAPORE"
AnalogProtNOTE[$cur]="Singapore"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="13"
Analog_PROT_MAN_PATH[$cur]="SINGAPORE"
cur=$(($cur+1))

AnalogProtPROT[$cur]="TAIWAN"
AnalogProtNOTE[$cur]="Taiwan"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="14"
Analog_PROT_MAN_PATH[$cur]="TAIWAN"
cur=$(($cur+1))

AnalogProtPROT[$cur]="SOUTH-AFRICA"
AnalogProtNOTE[$cur]="South Africa"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="15"
Analog_PROT_MAN_PATH[$cur]="SOUTH-AFRICA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="BULGARIA"
AnalogProtNOTE[$cur]="Bulgaria"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="16"
Analog_PROT_MAN_PATH[$cur]="BULGARIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="CROATIA"
AnalogProtNOTE[$cur]="Croatia"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="17"
Analog_PROT_MAN_PATH[$cur]="CROATIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="CZECH-REPUBLIC"
AnalogProtNOTE[$cur]="Czech-Republic"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="18"
Analog_PROT_MAN_PATH[$cur]="CZECH-REPUBLIC"
cur=$(($cur+1))

AnalogProtPROT[$cur]="ESTONIA"
AnalogProtNOTE[$cur]="Estonia"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="19"
Analog_PROT_MAN_PATH[$cur]="ESTONIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="HUNGARY"
AnalogProtNOTE[$cur]="Hungary"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="20"
Analog_PROT_MAN_PATH[$cur]="HUNGARY"
cur=$(($cur+1))

AnalogProtPROT[$cur]="LATVIA"
AnalogProtNOTE[$cur]="Latvia"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="21"
Analog_PROT_MAN_PATH[$cur]="LATVIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="LITHUANIA"
AnalogProtNOTE[$cur]="Lithuania"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="22"
Analog_PROT_MAN_PATH[$cur]="LITHUANIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="POLAND"
AnalogProtNOTE[$cur]="Poland"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="23"
Analog_PROT_MAN_PATH[$cur]="POLAND"
cur=$(($cur+1))

AnalogProtPROT[$cur]="ROMANIA"
AnalogProtNOTE[$cur]="Romania"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="24"
Analog_PROT_MAN_PATH[$cur]="ROMANIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="SLOVAKIA"
AnalogProtNOTE[$cur]="Slovakia"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="25"
Analog_PROT_MAN_PATH[$cur]="SLOVAKIA"
cur=$(($cur+1))

AnalogProtPROT[$cur]="SLOVENIA"
AnalogProtNOTE[$cur]="Slovenia"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="26"
Analog_PROT_MAN_PATH[$cur]="SLOVENIA"
cur=$(($cur+1))


AnalogProtPROT[$cur]="RUSSIA"
AnalogProtNOTE[$cur]="Russia"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="27"
Analog_PROT_MAN_PATH[$cur]="RUSSIA"
cur=$(($cur+1))


AnalogProtPROT[$cur]="THAILAND"
AnalogProtNOTE[$cur]="Thailand"
Analog_PROT_IMAGE[$cur]="te_dmlt"
Analog_PROT_IMAGE_MULTY[$cur]=""
Analog_PROT_VALUE[$cur]="28"
Analog_PROT_MAN_PATH[$cur]="THAILAND"
cur=$(($cur+1))

AnalogProtPROT[$cur]=none
cur=0

# constant for later use by ascii_str_to_bs
diva_string_to_hex_map=$(awk 'BEGIN { for (i=32;i<127;i++) { printf "%c", i;} }')

#
# Small helper
# 1 - value
# 2 - length
#

diva_write_pcinit_value()
{
	v_tmp=0
	v1_tmp=$(($1))

	while [ $((v_tmp)) -lt $(($2)) ]
	do
		if [ $((v_tmp)) -gt $((0)) ]
		then
			v1_tmp=$(($v1_tmp>>8))
		fi
		if [ $(($v_tmp+1)) -lt $(($2)) ]
		then
			printf "%x," $(($v1_tmp&0xff))
		else
			printf "%x" $(($v1_tmp&0xff))
		fi
		v_tmp=$(($v_tmp+1))
	done
}

#
# Write pcinit section
# 1 - pcinit
# 2 - pcinit value
# 3 - length
# 4 - write if zero
# 5 - management path
# 6 - description
# 7 - Line (for pots)
#
diva_write_pcinit()
{
  if [ $(($4)) -eq $((0)) ]
  then
	  if [ $(($2)) -eq $((0)) ]
	  then
		  return;
	  fi
  fi

	if [ ! -z "$6" ]
	then
		echo "# $6" >> ${diva_xml}
	fi

	echo    '    <tlie>' >> ${diva_xml}
	echo    '     <vie id="pcinitname">'$(printf "%x" $1)'</vie>' >> ${diva_xml}
  echo    '     <vie id="pcinitvalue"><bs>'$(diva_write_pcinit_value $2 $3)'</bs></vie>' >> ${diva_xml}

  if [ ! -z "$5" ]
	then
		echo  '     <vie id="managementinfo"><as>'"$5"'</as></vie>' >> ${diva_xml}
	fi

	if [ ! -z "$7" ]
	then
		echo  '     <vie id="parameterline">'"$7"'</vie>' >> ${diva_xml}
	fi

	echo    '    </tlie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
}

#
# Write namedvar section
# 1 - name
# 2 - value
# 3 - length
# 4 - write if zero
# 5 - management path
# 6 - description
#
diva_write_named_var()
{
  if [ $(($4)) -eq $((0)) ]
  then
	  if [ $(($2)) -eq $((0)) ]
	  then
		  return;
	  fi
  fi

	if [ ! -z "$6" ]
	then
		echo "# $6" >> ${diva_xml}
	fi

	echo    '    <tlie>' >> ${diva_xml}
	echo    '     <vie id="namedvarname"><as>'$1'</as></vie>' >> ${diva_xml}
  echo    '     <vie id="namedvarvalue"><bs>'$(diva_write_pcinit_value $2 $3)'</bs></vie>' >> ${diva_xml}

  if [ ! -z "$5" ]
	then
		echo  '     <vie id="managementinfo"><as>'"$5"'</as></vie>' >> ${diva_xml}
	fi


	echo    '    </tlie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
}

#
# Write namedvar section from prepared binary string
# 1 - name
# 2 - bs value
# 3 - management path
# 4 - description
#
diva_write_named_string_var()
{

	if [ ! -z "$4" ]
	then
		echo "# $4" >> ${diva_xml}
	fi

	echo    '    <tlie>' >> ${diva_xml}
	echo    '     <vie id="namedvarname"><as>'$1'</as></vie>' >> ${diva_xml}
	echo    '     <vie id="namedvarvalue"><bs>'$2'</bs></vie>' >> ${diva_xml}

  if [ ! -z "$3" ]
	then
		echo  '     <vie id="managementinfo"><as>'"$3"'</as></vie>' >> ${diva_xml}
	fi


	echo    '    </tlie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
}

#
# Write namedvar section from ascii string
# 1 - name
# 2 - as value
# 3 - management path
# 4 - description
#
diva_write_named_ascii_string_var()
{

	if [ ! -z "$4" ]
	then
		echo "# $4" >> ${diva_xml}
	fi

	echo    '    <tlie>' >> ${diva_xml}
	echo    '     <vie id="namedvarname"><as>'$1'</as></vie>' >> ${diva_xml}
	echo    '     <vie id="namedvarvalue"><as>'$2'</as></vie>' >> ${diva_xml}

  if [ ! -z "$3" ]
	then
		echo  '     <vie id="managementinfo"><as>'"$3"'</as></vie>' >> ${diva_xml}
	fi


	echo    '    </tlie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
}

#
# Write  section
# 1 - pcinit
# 2 - binary string
# 3 - length
# 4 - write if zero
# 5 - management path
# 6 - description
# 7 - Line (for POTS)
#
diva_write_pcinit_str()
{
	if [ ! -z "$6" ]
	then
		echo "# $6" >> ${diva_xml}
	fi

	echo    '    <tlie>' >> ${diva_xml}
	echo    '     <vie id="pcinitname">'$(printf "%x" $1)'</vie>' >> ${diva_xml}
  echo    '     <vie id="pcinitvalue">'$2'</vie>' >> ${diva_xml}

  if [ ! -z "$5" ]
	then
		echo  '     <vie id="managementinfo"><as>'"$5"'</as></vie>' >> ${diva_xml}
	fi

	if [ ! -z "$7" ]
	then
		echo  '     <vie id="parameterline">'"$7"'</vie>' >> ${diva_xml}
	fi

	echo    '    </tlie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
}

#
# Write namedvar section
# 1 - variable name
# 2 - value
# 3 - value length or zero if ascii string
# 4 - management interface path
# 5 - description
# 6 - file
diva_write_namedvar()
{
	if [ ! -z "$5" ]
	then
		echo "# $5" >> ${diva_xml}$6
	fi

	echo    '    <tlie>' >> ${diva_xml}$6
	echo    '     <vie id="namedvarname"><as>'"$1"'</as></vie>' >> ${diva_xml}$6
	if [ $(($3)) -eq 0 ]
	then
		echo  '     <vie id="namedvarvalue"><as>'"$2"'</as></vie>' >> ${diva_xml}$6
	else
		echo  '     <vie id="namedvarvalue"><bs>'$(diva_write_pcinit_value $2 $3)'</bs></vie>' >> ${diva_xml}$6
	fi

  if [ ! -z "$4" ]
	then
		echo  '     <vie id="managementinfo"><as>'"$4"'</as></vie>' >> ${diva_xml}$6
	fi

	echo    '    </tlie>' >> ${diva_xml}$6
	echo "" >> ${diva_xml}$6
}

#
# Write raminit section
# 1 - offset
# 2 - value
# 3 - management path
# 4 - description
#
diva_write_ram_byte()
{
	if [ ! -z "$4" ]
	then
		echo "# $4" >> ${diva_xml}
	fi
	echo    '    <tlie>' >> ${diva_xml}
	echo -e '     <vie id="raminitoffset">'$(printf "%x" $1)'</vie>' >> ${diva_xml}
	echo    '     <vie id="raminitoperation">1</vie>' >> ${diva_xml}
	echo    '     <vie id="raminitvalue"><bs>'$(printf "%x" $2)'</bs></vie>' >> ${diva_xml}

  if [ ! -z "$3" ]
	then
		echo  '     <vie id="managementinfo"><as>'"$3"'</as></vie>' >> ${diva_xml}
	fi

	echo    '    </tlie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
}

#
# Map Numbers to Binary Str in hex incl. '*' '-' ',' and '!'
#
diva_str_to_bs()
{
  diva_nr_to_hex_map="30313233343536373839"
  local tmp=""
  local i=0
  if [ ! -z $1 ]
  then
    while [ $i -lt ${#1} ]
    do
      local a=${1:$i:1}
      case "$a" in

      '*')
						tmp=$tmp'2a,'
        ;;
      '-')
						tmp=$tmp'2d,'
        ;;
			'!')
						tmp=$tmp'21,'
				;;
			',')
						tmp=$tmp'2c,'
				;;
			['0'-'9'] )
						a="$a"*2;
						tmp=$tmp${diva_nr_to_hex_map:$a:2}','
				;;
			['a'-'d''#'] )
						tmp=$tmp$(diva_ascii_str_to_bs $a)','
				;;
			*)
				;;
			esac
      i=$(($i+1))
    done
  fi
  printf "%s" $tmp
}

#
# Map Ascii Strings to binary hex representation
# 1 - string
#

diva_ascii_str_to_bs()
{
  local tmp=""
  local hextmp=""
  local i=0
  if [ ! -z $1 ]
  then
    while [ $i -lt ${#1} ]
    do
    	local a=${1:$i:1}
			hextmp=$(echo $diva_string_to_hex_map "$a" | awk '{ i=index($1, $2)+32; printf "%x", i; }')
			tmp=$tmp$hextmp
			if [ $i -lt $((${#1}-1)) ]
			then
				tmp=$tmp','
			fi
      i=$(($i+1))
    done
  fi
  printf "%s" $tmp
}

#
# Write raminit string section
# 1 - offset
# 2 - zt string
# 3 - management path
# 4 - description
#
diva_write_ram_str()
{
	if [ ! -z "$4" ]
	then
		echo "# $4 $2 " >> ${diva_xml}
	fi

	echo    '    <tlie>' >> ${diva_xml}
	echo    '     <vie id="raminitoffset">'$(printf "%x" $1)'</vie>' >> ${diva_xml}
        echo    '     <vie id="raminitoperation">1</vie>' >> ${diva_xml}
	echo    "     <vie id=\"raminitvalue\"><bs>$(diva_str_to_bs $2)0</bs></vie>" >> ${diva_xml}

	if [ ! -z "$3" ]
	then
		echo  '     <vie id="managementinfo"><as>'"$3"'</as></vie>' >> ${diva_xml}
	fi

	echo    '    </tlie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
}

#
# Validate keypad characters and length for POTS params
# 1 - $tmp result file
# 2 - allowed length
#
diva_validate_keypad_str()
{
	local v_tmp=$(cat $1)
	local i=0
	if [ ${#v_tmp} -le $2 ]
	then
		grep '^[,!#\*[:digit:]abcdABCD]*$' "$1" > /dev/null 2>&1
		if [ $(($?)) -eq 0 -o ${#v_tmp} -eq 0 ]
		then
			i=1
		fi
	fi
	printf "%d" $i
}
# -------------------------------------------------------------------
#  Server card detection procedure
# -------------------------------------------------------------------
update_card_configuration()
{

if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then
		total_channels=$(($total_channels+30))
	else
		total_channels=$(($total_channels+2))
	fi
else
	total_channels=$(($total_channels+${Card_ANALOG[$current_card]}))
fi

cfg_lib_protocol_name=""
cfg_lib_dmlt_protocol_name=""

index=""
if [ $((${CardADAPTERS[$current_card]})) -le 1 -o \
		 $((${CardSUBADAPTER[$current_card]})) -le 1 ]
then
	index=""
else
	index="$((${CardSUBADAPTER[$current_card]}-1))"
fi

if [ $((${CardADAPTERS[$current_card]})) -gt 1 -a $((${CardSUBADAPTER[$current_card]})) -eq 1 -a \
     $((${Card_ANALOG[$current_card]})) -eq 0 ]
then #{
  #
  # Check if one of boards uses 1TR6 protocol
  # if yes, then this is necessary to load board
  # using multiple images
  #
  check_protocol_index=0
  check_protocol_use_multiple_images=0

  while [ $((check_protocol_index)) -lt $((${CardADAPTERS[$current_card]})) ]
  do   #{
    if [ $((${CardPROT[$(($current_card+$check_protocol_index))]})) -eq 1 ]
    then
      check_protocol_use_multiple_images=1
      break
    fi
    check_protocol_index=$(($check_protocol_index+1))
  done #}

  if [ $((check_protocol_use_multiple_images)) -ne 0 ]
  then #{
    check_protocol_index=0
    while [ $((check_protocol_index)) -lt $((${CardADAPTERS[$current_card]})) ]
    do   #{
      Card_SINGLE_IMAGE[$(($current_card+$check_protocol_index))]=0
			Card_PROTOCOL_SUFFIX[$(($current_card+$check_protocol_index))]="${Card_PROTOCOL_SINGLE_IMAGE_SUFFIX[$(($current_card+$check_protocol_index))]}"
      check_protocol_index=$(($check_protocol_index+1))
    done #}
  fi   #}

  unset check_protocol_index
  unset check_protocol_use_multiple_images
fi   #}

cfg_lib_nosig=""
cfg_lib_Monitor=""
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
	then
		if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -gt 1 ]
		then
			if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -gt 2 ]
			then
				if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -gt 3 ]
				then
					ProtocolString="-f${index} ${PriProtNOSIG_BASE[${CardPROT[$current_card]}]} -nosig${index} -Monitor"
				cfg_lib_nosig="1"
					cfg_lib_Monitor="1"
					MTPX_HI[Card_MADAPTER[$current_card]]=0
				cfg_lib_protocol_name="${Pri_PROT_IMAGE[${CardPROT[$current_card]}]}"
				cfg_lib_dmlt_protocol_name="${Pri_PROT_IMAGE_MULTY[${CardPROT[$current_card]}]}"
			else
					ProtocolString="-f${index} ${PriProtPROT[${CardPROT[$current_card]}]} -nosig${index}"
					cfg_lib_nosig="3"
					cfg_lib_protocol_name="${Pri_PROT_IMAGE[${CardPROT[$current_card]}]}"
					cfg_lib_dmlt_protocol_name="${Pri_PROT_IMAGE_MULTY[${CardPROT[$current_card]}]}"
				fi
			else
				ProtocolString="-f${index} ${PriProtPROT[${CardPROT[$current_card]}]} -nosig${index}"
				cfg_lib_nosig="1"
				cfg_lib_protocol_name="${Pri_PROT_IMAGE[${CardPROT[$current_card]}]}"
				cfg_lib_dmlt_protocol_name="${Pri_PROT_IMAGE_MULTY[${CardPROT[$current_card]}]}"
			fi
		else
			ProtocolString="-f${index} ${PriProtNOSIG_BASE[${CardPROT[$current_card]}]} -nosig${index}"
			cfg_lib_nosig="1"
			cfg_lib_protocol_name="${Pri_PROT_IMAGE[${CardPROT[$current_card]}]}"
			cfg_lib_dmlt_protocol_name="${Pri_PROT_IMAGE_MULTY[${CardPROT[$current_card]}]}"
		fi
	else
		ProtocolString="-f${index} ${PriProtPROT[${CardPROT[$current_card]}]}"
		cfg_lib_protocol_name="${Pri_PROT_IMAGE[${CardPROT[$current_card]}]}"
		cfg_lib_dmlt_protocol_name="${Pri_PROT_IMAGE_MULTY[${CardPROT[$current_card]}]}"
	fi
else
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		if [ $((${BriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
		then
			ProtocolString="-f${index} ${BriProtNOSIG_BASE[${CardPROT[$current_card]}]} -nosig${index}"
			cfg_lib_nosig="1"
			cfg_lib_protocol_name="${Bri_PROT_IMAGE[${CardPROT[$current_card]}]}"
			cfg_lib_dmlt_protocol_name="${Bri_PROT_IMAGE_MULTY[${CardPROT[$current_card]}]}"
			if [ $((${BriProtNOSIG[${CardPROT[$current_card]}]})) -gt 1 ]
			then
				cfg_lib_Monitor="1"
				Card_FPGA_IMAGE[$current_card]="ds4b2mon.bit"
			fi
		else
			ProtocolString="-f${index} ${BriProtPROT[${CardPROT[$current_card]}]}"
			cfg_lib_protocol_name="${Bri_PROT_IMAGE[${CardPROT[$current_card]}]}"
			cfg_lib_dmlt_protocol_name="${Bri_PROT_IMAGE_MULTY[${CardPROT[$current_card]}]}"
		fi
# --------------------------------------
	else
# --------------------------------------
#   Analog Board
# --------------------------------------
		cfg_lib_protocol_name="${Analog_PROT_IMAGE[${CardPROT[$current_card]}]}"
		cfg_lib_dmlt_protocol_name="${Analog_PROT_IMAGE_MULTY[${CardPROT[$current_card]}]}"

# --------------------------------------
	fi
fi
if [ $((${Card_ResourceBoard[$current_card]})) -eq 1 ]
then
	cfg_lib_nosig="2"
fi

if [ ! -z "${Card_PROTOCOL_SUFFIX[$current_card]}" ]
then
	cfg_lib_protocol_name="${cfg_lib_protocol_name}.${Card_PROTOCOL_SUFFIX[$current_card]}"
	cfg_lib_dmlt_protocol_name="${cfg_lib_dmlt_protocol_name}.${Card_PROTOCOL_SUFFIX[$current_card]}"

  if [ $((${CardADAPTERS[$current_card]})) -gt 1 ]
	then
		if [ $((${Card_SINGLE_IMAGE[$current_card]})) -eq 0 ]
		then
    	cfg_lib_protocol_name="${cfg_lib_protocol_name}$((${CardSUBADAPTER[$current_card]}-1))"
    	cfg_lib_dmlt_protocol_name="${cfg_lib_dmlt_protocol_name}$((${CardSUBADAPTER[$current_card]}-1))"
		fi
	fi

fi


Nt2String=""
cfg_lib_Nt2String=""
cfg_lib_Nt2TeiString=""
cfg_lib_StableL2=""
R2String=""
cfg_lib_R2Dialect=""
cfg_lib_L1TristateOrQsig=""
cfg_lib_R2CtryLength=""
cfg_lib_R2CasOptions=""
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${CardNT2[$current_card]})) -eq 1 ]
	then
		Nt2String="-n${index} $((${CardDIDLEN[$current_card]}))"
		cfg_lib_Nt2String="$((${CardDIDLEN[$current_card]}))"
	else
		if [ $((${PriProtNT2NO[${CardPROT[$current_card]}]})) -eq 1 ]
		then
			Nt2String=""
			cfg_lib_Nt2String=""
		else
			Nt2String="-n${index} 0"
			cfg_lib_Nt2String="0"
		fi
	fi
	if [ $((${PriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		if [ $((${CardNT2[$current_card]})) -eq 1 ]
		then
			Nt2String="-n${index} $((${CardDIDLEN[$current_card]}))"
			cfg_lib_Nt2String="$((${CardDIDLEN[$current_card]}))"
		fi
	fi
	if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		Nt2String="-n${index} $((${CardDIDLEN[$current_card]}))"
		cfg_lib_Nt2String="$((${CardDIDLEN[$current_card]}))"
		if [ $((${CardR2_CTRYLEN[$current_card]})) -gt 0 ]
		then
			R2String="-R2CtryLength${index} $((${CardR2_CTRYLEN[$current_card]}))"
			cfg_lib_R2CtryLength="$((${CardR2_CTRYLEN[$current_card]}))"
		else
			cfg_lib_R2CtryLength="0"
		fi
		if [ $((${PriProtR2Dialect[${CardPROT[$current_card]}]})) -gt 0 ]
		then
			R2String="${R2String} -R2Dialect${index} $((${PriProtR2Dialect[${CardPROT[$current_card]}]}))"
			cfg_lib_R2Dialect="$((${PriProtR2Dialect[${CardPROT[$current_card]}]}))"
			if [ $((${CardR2_NOCLI[$current_card]})) -gt 0 ]
			then
		  		R2String="${R2String} -R2CasOptions${index} 0x00001000"
		  		cfg_lib_R2CasOptions="$((0x00001000))"
			else
		  		cfg_lib_R2CasOptions="0"
			fi
		else
			cfg_lib_R2Dialect="0"
		 	cfg_lib_R2CasOptions="0"
		fi
		if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -gt 0 ]
		then
			if [ $((${CardR2_AUTOALERT[$current_card]})) -gt 0 ]
			then
			  	cfg_lib_R2CasOptions="$(($cfg_lib_R2CasOptions & 0xffff7fff))"  # 0 is ON
			else
			  	cfg_lib_R2CasOptions="$(($cfg_lib_R2CasOptions | 0x00008000))"
			fi
		fi
	fi
	if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		Nt2String="-n${index} $((${CardDIDLEN[$current_card]}))"
		cfg_lib_Nt2String="$((${CardDIDLEN[$current_card]}))"
	fi

else

	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		if [ $((${CardNT2[$current_card]})) -eq 1 ]
		then
			Nt2String="-n${index} $((${CardDIDLEN[$current_card]}))"
			cfg_lib_Nt2String="$((${CardDIDLEN[$current_card]}))"
			if [ $((${CardP2P[$current_card]})) -eq 1 ]
			then
				if [ $((${CardSTEI[$current_card]})) -eq 0 ]
				then
					Nt2String="$Nt2String -t${index} 0"
					cfg_lib_Nt2TeiString="0"
				else
					if [ $((${CardNTEI[$current_card]})) -eq 0 ]
					then
						Nt2String="$Nt2String -t${index} 0"
						cfg_lib_Nt2TeiString="0"
					fi
				fi
			fi
		else
			if [ $((${CardP2P[$current_card]})) -eq 1 ]
			then
				if [ $((${CardSTEI[$current_card]})) -eq 0 ]
				then
					Nt2String="-u${index}"
					cfg_lib_Nt2String="0"
					cfg_lib_Nt2TeiString="0"
					cfg_lib_StableL2="2"
				fi
				if [ $((${CardSTEI[$current_card]})) -eq 1 -a \
						 $((${CardNTEI[$current_card]})) -eq 0 ]
				then
					Nt2String="-u${index}"
					cfg_lib_Nt2String="0"
					cfg_lib_Nt2TeiString="0"
					cfg_lib_StableL2="2"
				fi
				if [ $((${CardSTEI[$current_card]})) -eq 1 -a \
						 $((${CardNTEI[$current_card]})) -ne 0 ]
				then
					Nt2String="-n${index} 0"
					cfg_lib_Nt2String="0"
					cfg_lib_Nt2TeiString=""
					cfg_lib_StableL2=""
				fi
			fi
			if [ $((${BriProtNT2NO[${CardPROT[$current_card]}]})) -eq 1 ]
			then
				Nt2String=""
				cfg_lib_Nt2String=""
				cfg_lib_Nt2TeiString=""
				cfg_lib_StableL2=""
			fi
		  if [ $((${BriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
			then
				if [ $((${CardNT2[$current_card]})) -eq 1 ]
				then
  	  		Nt2String="-n${index} $((${CardDIDLEN[$current_card]}))"
					cfg_lib_Nt2String="$((${CardDIDLEN[$current_card]}))"
					cfg_lib_Nt2TeiString=""
					cfg_lib_StableL2=""
  	  	fi
    	fi
		fi

# --------------------------------

	else

# --------------------------------
#  Analog board
# --------------------------------
		if [ $((${CardNT2[$current_card]})) -eq 1 ]
		then
			cfg_lib_Nt2String="1"
		else
			cfg_lib_Nt2String="0"
		fi

# --------------------------------
	fi

fi

TeiString=""
cfg_lib_TeiString=""
if [ $((${CardSTEI[$current_card]})) -eq 1 -a \
     $((${CardNTEI[$current_card]})) -ne 0 -a \
     $((${CardP2P[$current_card]})) -eq 1 ]
then
	TeiString="-t${index} $((${CardNTEI[$current_card]}))"
	cfg_lib_TeiString="$((${CardNTEI[$current_card]}))"
fi

SuppSrvFeatures=0
SuppSrvFeaturesStr=""

if [ $((${CardPRI[$current_card]})) -ne 0 ]
then
  if [ $((${PriProtETSI_SuppSrv[${CardPROT[$current_card]}]})) -eq 1 ]
  then
    if [ $((${Card_ETSI_MWI[$current_card]})) -eq 1 ]
    then
      SuppSrvFeatures=0x1
    fi
    if [ $((${Card_ECT[$current_card]})) -eq 1 ]
    then
      SuppSrvFeatures=$(($SuppSrvFeatures+0x2))
    fi
    if [ $((${Card_ECT[$current_card]})) -eq 2 ]
    then
      SuppSrvFeatures=$(($SuppSrvFeatures+0x4))
    fi
    if [ $((${Card_DEFLECTION[$current_card]})) -eq 1 ]
    then
      SuppSrvFeatures=$(($SuppSrvFeatures+0x10))
    fi
  fi

else

	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
  	if [ $((${BriProtETSI_SuppSrv[${CardPROT[$current_card]}]})) -eq 1 ]
  	then
    	if [ $((${Card_ETSI_MWI[$current_card]})) -eq 1 ]
    	then
      	SuppSrvFeatures=0x1
    	fi
    	if [ $((${Card_ECT[$current_card]})) -eq 1 ]
    	then
      	SuppSrvFeatures=$(($SuppSrvFeatures+0x2))
    	fi
    	if [ $((${Card_ECT[$current_card]})) -eq 2 ]
    	then
      	SuppSrvFeatures=$(($SuppSrvFeatures+0x4))
    	fi
	if [ $((${Card_DEFLECTION[$current_card]})) -eq 1 ]
	then
		SuppSrvFeatures=$(($SuppSrvFeatures+0x10))
	fi
    if [ $((${Card_LINKBALANCE[$current_card]})) -eq 1 ]
    then
      SuppSrvFeatures=$(($SuppSrvFeatures+0x40))
    fi
  	fi
# --------------------------------------
	else
# --------------------------------------
#   Analog Board
# --------------------------------------
		SuppSrvFeatures=0
# --------------------------------------
	fi

fi
if [ $((${Card_ADDMISSINGRDN[$current_card]})) -eq 1 ]
then
	SuppSrvFeatures=$(($SuppSrvFeatures+0x20))
fi

if [ $((SuppSrvFeatures)) -ne 0 ]
then
  SuppSrvFeaturesStr="-SuppSrvFeatures${index} $((SuppSrvFeatures))"
fi

#
# Always force QSIG to use TEI0
#
if [ $((${CardPRI[$current_card]})) -eq 0 ]
then
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
  	if [ $((${BriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
  	then
   	 TeiString="-t${index} 0"
   	 cfg_lib_TeiString="0"
  	fi
# --------------------------------------
	else
# --------------------------------------
#   Analog Board
# --------------------------------------

		cfg_lib_TeiString=""

# --------------------------------------
	fi
fi

if [ $((${CardPRI[$current_card]})) -eq 0 ]
then
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		if [ $((${BriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
		then
			TeiString=""
			cfg_lib_TeiString=""
  		Nt2String=""
			cfg_lib_Nt2TeiString=""
			cfg_lib_Nt2String=""
			cfg_lib_StableL2=""
		fi
# --------------------------------------
	fi
else
	if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
	then
		TeiString=""
		cfg_lib_TeiString=""
  	Nt2String=""
		cfg_lib_Nt2TeiString=""
		cfg_lib_Nt2String=""
		cfg_lib_StableL2=""
	fi
fi

TeNtString=""
if [ $((${CardNT[$current_card]})) -eq 1 ]
then
	TeNtString="-x${index}"
fi

BriLkString=""
cfg_lib_BriLinkCount=""
if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 -a \
		 $((${CardBRI_LK[$current_card]})) -gt 1 -a \
		 $((${CardNT[$current_card]})) -eq 0 ]
then
	if [ -z "${CardSPID1MSN[$current_card]}" ]
	then
		CardSPID1MSN[$current_card]="${CardSPID2MSN[$current_card]}"
		CardSPID2MSN[$current_card]=""
	fi
	if [ -z "${CardSPID2MSN[$current_card]}" -a \
			 -z "${CardSPID1MSN[$current_card]}" ]
	then
		CardBRI_LK[$current_card]=1
	fi

	if [ $((${CardBRI_LK[$current_card]})) -gt 1 ]
	then
		BriLkString="-BriLinkCount${index} $((${CardBRI_LK[$current_card]}))"
		cfg_lib_BriLinkCount="$((${CardBRI_LK[$current_card]}))"
	fi
fi

if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 -a \
		 $((${CardBRI_LK[$current_card]})) -lt 2 -a \
		 $((${CardNT[$current_card]})) -eq 0 ]
then
	BriLkString="-BriLinkCount${index} 1"
	cfg_lib_BriLinkCount="1"
fi

if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 -a \
		 $((${CardNT[$current_card]})) -ne 0 ]
then
	BriLkString=""
	cfg_lib_BriLinkCount="0"
fi

L1CrcString=""
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${CardCRC[$current_card]})) -ne 0 ]
	then
		L1CrcString="-e${index} $((${CardCRC[$current_card]}))"
	fi
fi

TxAttenuationString=""
cfg_lib_TxAttenuationString=""
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${PriProtCH[${CardPROT[$current_card]}]})) -lt 30 ]
	then
		if [ $((${Card_TX_ATTENUATION[$current_card]})) -ne 0 ]
		then
			TxAttenuationString="-TxAttenuation $((${Card_TX_ATTENUATION[$current_card]}))"
			cfg_lib_TxAttenuationString="$((${Card_TX_ATTENUATION[$current_card]}))"
		else
			cfg_lib_TxAttenuationString="0"
		fi
	fi
fi

VoiceCompandingString=""
if [ $((${CardLAW[$current_card]})) -ne 0 ]
then
	VoiceCompandingString="-m${index} $((${CardLAW[$current_card]}))"
fi

HiModeString=""
HiModeCmdString=""
if [ $((${MTPX_HI[Card_MADAPTER[$current_card]]})) -ne 0 ]
then
	HiModeString="-z${index}"
	HiModeCmdString="echo 1 > ${diva_proc}adapter$((current_card))/dynamic_l1_down"
else
	HiModeCmdString="echo 0 > ${diva_proc}adapter$((current_card))/dynamic_l1_down"
fi

FractionalLineString=""
if [ $((${CardFL[$current_card]})) -eq 1 ]
then
  if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -eq 0 ]
	then
		FractionalLineString="-Fractional${index} 1 -l${index} $((${CardFL_LEN[$current_card]}))"
	fi
fi

GroupOptimizationString=""
cfg_lib_GroupOptimizationString=""
if [ $((${GlobalCapiGO})) -eq 0 ]
then
	GroupOptimizationString="echo 0 > ${diva_proc}adapter$((current_card))/group_optimization"
	cfg_lib_GroupOptimizationString="0"
else
	GroupOptimizationString="echo 1 > ${diva_proc}adapter$((current_card))/group_optimization"
	cfg_lib_GroupOptimizationString="2"
fi

RbsRxToString=""
RbsGlareString=""
RbsBcString=""
RbsAnswToString=""
RbsTrunkString=""
RbsDialString=""
RbsOffice=""
RbsAs=""
RbsAniDni=""
cfg_lib_RbsAniDni_1=""
cfg_lib_RbsAniDni_2=""
cfg_lib_RbsAniDni_3=""
cfg_lib_RBS_BC=""
cfg_lib_RBS_RXTO=""
cfg_lib_RBS_DEBUG=""
cfg_lib_RBS_ANSWTO=""
cfg_lib_RBS_GLARE=""
cfg_lib_RBS_AS=""
cfg_lib_RBS_DIAL=""
cfg_lib_RBS_TRUNK=""
cfg_lib_RBS_OFFICE=""

if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		cfg_lib_RBS_DEBUG=$((${Card_CAS_DEBUG_LEVEL[$current_card]}))
		RbsRxToString="-RbsDigitTimeout${index} ${CardRBS_RXTO[$current_card]}"
		cfg_lib_RBS_RXTO="${CardRBS_RXTO[$current_card]}"

		RbsGlareString="-RbsGlareResolve${index} ${CardRBS_GLARE[$current_card]}"
		cfg_lib_RBS_GLARE="$((${CardRBS_GLARE[$current_card]}))"

		if [ $((${CardRBS_BC[$current_card]})) -eq 0 ]
		then
			RbsBcString="-RbsBearerCap${index} 4"
			cfg_lib_RBS_BC="4"
		else
			RbsBcString="-RbsBearerCap${index} 8"
			cfg_lib_RBS_BC="8"
		fi
		RbsAnswToString="-RbsAnswerDelay${index} $((${CardRBS_ANSWTO[$current_card]}))"
		cfg_lib_RBS_ANSWTO="$((${CardRBS_ANSWTO[$current_card]}))"

		RbsTrunkString="-RbsTrunkMode${index} $((${CardRBS_TRUNK[$current_card]}))"
		cfg_lib_RBS_TRUNK="$((${CardRBS_TRUNK[$current_card]}))"

		RbsDialString="-RbsDialType${index} $((${CardRBS_DIAL[$current_card]}))"
		cfg_lib_RBS_DIAL="$((${CardRBS_DIAL[$current_card]}))"

  	if [ $((${CardRBS_OFFICE[$current_card]})) -eq 1 ]
    then
      RbsOffice="-RbsOfficeType${index} 1"
			cfg_lib_RBS_OFFICE="1"
		else
			cfg_lib_RBS_OFFICE="0"
    fi
    if [ $((${CardNT[$current_card]})) -eq 0 ]
    then
			if [ $((${CardRBS_AS[$current_card]})) -eq 1 ]
			then
      	RbsAs="-RbsAnswSw${index} 1"
				cfg_lib_RBS_AS="0"
			else
				cfg_lib_RBS_AS="1"
			fi
    fi

		if [ $((${Card_ANIDNI_1_ON[$current_card]})) -ne 0 ]
		then
			RbsAniDni="$RbsAniDni -AniDniLimiterOne${index} ${Card_ANIDNI_1_TYPE[$current_card]}"
			cfg_lib_RbsAniDni_1="${Card_ANIDNI_1_TYPE[$current_card]}"
		fi
		if [ $((${Card_ANIDNI_2_ON[$current_card]})) -ne 0 ]
		then
			RbsAniDni="$RbsAniDni -AniDniLimiterTwo${index} ${Card_ANIDNI_2_TYPE[$current_card]}"
			cfg_lib_RbsAniDni_2="${Card_ANIDNI_2_TYPE[$current_card]}"
		fi
		if [ $((${Card_ANIDNI_3_ON[$current_card]})) -ne 0 ]
		then
			RbsAniDni="$RbsAniDni -AniDniLimiterThree${index} ${Card_ANIDNI_3_TYPE[$current_card]}"
			cfg_lib_RbsAniDni_3="${Card_ANIDNI_3_TYPE[$current_card]}"
		fi

	fi
fi

FaxOption=""
if [ $((${CardFAX_SPEED[$current_card]})) -ne 0 ]
then
	FaxOption="-FaxMaxSpeed${index} ${CardFAX_SPEED[$current_card]}"
fi

DebugString=""
if [ $((LoadInDebugMode)) -ne 0 ]
then
	if [ $((index)) -eq 0 ]
	then
		DebugString="-Debug"
	fi
fi

if [ $((${Card_DISABLE_4BRIFPGA[$current_card]})) -eq 1 ]
then
	if [ $((index)) -eq 0 ]
	then
		DebugString="$DebugString -Diva4BRIDisableFPGA"
	fi
fi

if [ $((${Card_DISABLE_PART68[$current_card]})) -eq 1 ]
then
	DebugString="$DebugString -Part68Lim${index} 2"
fi
cfg_lib_DisableDiscAfterProgress=""
if [ $((${Card_NODISCAFTERPROGRESS[$current_card]})) -ne 0 ]
then
	DebugString="$DebugString -DisableDiscAfterProgress${index}"
	cfg_lib_DisableDiscAfterProgress="1"
fi

cfg_qsig=0
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	cfg_qsig=$((${PriProtQSIG[${CardPROT[$current_card]}]}))
else
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		cfg_qsig=$((${BriProtQSIG[${CardPROT[$current_card]}]}))
# --------------------------------------
	fi
fi

LocalTonesString=""
cfg_lib_RingerTone=""
if [ $((${CardLTONE[$current_card]})) -ne 0 ]
then
  if [ $((${CardNT[$current_card]})) -eq 1 -o $((cfg_qsig)) -eq 1 -o $((${CardPRI[$current_card]})) -eq 1 -o $((${CardP2P[$current_card]})) -eq 1 ]
  then
	  LocalTonesString="-RingerTone${index} 1"
	  cfg_lib_RingerTone="1"
  fi
fi

QSIGString=""
QsigFeaturesTmp=0
cfg_lib_ChiFormat=""
cfg_lib_QsigChi=""
cfg_lib_QsigDialect=""

if [ $((cfg_qsig)) -eq 1 ]
then
	if [ $((${CardQSIG_DIALECT[$current_card]})) -ne 0 ]
	then
		QSIGString="-QsigDialect${index} $((${CardQSIG_DIALECT[$current_card]}))"
		cfg_lib_QsigDialect="$((${CardQSIG_DIALECT[$current_card]}))"
	else
		cfg_lib_QsigDialect="0"
	fi
	if [ $((${CardPRI[$current_card]})) -eq 0 -a \
			 $((${CardQSIG_CHI[$current_card]})) -ne 0 ]
	then
		QSIGString="$QSIGString -q${index} $((${CardQSIG_CHI[$current_card]}))"
		cfg_lib_QsigChi="$((${CardQSIG_CHI[$current_card]}))"
	fi
	if [ $((${CardPRI[$current_card]})) -eq 1 -a \
			 $((${CardQSIG_CHFMT[$current_card]})) -ne 0 ]
	then
		QSIGString="$QSIGString -ChiFormat${index} $((${CardQSIG_CHFMT[$current_card]}))"
		if [ $((${CardQSIG_CHFMT[$current_card]})) -ne 0 ]
		then
			cfg_lib_ChiFormat="$((${CardQSIG_CHFMT[$current_card]}))"
		fi
	fi


	if [ $((${CardQSIG_CHARGE_DISABLED[$current_card]})) -eq 1 ]
	then
		QsigFeaturesTmp=0xe000
	else
		if [ $((${CardQSIG_CHARGE_INSETUP[$current_card]})) -eq 1 ]
		then
			QsigFeaturesTmp=$(($QsigFeaturesTmp+0x1000))
		fi
		if [ $((${CardQSIG_CHARGE_NORATE[$current_card]})) -eq 1 ]
		then
			QsigFeaturesTmp=$(($QsigFeaturesTmp+0x2000))
		fi
		if [ $((${CardQSIG_CHARGE_NOINTERIM[$current_card]})) -eq 1 ]
		then
			QsigFeaturesTmp=$(($QsigFeaturesTmp+0x4000))
		fi
		if [ $((${CardQSIG_CHARGE_NOFINAL[$current_card]})) -eq 1 ]
		then
			QsigFeaturesTmp=$(($QsigFeaturesTmp+0x8000))
		fi
	fi
	if [ $((${CardQSIG_PR_INVITE[$current_card]})) -eq 1 ]
	then
		QsigFeaturesTmp=$(($QsigFeaturesTmp+0x0080))
	fi
	if [ $((${CardQSIG_NO_REROUTING[$current_card]})) -eq 1 ]
	then
		QsigFeaturesTmp=$(($QsigFeaturesTmp+0x0100))
	fi
	if [ $((${CardQSIG_TRANSPARENT_FAC[$current_card]})) -eq 1 ]
	then
		QsigFeaturesTmp=$(($QsigFeaturesTmp+0x0200))
	fi
	if [ $((${CardQSIG_TSC_CONN[$current_card]})) -eq 1 ]
	then
		QsigFeaturesTmp=$(($QsigFeaturesTmp+0x0400))
	fi
fi

# take last rdn affects qsig and etsi
if [ $((cfg_qsig)) -eq 1 ]
then
	if [ $((${CardQSIG_TAKELASTRDN[$current_card]})) -eq 1 ]
	then
		QsigFeaturesTmp=$(($QsigFeaturesTmp+0x0800))
	fi
fi

if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ "${PriProtPROT[${CardPROT[$current_card]}]}" == "ETSI" ]
	then
	  if [ $((${CardQSIG_TAKELASTRDN[$current_card]})) -eq 1 ]
	  then
		  QsigFeaturesTmp=$(($QsigFeaturesTmp+0x0800))
	  fi
	fi
else
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		if [ "${BriProtPROT[${CardPROT[$current_card]}]}" == "ETSI" ]
		then
		  if [ $((${CardQSIG_TAKELASTRDN[$current_card]})) -eq 1 ]
		  then
			  QsigFeaturesTmp=$(($QsigFeaturesTmp+0x0800))
		  fi
		fi
# --------------------------------------
	fi
fi

# assemble config string
cfg_lib_QsigFeatures="0"
if [ $((QsigFeaturesTmp)) -ne 0 ]
then
	QSIGString="$QSIGString -QsigFeatures${index} $((QsigFeaturesTmp))"
	cfg_lib_QsigFeatures="$((QsigFeaturesTmp))"
fi


L2String=""
USEKTSString=""
cfg_lib_UsEktsCachHandles=""
cfg_lib_UsEktsBeginConf=""
cfg_lib_UsEktsDropConf=""
cfg_lib_UsEktsCallTransfer=""
cfg_lib_UsEktsMWI=""
if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
  if [ $((${BriProtQSIG[${CardPROT[$current_card]}]})) -eq 0 ]
  then
		L2String="-s${index} $((${CardL2[$current_card]}))"
		if [ -z ${cfg_lib_StableL2} ]
		then
			cfg_lib_StableL2="$((${CardL2[$current_card]}))"
		fi
  fi

	if [ $((${BriProtNI[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		USEKTSString="-UsEktsCachHandles${index} ${CardUS_EKTS_N_CACH_HANDLES[$current_card]}"
		USEKTSString="$USEKTSString -UsEktsBeginConf${index} ${CardUS_EKTS_BEGIN_CONF[$current_card]}"
		USEKTSString="$USEKTSString -UsEktsDropConf${index} ${CardUS_EKTS_DROP_CONF[$current_card]}"
		USEKTSString="$USEKTSString -UsEktsCallTransfer${index} ${CardUS_EKTS_CALL_TRANSFER[$current_card]}"

		cfg_lib_UsEktsCachHandles="$((${CardUS_EKTS_N_CACH_HANDLES[$current_card]}))"
		cfg_lib_UsEktsBeginConf="$((${CardUS_EKTS_BEGIN_CONF[$current_card]}))"
		cfg_lib_UsEktsDropConf="$((${CardUS_EKTS_DROP_CONF[$current_card]}))"
		cfg_lib_UsEktsCallTransfer="$((${CardUS_EKTS_CALL_TRANSFER[$current_card]}))"
	fi

	if [ $((${CardUS_EKTS_MWI[$current_card]})) -ne 0 ]
	then
		USEKTSString="$USEKTSString -UsEktsMWI${index} ${CardUS_EKTS_MWI[$current_card]}"
		cfg_lib_UsEktsMWI="$((${CardUS_EKTS_MWI[$current_card]}))"
	fi
fi

SpidString=""
cfg_lib_UsForceVoiceAlert=""
cfg_lib_UsDisableAutoSPID=""
cfg_lib_SPID0=""
cfg_lib_SPID1=""
cfg_lib_OAD0=""
cfg_lib_OAD1=""

if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
	spid1=$((${CardSUBADAPTER[$current_card]}+${CardSUBADAPTER[$current_card]}))
	spid2=$(($spid1))
	spid1=$(($spid2-1))


	if [ ! -z ${CardSPID1[$current_card]} ]
	then
		SpidString="-$((spid1))spid ${CardSPID1[$current_card]}"
		cfg_lib_SPID0="${CardSPID1[$current_card]}"
	fi
	if [ ! -z "${CardSPID1MSN[$current_card]}" ]
	then
		SpidString="$SpidString -$((spid1))oad ${CardSPID1MSN[$current_card]}"
		cfg_lib_OAD0="${CardSPID1MSN[$current_card]}"
	fi
	if [ ! -z ${CardSPID2[$current_card]} ]
	then
		SpidString="$SpidString -$((spid2))spid ${CardSPID2[$current_card]}"
		cfg_lib_SPID1="${CardSPID2[$current_card]}"
	fi
	if [ ! -z "${CardSPID2MSN[$current_card]}" ]
	then
		SpidString="$SpidString -$((spid2))oad ${CardSPID2MSN[$current_card]}"
		cfg_lib_OAD1="${CardSPID2MSN[$current_card]}"
	fi
	if [ $((${CardAUTO_SPID_DISABLE[$current_card]})) -eq 1 ]
	then
		SpidString="$SpidString -UsDisableAutoSPID${index}"
		cfg_lib_UsDisableAutoSPID="1"
  else
		cfg_lib_UsDisableAutoSPID="0"
	fi
	if [ $((${CardALWAYS_RING_VOICE[$current_card]})) -eq 1 ]
	then
		SpidString="$SpidString -UsForceVoiceAlert${index}"
		cfg_lib_UsForceVoiceAlert="1"
  else
		cfg_lib_UsForceVoiceAlert="0"
	fi

	if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 0 ]
	then
		if [ $((${CardBRI_LK[$current_card]})) -lt 2 -o $((${CardNT[$current_card]})) -ne 0 ]
		then
			cfg_lib_OAD0=""
			cfg_lib_OAD1=""
		fi
	fi
fi

FaxOptions=$((${CardFAX_FINE[$current_card]}+${CardFAX_ECM[$current_card]}+${CardFAX_E64B[$current_card]}+${CardFAX_C2D[$current_card]}+${CardFAX_CT6[$current_card]}+${CardFAX_DUC[$current_card]}+${CardFAX_NPL[$current_card]}+${CardFAX_HTL[$current_card]}+${CardFAX_HHL[$current_card]}+${CardFAX_HPI[$current_card]}+${CardFAX_DFB[$current_card]}))

CardLOAD[$current_card]="$ProtocolString $L2String $Nt2String $TeiString $TeNtString $L1CrcString $VoiceCompandingString $HiModeString $FractionalLineString $LocalTonesString $RbsRxToString $RbsGlareString $RbsBcString $RbsAnswToString $RbsTrunkString $RbsDialString $FaxOption $SpidString $USEKTSString $QSIGString $DebugString $RbsOffice $RbsAs $BriLkString $R2String $RbsAniDni $SuppSrvFeaturesStr $TxAttenuationString"

if [ $((FaxOptions)) -ne $((0)) ]
then
CardLOAD[$current_card]="${CardLOAD[$current_card]} -FaxOptions${index} $((FaxOptions))"
fi

cfg_lib_dsp_image="${Card_DSP_IMAGE[$current_card]}"

if [ $((${Card2M[$current_card]})) -ne 0 ]
then # {

	case $((${CardBRI_REV[$current_card]})) in
		1)
	CardLOAD[$current_card]="${CardLOAD[$current_card]} -vd6"
	cfg_lib_protocol_name="${cfg_lib_protocol_name}"
	cfg_lib_dmlt_protocol_name="${cfg_lib_dmlt_protocol_name}"
    cfg_lib_dsp_image="${Card_DSP_FAX_IMAGE[$current_card]}"
			;;
		2)
	CardLOAD[$current_card]="${CardLOAD[$current_card]} -vb6"
	cfg_lib_protocol_name="${cfg_lib_protocol_name}"
	cfg_lib_dmlt_protocol_name="${cfg_lib_dmlt_protocol_name}"
    cfg_lib_dsp_image="${Card_DSP_MDM_IMAGE[$current_card]}"
			;;
		*)
				cfg_lib_protocol_name="${cfg_lib_protocol_name}.4"
				cfg_lib_dmlt_protocol_name="${cfg_lib_dmlt_protocol_name}.4"
			;;
	esac

fi # }

if [ $((GlobalPiafsRTF)) -ne 0 ]
then
CardLOAD[$current_card]="${CardLOAD[$current_card]} -PiafsRtfOff${index} $((GlobalPiafsRTF))"
fi

CardCMD1[$current_card]="$GroupOptimizationString"
CardCMD2[$current_card]="$HiModeCmdString"

cfg_lib_dmlt_protocol=0

echo    '    <tlie>' >> ${diva_xml}
echo    '     <vie id="imagetype">1</vie>' >> ${diva_xml}
echo -e '     <vie id="imagename"><as>'"\c" >> ${diva_xml}

if [ -f "${diva_dir}${cfg_lib_dmlt_protocol_name}" ]
then
	cfg_lib_dmlt_protocol=1
	echo -e "${diva_dir}${cfg_lib_dmlt_protocol_name}""\c" >> ${diva_xml}
else
  if [ -f "${diva_dir}${cfg_lib_protocol_name}" ]
	then
		echo -e "${diva_dir}${cfg_lib_protocol_name}""\c" >> ${diva_xml}
	else
		echo -e "missing:${diva_dir}${cfg_lib_protocol_name}""\c" >> ${diva_xml}
	fi
fi
echo '</as></vie>' >> ${diva_xml}
echo '    </tlie>' >> ${diva_xml}
echo "" >> ${diva_xml}

if [ $((${Card_SINGLE_IMAGE[$current_card]})) -ne 0 ]
then
	diva_write_named_var "ProtocolImageVersion" 1 1 0
fi

diva_write_named_var "adaptertype" $((${Card_TYPE[$current_card]})) 1 0
diva_write_named_var "bustype" $((${Card_BUS[$current_card]})) 1 0
diva_write_named_var "cardtype" $((${Card_HARDWARE[$current_card]})) 1 0

if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
	if [ $((${CardPRI[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		cfg_lib_ProtVersion=$((${Bri_PROT_VALUE[${CardPROT[$current_card]}]}+0x80))
	else
# --------------------------------------
#   PRI Board
# --------------------------------------
		cfg_lib_ProtVersion=$((${Pri_PROT_VALUE[${CardPROT[$current_card]}]}+0x80))
	fi
	diva_write_ram_byte $((ProtVersion_RamOffset)) $((cfg_lib_ProtVersion)) "" "Protocol Version"
# --------------------------------------
else
# --------------------------------------
#   Analog Board
# --------------------------------------
	diva_write_ram_byte $((ProtVersion_RamOffset)) $((0x80|34)) "" "Protocol Version"

	man_str="/"
	i_tmp=1
	while [ $((i_tmp)) -le $((${Card_ANALOG[$current_card]})) ]
	do
		j_tmp=$((128 + i_tmp + $current_card * 8))
		if [ $((${CardPROT[$j_tmp]})) -ne $((-1)) ]
		then
		  v_tmp=${Analog_PROT_MAN_PATH[${CardPROT[$j_tmp]}]}
		else
		  v_tmp=${Analog_PROT_MAN_PATH[${CardPROT[$current_card]}]}
		fi
		man_str_len=$((${#v_tmp}+15))
		man_str="${man_str}"$(printf "%02x" $((man_str_len)))"EConfig\Line-$((i_tmp))\\"${v_tmp}
		i_tmp=$(($i_tmp+1))
	done

	diva_write_pcinit $((PCINIT_SET_LINE_TYPE)) $((${Analog_PROT_VALUE[${CardPROT[$current_card]}]})) 1 1 "$man_str" "Line Type"

# --------------------------------------
fi

if [ ! -z "${TeNtString}" ]
then
	cfg_lib_StableL2="10"
fi

if [ ! -z "${cfg_lib_ChiFormat}" -a $((cfg_lib_ChiFormat)) -gt $((0)) ]
then
	cfg_lib_StableL2=$((cfg_lib_StableL2))
	cfg_lib_StableL2=$((${cfg_lib_StableL2}|0x10))
fi

if [ -z "${cfg_lib_StableL2}" -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
	cfg_lib_StableL2="2"
fi

if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
	diva_write_ram_byte $((StableL2_RamOffset)) $((cfg_lib_StableL2)) "" "StableL2"
fi

if [ ! -z "${HiModeString}" ]
then
	cfg_lib_L1TristateOrQsig=$((cfg_lib_L1TristateOrQsig))
	cfg_lib_L1TristateOrQsig=$((${cfg_lib_L1TristateOrQsig}|4))
fi
if [ ! -z "${cfg_lib_Monitor}" ]
then
	cfg_lib_L1TristateOrQsig=$((cfg_lib_L1TristateOrQsig))
	cfg_lib_L1TristateOrQsig=$((${cfg_lib_L1TristateOrQsig}|8))
fi

if [ ! -z "${cfg_lib_QsigChi}" ]
then
	cfg_lib_L1TristateOrQsig=$((cfg_lib_L1TristateOrQsig))
	cfg_lib_L1TristateOrQsig=$(($cfg_lib_L1TristateOrQsig|$cfg_lib_QsigChi))
fi

if [ ! -z ${cfg_lib_L1TristateOrQsig} ]
then
	diva_write_ram_byte $((L1TristateOrQsig_RamOffset)) $((cfg_lib_L1TristateOrQsig)) "" "L1TristateOrQsig"
fi

if [ $((${CardLAW[$current_card]})) -ne 0 ]
then
	diva_write_ram_byte $((ForceLaw_RamOffset)) $((${CardLAW[$current_card]})) "" "ForceLaw"
fi

if [ ! -z "${FractionalLineString}" ]
then
	diva_write_ram_byte $((LowChannel_RamOffset)) $((${CardFL_LEN[$current_card]})) "" "LowChannel"
	diva_write_ram_byte $((NoHscx30_RamOffset)) $((1)) "" "NoHscx30"
fi

if [ ! -z "${L1CrcString}" ]
then
	diva_write_ram_byte $((crc4_RamOffset)) $((${CardCRC[$current_card]})) "" "crc4"
fi

if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
	# --------------------------------------
	#   Other Board
	# --------------------------------------
	if [ ! -z "${cfg_lib_Nt2String}" ]
	then
		diva_write_ram_byte $((nt2_RamOffset)) 1 "Config\NT-2" "NT2"
		diva_write_ram_byte $((DidLen_RamOffset)) $((cfg_lib_Nt2String)) "Config\DID-Length" "DIDLength"
	else
		diva_write_ram_byte $((nt2_RamOffset)) 0 "Config\NT-2" "NT2"
		diva_write_ram_byte $((DidLen_RamOffset)) 0 "Config\DID-Length" "DID Length"
	fi
	# --------------------------------------

else
	# --------------------------------------
	#   Analog Board
	# --------------------------------------
	diva_write_pcinit $((PCINIT_CALLERIDDETECT)) $((cfg_lib_Nt2String)) 1 1 "Config\POTS\CallerIDdetect" "CID detection"
	diva_write_pcinit $((PCINIT_DTMFCOLLECTLEN)) $((${Card_DTMF_COLLECT[$current_card]})) 1 1 "Config\POTS\DTMFCollectLen" "DTMF Collect Len"

	if [ $((cfg_lib_Nt2String)) -ne 0 -o $((${Card_DTMF_COLLECT[$current_card]})) -ne 0 ]
	then
	  diva_write_pcinit $((PCINIT_DID_LENGTH)) 200 1 1 "Config\DID-Length" "CID Length"
	else
	  diva_write_pcinit $((PCINIT_DID_LENGTH)) 0 1 1 "Config\DID-Length" "CID Length"
	fi

	# --------------------------------------
fi

if [ $((${Card_SYNC_CAPABLE[$current_card]})) -eq 1 -a $((${CardSUBADAPTER[$current_card]})) -eq 1 ]
then
	diva_write_pcinit $((PCINIT_L1_SYNC_OP_MODE)) $((${Card_SYNC_MODE[$current_card]})) 1 1 "Config\Layer1\L1SyncOpMode" "L1SyncOpMode"
	diva_write_pcinit $((PCINIT_L1_SYNC_PORT_NO)) $((${Card_SYNC_PORT[$current_card]})) 1 1 "Config\Layer1\L1SyncPortNo" "L1SyncPortNo"
fi

diva_write_named_string_var "Config\DID-Special-Number" "$(diva_ascii_str_to_bs ${CardSPECIAL[$current_card]})" "Config\DID-Special-Number" "DID-Special-Number"
diva_write_named_var "Config\DID-Collect-Timeout" $((${CardDidTimeout[$current_card]})) 1 1 "Config\DID-Collect-Timeout" "DID-Collect-Timeout"

if [ ! -z "${cfg_lib_TeiString}" ]
then
	cfg_lib_TeiString=$((${cfg_lib_TeiString}*2))
	cfg_lib_TeiString=$((${cfg_lib_TeiString}+1))
else
	if [ ! -z "${Nt2String}" -a ! -z "${cfg_lib_Nt2TeiString}" ]
	then
		cfg_lib_TeiString=$((${cfg_lib_Nt2TeiString}*2))
		cfg_lib_TeiString=$((${cfg_lib_Nt2TeiString}+1))
	else
		cfg_lib_TeiString=0
	fi
fi

if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
	if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
	then
		diva_write_ram_byte $((tei_RamOffset)) $((cfg_lib_TeiString)) "" "TEI"
	else
		diva_write_ram_byte $((tei_RamOffset)) "1" "" "TEI"
	fi
fi
diva_write_ram_byte $((WatchDog_RamOffset)) 0 "" "WDog"

diva_write_pcinit $((PCINIT_CARD_MODE)) $((${Card_ResourceBoard[$current_card]})) 1 1 "" "Clear channel"

# SPID and MSN settings
if [ $((${CardPRI[$current_card]})) -eq 0 -a $((${Card_ANALOG[$current_card]})) -eq 0 ]
then #{
  diva_write_ram_str $((Oad0_RamOffset))   "${cfg_lib_OAD0}"  "Config\\SPID-1\\Number" "MSN0"
  diva_write_ram_str $((Oad1_RamOffset))   "${cfg_lib_OAD1}"  "Config\\SPID-2\\Number" "MSN1"
  if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 1 ]
  then
    diva_write_ram_str $((Spid0_RamOffset))  "${cfg_lib_SPID0}" "Config\\SPID-1\\SPID"   "Spid0"
		diva_write_ram_str $((Spid1_RamOffset))  "${cfg_lib_SPID1}" "Config\\SPID-2\\SPID"   "Spid1"
  else
    diva_write_ram_str $((Spid0_RamOffset))  "" "Config\\SPID-1\\SPID"   "Spid0"
    diva_write_ram_str $((Spid1_RamOffset))  "" "Config\\SPID-2\\SPID"   "Spid1"
  fi
fi #}

# NAMED VARS SECTION
if [ $((divas_pci_e_adapter_present)) -ne $((0)) -o $((StartDivaSoftIP)) -ne $((0)) -o $((SysLIFixPCIBus)) -ne $((0)) ]
then
	diva_write_pcinit $((PCINIT_XCONNECT_EXPORT)) 1 1 0 "Config\Layer1\LI Via Host Mem." "PCI2PRIOverride"
fi
cfg_lib_QsigFeatures2=0

# panasonic qsig rerouting workaround
if [ $((${CardQSIG_REROUTING[$current_card]})) -ne 0 ]
then
  cfg_lib_QsigFeatures2=$(($cfg_lib_QsigFeatures2+0x1))
fi

if [ $((${CardPRI[$current_card]})) -ne 0 -a $((${PriProtQSIG[${CardPROT[$current_card]}]})) -ne 0 ]
then
	diva_write_named_var "Config\Qsig\CTrerouteing" $((${CardQSIG_REROUTING[$current_card]})) 1 1 "Config\Qsig\CTrerouteing" "QSIG Call Transfer Mode"
	diva_write_named_var "Config\Qsig\Qsigfeatures2" $((${cfg_lib_QsigFeatures2})) 1 1 "Config\Qsig\Qsigfeatures2" "QSIG Features 2"
fi


# PCINIT SECTION
if [ $((${CardFAX_SPEED[$current_card]})) -gt $((0)) -a $((${CardFAX_SPEED[$current_card]})) -le $((14400)) ]
then
	FaxOptions=$(($FaxOptions+0x1000))
fi

diva_write_pcinit $((PCINIT_FAX_OPTIONS)) $((FaxOptions)) 2 1 "Config\FAX\Options" "Fax Options"
diva_write_pcinit $((PCINIT_FAX_MAX_SPEED)) $((${CardFAX_SPEED[$current_card]})) 2 1 "Config\FAX\Max Speed" "Max fax Speed"
diva_write_pcinit $((PCINIT_FAX_MIN_SPEED)) $((${CardMIN_FAX_SPEED[$current_card]})) 2 1 "Config\FAX\Min Speed" "Min fax Speed"
diva_write_pcinit $((PCINIT_FAX_MAX_OVERHEAD)) $((${Card_FAX_MAX_OVERHEAD[$current_card]})) 2 1 "Config\FAX\Max Overhead sec." "Max fax session overhead sec"

if [ $((StartHMPMode)) -ne $((0)) ]
then
	if [ $((${Card_HSI_CLOCK[$((current_card))]})) -ne 0 ]
	then
		diva_write_pcinit $((PCINIT_PART68_LIMITER)) 2 1 1 "Config\Layer1\Part68 Level Lim" "Part 68 Limiter"
	else
		diva_write_pcinit $((PCINIT_PART68_LIMITER)) $((${Card_DISABLE_PART68[$current_card]})) 1 1 "Config\Layer1\Part68 Level Lim" "Part 68 Limiter"
	fi
else
	diva_write_pcinit $((PCINIT_PART68_LIMITER)) $((${Card_DISABLE_PART68[$current_card]})) 1 1 "Config\Layer1\Part68 Level Lim" "Part 68 Limiter"
fi


if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
	# --------------------------------------
	#   Other Board
	# --------------------------------------

	if [ ! -z "${cfg_lib_QsigDialect}" ]
	then
		diva_write_pcinit $((PCINIT_QSIG_DIALECT)) $((cfg_lib_QsigDialect)) 1 1 "Config\Qsig\QSIGDialect" "QSIG Dialect"
	fi

	if [ ! -z "${cfg_lib_UsEktsCachHandles}" ]
	then
		diva_write_pcinit $((PCINIT_US_EKTS_CACH_HANDLES)) $((cfg_lib_UsEktsCachHandles)) 1 1 "Config\US-EKTS\CACH Appearances" "CACH Appearances"
	fi

	if [ ! -z "${cfg_lib_UsEktsBeginConf}" ]
	then
		diva_write_pcinit $((PCINIT_US_EKTS_BEGIN_CONF)) $(($cfg_lib_UsEktsBeginConf|0x80)) 1 0 "Config\US-EKTS\Key BeginConf" "Key Begin Conf"
	fi

	if [ ! -z "${cfg_lib_UsEktsDropConf}" ]
	then
		diva_write_pcinit $((PCINIT_US_EKTS_DROP_CONF)) $(($cfg_lib_UsEktsDropConf|0x80)) 1 0 "Config\US-EKTS\Key DropConf" "Key Drop Conf"
	fi

	if [ ! -z "${cfg_lib_UsEktsCallTransfer}" ]
	then
		diva_write_pcinit $((PCINIT_US_EKTS_CALL_TRANSFER)) $(($cfg_lib_UsEktsCallTransfer|0x80)) 1 0 "Config\US-EKTS\Key CallTransfer" "Key Call Transfer"
	fi

	if [ ! -z "${cfg_lib_UsEktsMWI}" ]
	then
		diva_write_pcinit $((PCINIT_US_EKTS_MWI)) $(($cfg_lib_UsEktsMWI|0x80)) 1 0 "" "US EKTS MWI"
	fi

	if [ ! -z "${cfg_lib_UsForceVoiceAlert}" ]
	then
		diva_write_pcinit $((PCINIT_FORCE_VOICE_MAIL_ALERT)) $((cfg_lib_UsForceVoiceAlert)) 1 1 "Config\US-EKTS\Force-Alert" "US EKTS Force Alert"
	fi

	if [ ! -z "${cfg_lib_UsDisableAutoSPID}" ]
	then
		diva_write_pcinit $((PCINIT_DISABLE_AUTOSPID_FLAG)) $((cfg_lib_UsDisableAutoSPID)) 1 1 "Config\US-EKTS\Disable AutoSPID" "US EKTS Disable Auto SPID"
	fi

	if [ ! -z "${cfg_lib_RingerTone}" ]
	then
		diva_write_pcinit $((PCINIT_RINGERTONE_OPTION)) 1 1 0 "" "Generate local tones"
	fi

	diva_write_pcinit $((PCINIT_PIAFS_TURNAROUND_FRAMES)) $((GlobalPiafsRTF)) 1 0 "" "PIAFS Link Turnaround, frames"

	diva_write_pcinit $((PCINIT_QSIG_FEATURES)) $((cfg_lib_QsigFeatures)) 2 0 "" "QSIG Features"

	if [ ! -z "${cfg_lib_nosig}" ]
	then
		diva_write_pcinit $((PCINIT_NO_SIGNALLING)) $((cfg_lib_nosig)) 1 0 "" "No Signaling"
	fi

	if [ ! -z "${cfg_lib_BriLinkCount}" ]
	then
		diva_write_pcinit $((PCINIT_L2_COUNT)) $((cfg_lib_BriLinkCount)) 1 1 "" "Bri Link Count"
	fi

	diva_write_pcinit $((PCINIT_SUPPL_SERVICE_FEATURES)) $((SuppSrvFeatures)) 4 0 "" "Supplementary Service Features"

	if [ ! -z "${cfg_lib_R2Dialect}" ]
	then
		diva_write_pcinit $((PCINIT_R2_DIALECT)) $((cfg_lib_R2Dialect)) 4 1 "Config\Robbed Bit\R2dialect" "R2 Dialect"
	fi

	if [ ! -z "${cfg_lib_R2CtryLength}" ]
	then
		diva_write_pcinit $((PCINIT_R2_CTRYLENGTH)) $((cfg_lib_R2CtryLength)) 1 1 "Config\Robbed Bit\Country Length" "R2 Country Length"
	fi

	if [ ! -z "${cfg_lib_R2CasOptions}" ]
	then
		diva_write_pcinit $((PCINIT_R2_CASOPTIONS)) $((cfg_lib_R2CasOptions)) 4 1 "Config\Robbed Bit\CASOptions" "CAS Options"
	fi

	diva_write_pcinit $((PCINIT_DISCAFTERPROGRESS)) $((cfg_lib_DisableDiscAfterProgress)) 1 0 "" "Disable Disc after Progress"

	if [ ! -z "${cfg_lib_RbsAniDni_2}" ]
	then
		if [ -z "${cfg_lib_RbsAniDni_1}" ]
		then
			cfg_lib_RbsAniDni_1=0
		fi

		if [ -z "${cfg_lib_RbsAniDni_3}" ]
		then
			cfg_lib_RbsAniDni_3=0
		else
			cfg_lib_RbsAniDni_3=$(($cfg_lib_RbsAniDni_3<<16))
		fi

		cfg_lib_RbsAniDni_2=$(($cfg_lib_RbsAniDni_2<<8))

		v_tmp=$((cfg_lib_RbsAniDni_1))
		v_tmp=$(($v_tmp+$cfg_lib_RbsAniDni_2))
		v_tmp=$(($v_tmp+$cfg_lib_RbsAniDni_3))

		diva_write_pcinit $((PCINIT_ANIDNILIMITER)) $((v_tmp)) 3 0 "" "ANI DNI"
	fi

	if [ ! -z "${cfg_lib_TxAttenuationString}" ]
	then
		diva_write_pcinit $((PCINIT_TXATTENUATION)) $((${Card_TX_ATTENUATION[$current_card]})) 1 1 "Config\Layer1\TxAttenuation" "Tx Attenuation"
	fi

	if [ ! -z "${cfg_lib_RBS_RXTO}" ]
	then
		diva_write_pcinit $((PCINIT_CAS_RXDIGITTIMEOUT)) $((cfg_lib_RBS_RXTO)) 1 1 "Config\Robbed Bit\Digittimeout" "CAS Rx Digit Timeout"
	fi

	if [ ! -z "${cfg_lib_RBS_GLARE}" ]
	then
		diva_write_pcinit $((PCINIT_CAS_GLARERESOLUTION)) $((cfg_lib_RBS_GLARE)) 1 1 "" "CAS Clare Resolution"
	fi

	if [ ! -z "${cfg_lib_RBS_BC}" ]
	then
		diva_write_pcinit $((PCINIT_CAS_BC)) $((cfg_lib_RBS_BC)) 1 1 "Config\Robbed Bit\Bearer Cap" "CAS BC"
	fi

	if [ ! -z "${cfg_lib_RBS_ANSWTO}" ]
	then
		diva_write_pcinit $((PCINIT_CAS_ANSWERDELAY)) $((cfg_lib_RBS_ANSWTO)) 1 1 "Config\Robbed Bit\Answerdelay" "CAS Answer Delay"
	fi

	if [ ! -z "${cfg_lib_RBS_TRUNK}" ]
	then
		case $((cfg_lib_RBS_TRUNK)) in
			1) if [ $((cfg_lib_RBS_OFFICE)) -eq 0 ]
				 then
					diva_write_pcinit $((PCINIT_CAS_TRUNCTYPE)) 1 1 0 "" "CAS Trunk Type"
				 else
					diva_write_pcinit $((PCINIT_CAS_TRUNCTYPE)) 3 1 0 "" "CAS Trunk Type"
				 fi
				;;
			2) if [ $((cfg_lib_RBS_OFFICE)) -eq 0 ]
				 then
					diva_write_pcinit $((PCINIT_CAS_TRUNCTYPE)) 2 1 0 "" "CAS Trunk Type"
				 else
					diva_write_pcinit $((PCINIT_CAS_TRUNCTYPE)) 4 1 0 "" "CAS Trunk Type"
				 fi
				;;
			*) diva_write_pcinit $((PCINIT_CAS_TRUNCTYPE)) 0 1 1 "" "CAS Trunk Type"
				;;
		esac
	fi

	if [ ! -z "${cfg_lib_RBS_AS}" ]
	then
		diva_write_pcinit $((PCINIT_CAS_ANSWERSUPERVISION)) $((cfg_lib_RBS_AS)) 1 1 "" "CAS Answer Supervision"
	fi

	if [ ! -z "${cfg_lib_RBS_DIAL}" ]
	then
		case $((cfg_lib_RBS_DIAL)) in
			0) diva_write_pcinit $((PCINIT_CAS_DIALTYPE)) 1 1 0 "" "CAS Dial Type"
				;;
			2) diva_write_pcinit $((PCINIT_CAS_DIALTYPE)) 2 1 0 "" "CAS Dial Type"
				;;
			*) diva_write_pcinit $((PCINIT_CAS_DIALTYPE)) 0 1 1 "" "CAS Dial Type"
				;;
		esac
	fi

	if [ $((${CardPRI[$current_card]})) -ne 0 ]
	then
		if [ ! -z "${cfg_lib_RBS_DEBUG}" ]
		then
			diva_write_pcinit $((PCINIT_CAS_DEBUG)) $((cfg_lib_RBS_DEBUG)) 4 1 "Config\Robbed Bit\Debug" "CAS Debug"
		fi
	fi

	# --------------------------------------

else

	# --------------------------------------
	#   Analog Board Global Parameters
	# --------------------------------------
	cfg_lib_RBS_DEBUG=$((${Card_CAS_DEBUG_LEVEL[$current_card]}))
	diva_write_pcinit $((PCINIT_CAS_DEBUG)) $((cfg_lib_RBS_DEBUG)) 4 1 "Config\POTS\Debug" "CAS Debug"

	diva_write_pcinit $((PCINIT_CAS_ANSWERDELAY)) $((${CardRBS_ANSWTO[$current_card]})) 1 1 "Config\POTS\Answerdelay" "Trunk Answer Delay"
	diva_write_pcinit $((PCINIT_CAS_DIALTYPE)) $((${CardRBS_DIAL[$current_card]})) 1 1 "Config\POTS\Dialtype" "Dial Type"
	diva_write_pcinit $((PCINIT_CAS_BC)) $((${CardRBS_BC[$current_card]})) 1 1 "Config\POTS\Bearer Cap" "BC"

	diva_write_pcinit $((PCINIT_POTS_DIRECTION)) $((${Card_POTS_DIRECTION[$current_card]})) 1 1 "Config\POTS\CallDirection" "Call direction"
	diva_write_pcinit $((PCINIT_POTS_CALIBRATIONMODE)) $((${Card_POTS_CALIBRATION[$current_card]})) 1 1 "Config\POTS\CalibrationMode" "Calibration mode"

	diva_write_pcinit $((PCINIT_FLASHLENGTH)) $((${Card_POTS_FLASHLEN[$current_card]})) 2 1 "Config\POTS\FlashLength" "Flash Length"
	diva_write_pcinit $((PCINIT_RINGSTILANSWER)) $((${Card_RINGSTILANSWER[$current_card]})) 1 1 "Config\POTS\RingsUntilAnswer" "Rings until answer"

	v_tmp=$(diva_str_to_bs ${Card_POTS_CONSULT[$current_card]})
	diva_write_pcinit_str $((PCINIT_POTS_CONSULT)) "<bs>${v_tmp}</bs>" 10 1 "Config\POTS\Consult" "Consultation call invocation"

	v_tmp=$(diva_str_to_bs ${Card_POTS_SWAPHOLD[$current_card]})
	diva_write_pcinit_str $((PCINIT_POTS_SWAPHOLD)) "<bs>${v_tmp}</bs>" 10 1 "Config\POTS\SwapHold" "Swap Hold"

	v_tmp=$(diva_str_to_bs ${Card_POTS_DISCACTIVCALL[$current_card]})
	diva_write_pcinit_str $((PCINIT_POTS_DISCACTIVCALL)) "<bs>${v_tmp}</bs>" 10 1 "Config\POTS\DiscActivcall" "Disconnect Active Call"

	v_tmp=$(diva_str_to_bs ${Card_POTS_DISCPASSIVCALL[$current_card]})
	diva_write_pcinit_str $((PCINIT_POTS_DISCPASSIVCALL)) "<bs>${v_tmp}</bs>" 10 1 "Config\POTS\DiscPassivcall" "Disconnect Passive Call"

	v_tmp=$(diva_str_to_bs ${Card_POTS_TRANSFER[$current_card]})
	diva_write_pcinit_str $((PCINIT_POTS_TRANSFER)) "<bs>${v_tmp}</bs>" 10 1 "Config\POTS\Transfer" "Call transfer invocation"

	case $((${Card_POTS_RETRIEVE_MODE[$current_card]})) in
		0)	diva_write_pcinit $((PCINIT_POTS_CALLBACKAFTERRETRIEVE)) $((0)) 1 1 "Config\POTS\Resumecallback" "Callback after retrieve"
			;;
		1)	diva_write_pcinit $((PCINIT_POTS_CALLBACKAFTERRETRIEVE)) $((1)) 1 1 "Config\POTS\Resumecallback" "Callback after retrieve"
				diva_write_pcinit $((PCINIT_POTS_RETRIEVEHOOKOFFTIMER)) $((0)) 1 1 "Config\POTS\RetrieveHookoffTimer" "Retrieve hook off timer"
				diva_write_pcinit $((PCINIT_POTS_CALLBACKTIMER)) $((${Card_POTS_CALLBACKTIMER[$current_card]})) 1 1 "Config\POTS\CallbackTimer" "Callback timer after retrieve"
			;;
		2)	diva_write_pcinit $((PCINIT_POTS_CALLBACKAFTERRETRIEVE)) $((1)) 1 1 "Config\POTS\Resumecallback" "Callback after retrieve"
				diva_write_pcinit $((PCINIT_POTS_RETRIEVEHOOKOFFTIMER)) $((${Card_POTS_RETRIEVEHOOKOFFTIMER[$current_card]})) 1 1 "Config\POTS\RetrieveHookoffTimer" "Retrieve hook off timer"
			;;
		*)
			;;
	esac



	v_tmp="${CardDIAL_PAUSE_CHAR[$current_card]}"
	v_tmp="${v_tmp}${CardDIAL_DONTWAITTONE_CHAR[$current_card]}"
	v_tmp="${v_tmp}${CardDIAL_WAITTONE_CHAR[$current_card]}"
	v_tmp="${v_tmp}${CardDIAL_FLASH_CHAR[$current_card]}"

	diva_write_pcinit_str $((PCINIT_POTS_DIAL_CHAR)) "<as>${v_tmp}</as>" 4 1 "Config\POTS\Specialdialchar" "Dial Chars PAUSE,DONTWAITDIALTONE,WAITDIALTONE,FLASH"

	diva_write_pcinit $((PCINIT_RBS_SILENCE_TIMEOUT)) $((${Card_RBS_SILENCE_TIMEOUT[$current_card]})) 1 1 "Config\POTS\Silence Timeout" "RBS silence timeout"

	diva_write_named_var "Config\POTS\FlexibleDTMF" $((Card_POTS_FLEXDTMF[$current_card])) 1 1 "Config\POTS\FlexibleDTMF" "POTS FlexibleDTMF"
	diva_write_named_string_var "Config\POTS\Flexdirectintcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIRINT[$current_card]})" "Config\POTS\Flexdirectintcall" "POTS Flexdirectintcall"
	diva_write_named_string_var "Config\POTS\Flexdirectextcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIREXT[$current_card]})" "Config\POTS\Flexdirectextcall" "POTS Flexdirectextcall"
	diva_write_named_string_var "Config\POTS\Flexdivintcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIVINT[$current_card]})" "Config\POTS\Flexdivintcall" "POTS Flexdivintcall"
	diva_write_named_string_var "Config\POTS\Flexdivextcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIVEXT[$current_card]})" "Config\POTS\Flexdivextcall" "POTS Flexdivextcall"
	diva_write_named_string_var "Config\POTS\Flexdirectcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIRECT[$current_card]})" "Config\POTS\Flexdirectcall" "POTS Flexdirectcall"
	diva_write_named_string_var "Config\POTS\Flexdivertedcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIVERT[$current_card]})" "Config\POTS\Flexdivertedcall" "POTS Flexdivertedcall"

	# --------------------------------------
	#   Analog Board per Line Parameters
	# --------------------------------------

	current_line_start=$((128 + 1 + $current_card * 8))
	current_line=$current_line_start
	while [ $((current_line)) -lt $(($current_line_start + $((${Card_ANALOG[$current_card]})) )) ]
	do
		line_tmp=$(printf "%01d" $(($current_line-$current_line_start+1)) )

		# Direction
		if [ $((${Card_POTS_DIRECTION[$current_line]})) -ne $((-1)) ]
		then
			diva_write_pcinit $((PCINIT_POTS_DIRECTION)) $((${Card_POTS_DIRECTION[$current_line]})) 1 1 "Config\Line-"$line_tmp"\L2CallDirection" "Call direction" $line_tmp
		fi

		# Calibration Mode
		if [ $((${Card_POTS_CALIBRATION[$current_line]})) -ne $((-1)) ]
		then
			diva_write_pcinit $((PCINIT_POTS_CALIBRATIONMODE)) $((${Card_POTS_CALIBRATION[$current_line]})) 1 1 "Config\Line-"$line_tmp"\L2CalibrationMode" "Calibration mode" $line_tmp
		fi

		# Wait for Dial Tone
		if [ $((${CardDIAL_DONTWAITTONE_CHAR[$current_line]})) -ne $((-1)) ]
		then
			v_tmp="${CardDIAL_PAUSE_CHAR[$current_card]}"
			v_tmp="${v_tmp}${CardDIAL_DONTWAITTONE_CHAR[$current_line]}"  # only this one is line specific
			v_tmp="${v_tmp}${CardDIAL_WAITTONE_CHAR[$current_card]}"
			v_tmp="${v_tmp}${CardDIAL_FLASH_CHAR[$current_card]}"
			diva_write_pcinit_str $((PCINIT_POTS_DIAL_CHAR)) "<as>${v_tmp}</as>" 4 1 "Config\Line-"$line_tmp"\L2Specialdialchar" "Dial Chars PAUSE,DONTWAITDIALTONE,WAITDIALTONE,FLASH" $line_tmp
		fi

		# CPN
		if [ $((${Card_POTS_CONFIGCPN[$current_line]})) -ne $((-1)) ]
		then
			v_tmp=$(diva_str_to_bs ${Card_POTS_CONFIGCPN[$current_line]})
		else
			v_tmp=$(diva_str_to_bs ${Card_POTS_CONFIGCPN[$current_card]})
		fi
		diva_write_pcinit_str $((PCINIT_POTS_CONFIGCPN)) "<bs>${v_tmp}</bs>" 24 1 "Config\Line-"$line_tmp"\L2CPN" "Line-"$line_tmp" to Phone Number Mapping" $line_tmp

		# Dial Type
		if [ $((${CardRBS_DIAL[$current_line]})) -ne $((-1)) ]
		then
			diva_write_pcinit $((PCINIT_CAS_DIALTYPE)) $((${CardRBS_DIAL[$current_line]})) 1 1 "Config\Line-"$line_tmp"\L2Dialtype" "Dial Type" $line_tmp
		fi

		# Rings until answering
		if [ $((${Card_RINGSTILANSWER[$current_line]})) -ne $((-1)) ]
		then
			diva_write_pcinit $((PCINIT_RINGSTILANSWER)) $((${Card_RINGSTILANSWER[$current_line]})) 1 1 "Config\Line-"$line_tmp"\L2RingsUntilAnswer" "Rings until answer" $line_tmp
		fi

		# Flash length
		if [ $((${Card_POTS_FLASHLEN[$current_line]})) -ne $((-1)) ]
		then
			diva_write_pcinit $((PCINIT_FLASHLENGTH)) $((${Card_POTS_FLASHLEN[$current_line]})) 2 1 "Config\Line-"$line_tmp"\FlashLength" "Flash Length" $line_tmp
		fi

		# Caller ID detect and dtmf collect length
		if [ $((${CardNT2[$current_line]})) -ne $((-1)) ]
		then
			diva_write_pcinit $((PCINIT_CALLERIDDETECT)) $((${CardNT2[$current_line]})) 1 1 "Config\Line-"$line_tmp"\L2CallerIDdetect" "CID detection" $line_tmp
			diva_write_pcinit $((PCINIT_DTMFCOLLECTLEN)) $((${Card_DTMF_COLLECT[$current_line]})) 1 1 "Config\Line-"$line_tmp"\L2DTMFCollectLen" "DTMF Collect Len" $line_tmp
			# DID-Length has to be set globally
		fi

		# Flexible DTMF collection
		if [ $((${Card_POTS_FLEXDTMF[$current_line]})) -ne $((-1)) ]
		then
			diva_write_named_var "Config\Line-"$line_tmp"\L2FlexibleDTMF" $((Card_POTS_FLEXDTMF[$current_line])) 1 1 "Config\Line-"$line_tmp"\L2FlexibleDTMF" "POTS FlexibleDTMF" $line_tmp
		fi
		if [ $((${Card_POTS_FLEXDIRINT[$current_line]})) -ne $((-1)) ]
		then
			diva_write_named_string_var "Config\Line-"$line_tmp"\L2Flexdirectintcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIRINT[$current_line]})" "Config\Line-"$line_tmp"\L2Flexdirectintcall" "POTS Flexdirectintcall" $line_tmp
		fi
		if [ $((${Card_POTS_FLEXDIREXT[$current_line]})) -ne $((-1)) ]
		then
			diva_write_named_string_var "Config\Line-"$line_tmp"\L2Flexdirectextcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIREXT[$current_line]})" "Config\Line-"$line_tmp"\L2Flexdirectextcall" "POTS Flexdirectextcall" $line_tmp
		fi
		if [ $((${Card_POTS_FLEXDIVINT[$current_line]})) -ne $((-1)) ]
		then
			diva_write_named_string_var "Config\Line-"$line_tmp"\L2Flexdivintcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIVINT[$current_line]})" "Config\Line-"$line_tmp"\L2Flexdivintcall" "POTS Flexdivintcall" $line_tmp
		fi
		if [ $((${Card_POTS_FLEXDIVEXT[$current_line]})) -ne $((-1)) ]
		then
			diva_write_named_string_var "Config\Line-"$line_tmp"\L2Flexdivextcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIVEXT[$current_line]})" "Config\Line-"$line_tmp"\L2Flexdivextcall" "POTS Flexdivextcall" $line_tmp
		fi
		if [ $((${Card_POTS_FLEXDIRECT[$current_line]})) -ne $((-1)) ]
		then
			diva_write_named_string_var "Config\Line-"$line_tmp"\L2Flexdirectcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIRECT[$current_line]})" "Config\Line-"$line_tmp"\L2Flexdirectcall" "POTS Flexdirectcall" $line_tmp
		fi
		if [ $((${Card_POTS_FLEXDIVERT[$current_line]})) -ne $((-1)) ]
		then
			diva_write_named_string_var "Config\Line-"$line_tmp"\L2Flexdivertedcall" "$(diva_ascii_str_to_bs ${Card_POTS_FLEXDIVERT[$current_line]})" "Config\Line-"$line_tmp"\L2Flexdivertedcall" "POTS Flexdivertedcall" $line_tmp
		fi

		current_line=$(($current_line + 1))
	done

	# --------------------------------------
fi

# ---------------------------
# Echo Canceller Tail Length
# ---------------------------
diva_write_named_var "Config\Echo Canceller\Sparse Span" $((${Card_EC_TAIL[$current_card]})) 2 1 "Config\Echo Canceller\Sparse Span" "Echo Canceller Tail Length"

# ---------------------------
# DTMF Suppressor
# ---------------------------
diva_write_pcinit $((PCINIT_DTMF_SUPPRESSOR)) $((${Card_DTMF_SUPRESSION[$current_card]})) 1 1 "Config\Layer1\DTMF Suppressor" "DTMF Suppression"

# ---------------------------
# Recording AGC
# ---------------------------
diva_write_pcinit $((PCINIT_RECORDING_AGC)) $((${Card_REC_AGC[$current_card]})) 1 1 "Config\Layer1\Recording AGC" "Recording AGC"

if [ ! -z "${cfg_lib_dsp_image}" ]
then
  echo    '    <tlie>' >> ${diva_xml}
  echo    '     <vie id="imagetype">2</vie>' >> ${diva_xml}
  echo    '     <vie id="imagename"><as>'${diva_dir}${cfg_lib_dsp_image}'</as></vie>' >> ${diva_xml}
  echo    '    </tlie>' >> ${diva_xml}
  echo "" >> ${diva_xml}
fi

if [ ! -z "${Card_FPGA_IMAGE[$current_card]}" ]
then
  echo    '    <tlie>' >> ${diva_xml}
  echo    '     <vie id="imagetype">3</vie>' >> ${diva_xml}
  echo    '     <vie id="imagename"><as>'${diva_dir}${Card_FPGA_IMAGE[$current_card]}'</as></vie>' >> ${diva_xml}
  echo    '    </tlie>' >> ${diva_xml}
  echo "" >> ${diva_xml}
fi

if [ ! -z "${Card_SDP0_IMAGE[$current_card]}" ]
then
  echo    '    <tlie>' >> ${diva_xml}
  echo    '     <vie id="imagetype">4</vie>' >> ${diva_xml}
  echo    '     <vie id="imagename"><as>'${diva_dir}${Card_SDP0_IMAGE[$current_card]}'</as></vie>' >> ${diva_xml}
  echo    '    </tlie>' >> ${diva_xml}
  echo "" >> ${diva_xml}
fi

if [ ! -z "${Card_SDP1_IMAGE[$current_card]}" ]
then
  echo    '    <tlie>' >> ${diva_xml}
  echo    '     <vie id="imagetype">5</vie>' >> ${diva_xml}
  echo    '     <vie id="imagename"><as>'${diva_dir}${Card_SDP1_IMAGE[$current_card]}'</as></vie>' >> ${diva_xml}
  echo    '    </tlie>' >> ${diva_xml}
  echo "" >> ${diva_xml}
fi

	echo '   <tlie>' >> ${diva_xml}.capi
  echo '    <vie id="instance">'$(printf "%x" $((current_card)))'</vie>' >> ${diva_xml}.capi
 	echo "" >> ${diva_xml}.capi

	add_instance_data "3" "$(printf "%x" $((current_card)))" "${diva_xml}.capi"

	diva_write_namedvar "XDI\AN\GroupOpt" $((GlobalCapiGO)) 1 "XDI\A$((current_card))\GroupOpt" "CAPI XDI Board group optimization" ".capi"
	diva_write_namedvar "XDI\AN\DynL1" $((${MTPX_HI[Card_MADAPTER[$current_card]]})) 1 "XDI\A$((current_card))\DynL1" "CAPI XDI Board hunt group mode" ".capi"

 	echo '   </tlie>' >> ${diva_xml}.capi
 	echo "" >> ${diva_xml}.capi
}

#
# Get variable from diva.variables.xml and add
# variable to configuration
#
# Write namedvar section
# 1 - name
# 2 - value
# 3 - length
# 4 - write if zero
# 5 - management path
# 6 - description
# 7 - owner
# 8 - instance
# 9 - type
#
diva_get_or_write_instance_named_variable()
{
	local found_variable=0
	local variable_name=$(echo "$1" 2>/dev/null | sed -e 's/\\/\\\\/g;' - 2>/dev/null)

	if [ -s "${diva_variables_file}" ]
	then
		awk -f ${diva_instance} -v owner="$7" -v instance="$8" ${diva_variables_file} > \
					${diva_dir}diva.variables.tmp.1.$$ 2>/dev/null
		if [ -s "${diva_dir}diva.variables.tmp.1.$$" ]
		then
			awk -f ${diva_variables} -v check_variable="$9" -v variable_name="$variable_name" \
						${diva_dir}diva.variables.tmp.1.$$ > ${diva_dir}diva.variables.tmp.2.$$ 2>/dev/null
			if [ -s "${diva_dir}diva.variables.tmp.2.$$" ]
			then
				echo "" >> ${diva_xml}
				echo "# $6 ${diva_variables_file}" >> ${diva_xml}
				echo "  <tlie>" >> ${diva_xml}
				cat ${diva_dir}diva.variables.tmp.2.$$ >> ${diva_xml} 2>/dev/null
				echo "  </tlie>" >> ${diva_xml}
				found_variable=1
				echo "" >> ${diva_xml}
			fi
		fi
	fi

	rm -f ${diva_dir}diva.variables.tmp.1.$$ ${diva_dir}diva.variables.tmp.2.$$

	if [ $((found_variable)) -eq $((0)) ]
	then
		diva_write_named_var "$1" "$2" "$3" "$4" "$5" "$6"
	fi
}

update_soft_ip_adapter_config()
{
	local xml_file="$1"
	local i=1
	local SoftIPFaxOptions=0

	total_channels=$(($total_channels+$max_softip_links))

	echo "" >> $xml_file
	echo ' <tlie>'                   >> $xml_file
	echo '  <vie id="owner">b</vie>' >> $xml_file
	echo "" >> $xml_file
	echo "" >> $xml_file

	remaining_links=$((max_softip_links))

	while [ $((remaining_links)) -gt $((0)) ]
	do

		if [ $(($i)) -ge $((65)) ]
		then

			echo '   <tlie>' >> ${xml_file}
			echo '    <vie id="instance">'$(printf "%x" $(($i)))'</vie>' >> $xml_file

			add_instance_data "b" "$(printf "%x" $(($i)))" "$xml_file"

#
#   Named variables with management info are not supported due to bug in the user mode proxy
#
			diva_get_or_write_instance_named_variable "Debug\RTPDbgMask" $((DebugTraceSoftIPRTP)) 4 1 "Debug\RTPDbgMask" "RTP debug" b "$(printf "%x" $(($i)))" "namedvarname"

			diva_get_or_write_instance_named_variable "Debug\debug_mask" $((DebugTraceSoftIP)) 4 1 "Debug\debug_mask" "Diva softIP driver trace mask" b "$(printf "%x" $(($i)))" "namedvarname"

			echo "" >> ${xml_file}

			diva_write_named_var "libusmem" $((divas_server_adapter_present)) 1 0 "" "Line interconnect"

			echo '    <tlie>' >> ${xml_file}
			echo '     <vie id="namedvarname"><as>name</as></vie>' >> ${xml_file}
			echo '     <vie id="namedvarvalue"><as>'softIP$((i))'</as></vie>' >> ${xml_file}
			echo '    </tlie>' >> ${xml_file}
			echo "" >> ${xml_file}

			diva_write_named_var "adaptertype" $((2))    1 1 "" "softIP Board"
			diva_write_named_var "serial"      $((1))    4 1 "" "Serial number"
			diva_write_named_var "bustype"     $((8))    1 1 "" "Bus type"
			diva_write_named_var "cardtype"    $((0x54)) 1 1 "" "Card type"

			diva_write_ram_byte $((ProtVersion_RamOffset)) $((0x95)) "" "Protocol Version"
			diva_write_pcinit   $((PCINIT_NO_SIGNALLING)) $((2)) 1 1 "" "NoSig"
			diva_write_ram_byte $((StableL2_RamOffset)) $((2)) "" "StableL2"
			diva_write_ram_byte $((nt2_RamOffset)) $((${CardNT2[$((65))]})) "Config\NT-2" "NT2"
			diva_write_ram_byte $((DidLen_RamOffset)) $((${CardDIDLEN[$((65))]})) "Config\DID-Length" "DIDLength"
			diva_write_ram_byte $((tei_RamOffset)) $((1)) "" "TEI"
			diva_write_ram_byte $((WatchDog_RamOffset)) 0 "" "WDog"

			diva_write_ram_byte $((ForceLaw_RamOffset)) $((${CardLAW[$((softip_adapter_nr))]})) "" "Law"

			SoftIPFaxOptions=$((${CardFAX_FINE[65]}+${CardFAX_ECM[65]}+${CardFAX_E64B[65]}+${CardFAX_C2D[65]}+${CardFAX_CT6[65]}+${CardFAX_DUC[65]}+${CardFAX_NPL[65]}+${CardFAX_HTL[65]}+${CardFAX_HHL[65]}+${CardFAX_HPI[65]}+${CardFAX_DFB[65]}))

			if [ $((${CardFAX_SPEED[65]})) -gt $((0)) -a $((${CardFAX_SPEED[65]})) -le $((14400)) ]
			then
				SoftIPFaxOptions=$(($SoftIPFaxOptions+0x1000))
			fi

			diva_write_pcinit $((PCINIT_FAX_OPTIONS)) $((SoftIPFaxOptions)) 2 1 "Config\FAX\Options" "Fax Options"
			diva_write_pcinit $((PCINIT_FAX_MAX_SPEED)) $((${CardFAX_SPEED[65]})) 2 1 "Config\FAX\Max Speed" "Max fax Speed"
			diva_write_pcinit $((PCINIT_FAX_MIN_SPEED)) $((${CardMIN_FAX_SPEED[65]})) 2 1 "Config\FAX\Min Speed" "Min fax Speed"
			diva_write_pcinit $((PCINIT_FAX_MAX_OVERHEAD)) $((${Card_FAX_MAX_OVERHEAD[65]})) 2 1 "Config\FAX\Max Overhead sec." "Max fax session overhead sec"

			diva_write_pcinit $((PCINIT_PART68_LIMITER)) $((${Card_DISABLE_PART68[65]})) 1 1 "Config\Layer1\Part68 Level Lim" "Part 68 Limiter"
			diva_write_pcinit $((PCINIT_DTMF_SUPPRESSOR)) $((${Card_DTMF_SUPRESSION[65]})) 1 1 "Config\Layer1\DTMF Suppressor" "DTMF Suppression"
			diva_write_pcinit $((PCINIT_RECORDING_AGC)) $((${Card_REC_AGC[65]})) 1 1 "Config\Layer1\Recording AGC" "Recording AGC"

			SuppSrvFeatures=0

	        	if [ $((${Card_ADDMISSINGRDN[$softip_adapter_nr]})) -eq 1 ]
        		then
	        		SuppSrvFeatures=$(($SuppSrvFeatures+0x20))
		        fi

			diva_write_pcinit $((PCINIT_SUPPL_SERVICE_FEATURES)) $((SuppSrvFeatures)) 4 0 "" "Supplementary Service Features"

			diva_write_named_var "Config\Echo Canceller\Sparse Span" $((Card_EC_TAIL[$current_card])) 1 1 "Config\Echo Canceller\Sparse Span" "Echo Canceller Tail Length"

			diva_write_named_var "Config\Layer3\HideResourceFTY" $((${Card_is_part_of_combined[$i]})) 1 1 "Config\Layer3\HideResourceFTY" "HideResourceFTY"

			echo '   </tlie>' >> ${xml_file}
			echo '' >> ${xml_file}
		fi

		if [ $(($i)) -ge $((65)) -o $((Card_ResourceBoard[$i])) -ne $((0)) ]
		then

			get_adapter_channel_count $(($i))
			remaining_links=$(($remaining_links-$?))

		fi

		i=$(($i+1))
	done

	echo ' </tlie>'                   >> $xml_file
	echo ''                           >> $xml_file

	echo "" >> $xml_file
	echo ' <tlie>'                   >> $xml_file
	echo '  <vie id="owner">c</vie>' >> $xml_file
	echo "" >> $xml_file
	echo "" >> $xml_file

	echo '   <tlie>' >> ${xml_file}
	echo '    <vie id="instance2"><as>softIP1</as></vie>' >> $xml_file

	add_instance_data "c" "softIP1" "$xml_file"

	diva_get_or_write_instance_named_variable "Debug\debug_mask" $((DebugTraceSIP)) 4 1 "Debug\debug_mask" "Diva SIP stack trace mask" c "$(printf "%x" $(($i)))" "namedvarname"

	diva_write_named_ascii_string_var "Config\profiles\profile 1\from\display_name" "${SOFTIP_FROM_DISPLAYNAME}" "" "Own Display Name"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\from\address" "${SOFTIP_FROM_ADDRESS}" "" "Own SIP Address"
	diva_write_named_var "Config\profiles\profile 1\from\port" $((${SOFTIP_FROM_PORT})) 2 1 "" "Own Port"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\contact\address" "${SOFTIP_FROM_ADDRESS}" "" "Contact Address"
	diva_write_named_var "Config\profiles\profile 1\contact\port" 9802 2 1 "" "Contact Port"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\registrar\address" "${SOFTIP_REGISTRAR_ADDRESS}" "" "Registrar Address"
	diva_write_named_var "Config\profiles\profile 1\registrar\port" $((${SOFTIP_REGISTRAR_PORT})) 2 1 "" "Registrar Port"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\registrar\defaultaddress" "${SOFTIP_PROXY_ADDRESS}" "" "Proxy Default SIP Address"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\registrar\defaultuser" "${SOFTIP_PROXY_USERNAME}" "" "Proxy Default User Name"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\registrar\defaultpassword" "${SOFTIP_PROXY_PASSWD}" "" "Proxy Default Password"
	diva_write_named_var "Config\profiles\profile 1\medias\media 1\port" $((${SOFTIP_MEDIA_PORT})) 2 1 "" "Media Port"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\medias\media 1\media_type" "${SOFTIP_MEDIA_TYPE}" "" "Media Type"
	diva_write_named_var "Config\profiles\profile 1\medias\media 1\numports" $((${SOFTIP_MEDIA_NUMPORTS})) 2 1 "" "Number of Ports"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\medias\media 1\transport" "${SOFTIP_MEDIA_TRANSPORT}" "" "Media Transport"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\medias\media 1\transtype" "${SOFTIP_MEDIA_TRANSTYPE}" "" "Transport Type"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\medias\media 1\codec" "${SOFTIP_MEDIA_CODEC}" "" "List of Codeces"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\medias\media 1\attribute 1" "${SOFTIP_MEDIA_ATTRIBUTE1}" "" "Attribute 1"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\medias\media 1\attribute 2" "${SOFTIP_MEDIA_ATTRIBUTE2}" "" "Attribute 2"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\medias\media 1\attribute 3" "${SOFTIP_MEDIA_ATTRIBUTE3}" "" "Attribute 3"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\medias\media 1\attribute 4" "${SOFTIP_MEDIA_ATTRIBUTE4}" "" "Attribute 4"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\sdp\origin" "${SOFTIP_SDP_ORIGIN}" "" "SDP origin"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\sdp\uri" "${SOFTIP_SDP_URI}" "" "SDP uri"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\sdp\connection" "${SOFTIP_SDP_CONNECTION}" "" "SDP connection"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\sdp\information" "${SOFTIP_SDP_INFORMATION}" "" "SDP information"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\sdp\session" "${SOFTIP_SDP_SESSION}" "" "SDP session"
	diva_write_named_ascii_string_var "Config\profiles\profile 1\extrahdrs\extrahdr 1\name" "ALLOW" ""
	diva_write_named_ascii_string_var "Config\profiles\profile 1\extrahdrs\extrahdr 1\value 1" "${SOFTIP_ALLOW1}" ""
	diva_write_named_ascii_string_var "Config\profiles\profile 1\extrahdrs\extrahdr 1\value 2" "${SOFTIP_ALLOW2}" ""
	diva_write_named_ascii_string_var "Config\profiles\profile 1\extrahdrs\extrahdr 1\value 3" "${SOFTIP_ALLOW3}" ""

	diva_write_named_ascii_string_var "Config\profiles\profile 2\from\display_name" "${SOFTIP_FROM_DISPLAYNAME}" "" "Own Display Name"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\from\address" "${SOFTIP_FROM_ADDRESS}" "" "Own SIP Address"
	diva_write_named_var "Config\profiles\profile 2\from\port" $((${SOFTIP_FROM_PORT})) 2 1 "" "Own Port"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\contact\address" "${SOFTIP_FROM_ADDRESS}" "" "Contact Address"
	diva_write_named_var "Config\profiles\profile 2\contact\port" 9802 2 1 "" "Contact Port"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\registrar\address" "${SOFTIP_REGISTRAR_ADDRESS}" "" "Registrar Address"
	diva_write_named_var "Config\profiles\profile 2\registrar\port" $((${SOFTIP_REGISTRAR_PORT})) 2 1 "" "Registrar Port"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\registrar\defaultaddress" "${SOFTIP_PROXY_ADDRESS}" "" "Proxy Default SIP Address"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\registrar\defaultuser" "${SOFTIP_PROXY_USERNAME}" "" "Proxy Default User Name"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\registrar\defaultpassword" "${SOFTIP_PROXY_PASSWD}" "" "Proxy Default Password"
	diva_write_named_var "Config\profiles\profile 2\medias\media 1\port" 3002 2 1 "" "FAX Media Port"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\media_type" "image" "" "Media Type"
	diva_write_named_var "Config\profiles\profile 2\medias\media 1\numports" 1 2 1 "" "Number of Ports"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\transport" "udptl" "" "Media Transport"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\codec" "t38" "" "List of Codeces"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\sdp\origin" "${SOFTIP_SDP_ORIGIN}" "" "SDP origin"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\sdp\uri" "${SOFTIP_SDP_URI}" "" "SDP uri"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\sdp\connection" "${SOFTIP_SDP_CONNECTION}" "" "SDP connection"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\sdp\information" "${SOFTIP_SDP_INFORMATION}" "" "SDP information"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\sdp\session" "${SOFTIP_SDP_SESSION}" "" "SDP session"
	diva_write_named_ascii_string_var "Config\profiles\profile 2\extrahdrs\extrahdr 1\name" "ALLOW" ""
	diva_write_named_ascii_string_var "Config\profiles\profile 2\extrahdrs\extrahdr 1\value 1" "${SOFTIP_ALLOW1}" ""
	diva_write_named_ascii_string_var "Config\profiles\profile 2\extrahdrs\extrahdr 1\value 2" "${SOFTIP_ALLOW2}" ""
	diva_write_named_ascii_string_var "Config\profiles\profile 2\extrahdrs\extrahdr 1\value 3" "${SOFTIP_ALLOW3}" ""

	if [ $((${CardFAX_SPEED[65]})) -gt $((0)) -a $((${CardFAX_SPEED[65]})) -le $((14400)) ]
	then
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 1" "a=T38FaxVersion:0" "" "Attribute 1"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 2" "a=T38maxBitRate:14400" "" "Attribute 2"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 3" "a=T38FaxFillBitRemoval:0" "" "Attribute 3"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 4" "a=T38FaxTranscodingMMR:0" "" "Attribute 4"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 5" "a=T38FaxTranscodingJBIG:0" "" "Attribute 5"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 6" "a=T38FaxRateManagement:transferredTCF" "" "Attribute 6"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 7" "a=T38FaxMaxBuffer:284" "" "Attribute 7"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 8" "a=T38FaxMaxDatagram:128" "" "Attribute 8"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 9" "a=T38FaxUdpEC:t38UDPRedundancy" "" "Attribute 9"
	else
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 1" "a=T38FaxVersion:3" "" "Attribute 1"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 2" "a=T38maxBitRate:33600" "" "Attribute 2"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 3" "a=T38FaxFillBitRemoval:0" "" "Attribute 3"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 4" "a=T38FaxTranscodingMMR:0" "" "Attribute 4"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 5" "a=T38FaxTranscodingJBIG:0" "" "Attribute 5"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 6" "a=T38FaxRateManagement:transferredTCF" "" "Attribute 6"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 7" "a=T38FaxMaxBuffer:284" "" "Attribute 7"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 8" "a=T38FaxMaxDatagram:128" "" "Attribute 8"
		diva_write_named_ascii_string_var "Config\profiles\profile 2\medias\media 1\attribute 9" "a=T38FaxUdpEC:t38UDPRedundancy" "" "Attribute 9"
	fi

	if [ -f ${diva_softip_dir}softipdnmap.txt ]
	then
		sum=$(sum ${diva_softip_dir}softipdnmap.txt 2>/dev/null | sed -e "s/ //g;" -)
		diva_write_named_string_var "Config\read_dnmapfile" "$(diva_ascii_str_to_bs ${diva_softip_dir}softipdnmap.txt),00,$(diva_ascii_str_to_bs $sum)" "" "softIP dnmap file"
	fi

	diva_write_named_var "Config\RTP Ports\min Port" $((${SOFTIP_RTP_START_PORT})) 2 1 "" "RTP Start Port"
	diva_write_named_var "Config\RTP Ports\max Port" $((${SOFTIP_RTP_END_PORT})) 2 1 "" "RTP End Port"

	echo '   </tlie>' >> ${xml_file}
	echo '' >> ${xml_file}

	echo ' </tlie>'                   >> $xml_file
	echo ''                           >> $xml_file

}

urldecode()
{
  echo -e "$(sed 's/%/\\x/g')" | sed 's/\x0D$//'
}

diva_update_sipcontrol_config()
{
	local xml_file="$1"

	echo "${SIPCONTROL_CONFIG}" | sed -e 's#<tlie>##' -e 's#</tlie>[%0-9A-Fa-f ]*$##' | urldecode >> $xml_file
}

# -----------------------------------------------------
# CREATE DEVICE NODES
# -----------------------------------------------------
create_interface_nodes()
{
want_ttys=$((total_channels))
cur_tty_to_create=1
cur_tty_minor=1
cur_tty_major=$((diva_tty_major))

rm -f $diva_lib_modules_path/diva/diva_cs${driver_suffix}
rm -f $diva_lib_modules_path/diva/divadidd${driver_suffix}
if [ $((diva_pro_pc_card)) -eq 1 ]
then
  clear
  echo""
  mkdir -m 755 $diva_lib_modules_path/diva > /dev/null 2>&1
  ln -s ${diva_dir}diva_cs${driver_suffix}  $diva_lib_modules_path/diva/diva_cs${driver_suffix}
  ln -s ${diva_dir}divadidd${driver_suffix} $diva_lib_modules_path/diva/divadidd${driver_suffix}
	if [ -f $diva_lib_modules_path/kernel/drivers/isdn/eicon/divas${driver_suffix} -o -f $diva_lib_modules_path/kernel/drivers/isdn/eicon/eicon${driver_suffix} ]
  then
  renamed_module_name="_kernel_drivers_isdn_eicon_divas${driver_suffix}"
  renamed2_module_name="_kernel_drivers_isdn_eicon_eicon${driver_suffix}"
echo ' -------------------------------------------------------------------------------'
echo "                 RENAMED OBSOLETE DIVA MODULES"
echo " "
if [ -f $diva_lib_modules_path/kernel/drivers/isdn/eicon/divas${driver_suffix} ]
then
echo "     '$diva_lib_modules_path/kernel/drivers/isdn/eicon/divas${driver_suffix}'"
echo "       to"
echo "     '$diva_lib_modules_path$renamed_module_name'"
echo " "
fi
if [ -f $diva_lib_modules_path/kernel/drivers/isdn/eicon/eicon${driver_suffix} ]
then
echo "     '$diva_lib_modules_path/kernel/drivers/isdn/eicon/eicon${driver_suffix}'"
echo "       to"
echo "     '$diva_lib_modules_path$renamed2_module_name'"
fi
echo ' -------------------------------------------------------------------------------'
	if [ -f $diva_lib_modules_path/kernel/drivers/isdn/eicon/divas${driver_suffix} ]
  then
	  chmod -f u+w $diva_lib_modules_path/kernel/drivers/isdn/eicon/divas${driver_suffix} \
                 $diva_lib_modules_path$renamed_module_name
	  rm -f $diva_lib_modules_path$renamed_module_name
	  mv -f $diva_lib_modules_path/kernel/drivers/isdn/eicon/divas${driver_suffix}  \
          $diva_lib_modules_path$renamed_module_name
  fi
	if [ -f $diva_lib_modules_path/kernel/drivers/isdn/eicon/eicon${driver_suffix} ]
  then
	  chmod -f u+w $diva_lib_modules_path/kernel/drivers/isdn/eicon/eicon${driver_suffix} \
	               $diva_lib_modules_path$rename2_module_name
	  rm -f $diva_lib_modules_path$renamed2_module_name
	  mv -f $diva_lib_modules_path/kernel/drivers/isdn/eicon/eicon${driver_suffix}  \
          $diva_lib_modules_path$renamed2_module_name
  fi
  echo "  Please press ENTER to continue ..."
	read -t 20 unused_input
  clear
  echo""
  fi
echo ' -------------------------------------------------------------------------------'
echo "     Execute 'depmod -a' ..."
echo ' -------------------------------------------------------------------------------'
  depmod -a -q > /dev/null 2>&1
  if [ -d /etc/pcmcia ]
  then
    rm -f /etc/pcmcia/diva.conf
    cp ${diva_dir}diva.conf /etc/pcmcia/diva.conf
  fi
	if [ -x /etc/rc.d/pcmcia ]
  then
    /etc/rc.d/pcmcia stop
		sleep 2
    /etc/rc.d/pcmcia start
  else
    if [ -x /etc/rc.d/init.d/pcmcia ]
    then
      /etc/rc.d/init.d/pcmcia stop
			sleep 2
      /etc/rc.d/init.d/pcmcia start
    else
  if [ -f /var/run/cardmgr.pid ]
  then
    kill -HUP $(cat /var/run/cardmgr.pid)
  fi
fi
  fi
fi

#
# Fix changed done by older versions of driver
#
if [ $((check_diva_device_nodes)) -eq $((0)) ]
then
  rm -f /dev/Divas
  rm -f /dev/DivasI*
fi

if [ ! -c /dev/capi20 ]
then
	rm -f /dev/capi20
	mknod /dev/capi20 c 68 0
fi

#
# Create device nodes for TTY interface
#
if [ -f ${diva_dir}Divatty${driver_suffix} ]
then

	if [ ! -c /dev/ttydsctrl ]
	then
		rm -f /dev/ttydsctrl
  	mknod /dev/ttydsctrl c $((diva_tty_major)) 0
	fi

  while [ $((cur_tty_to_create)) -le $((want_ttys)) ]
  do
    if [ $((cur_tty_to_create)) -lt 10 ]
    then
			if [ ! -c /dev/ttyds0$((cur_tty_to_create)) ]
			then
				rm -f /dev/ttyds0$((cur_tty_to_create))
				mknod /dev/ttyds0$((cur_tty_to_create)) c $((cur_tty_major)) $((cur_tty_minor))
			fi
    else
			if [ ! -c /dev/ttyds$((cur_tty_to_create)) ]
			then
				rm -f /dev/ttyds$((cur_tty_to_create))
				mknod /dev/ttyds$((cur_tty_to_create)) c $((cur_tty_major)) $((cur_tty_minor))
			fi
    fi

    if [ $((cur_tty_minor)) -ge $((diva_tty_minors_per_major)) ]
    then
			cur_tty_minor=1
      cur_tty_major=$(($cur_tty_major+1))
    else
			cur_tty_minor=$(($cur_tty_minor+1))
    fi

    cur_tty_to_create=$(($cur_tty_to_create+1))
  done

  want_ttys=0

fi

}

# -----------------------------
# Create divas_cfg.rc
# ----------------------------
create_card_configuration_file()
{
total_channels=0
i=1

rm -f ${diva_xml}
rm -f ${diva_xml}.capi
rm -f ${diva_xml}.mtpx
rm -f ${diva_xml}.tty
rm -f ${diva_response_xml}

# --------------------------------------------------
#  Open CFGLib file
# --------------------------------------------------
echo '<tlie>'                    >> ${diva_xml}
echo "" >> ${diva_xml}

echo ' <tlie>'                   >> ${diva_xml}
echo '  <vie id="owner">7</vie>' >> ${diva_xml}
echo "" >> ${diva_xml}
echo "" >> ${diva_xml}
echo '  <tlie>'                                                                >> ${diva_xml}
echo '   <vie id="instance">0</vie>'                                           >> ${diva_xml}
add_instance_data "7" "0" "${diva_xml}"
echo "" >> ${diva_xml}

diva_get_or_write_instance_named_variable "dbg\ADAPTER\value" $((DebugTraceADAPTER)) 4 1 "dbg\ADAPTER\value" "Diva Board trace mask" 7 0 "namedvarname"

diva_get_or_write_instance_named_variable "dbg\SoftIP\value" $((DebugTraceSoftIP)) 4 1 "dbg\SoftIP\value" "Diva softIP driver trace mask" 7 0 "namedvarname"

diva_get_or_write_instance_named_variable "dbg\SIP\value" $((DebugTraceSIP)) 4 1 "dbg\SIP\value" "Diva SIP stack trace mask" 7 0 "namedvarname"

diva_get_or_write_instance_named_variable "dbg\DIVAS\value" $((DebugTraceXDI)) 4 1 "dbg\DIVAS\value" "Diva XDI driver trace mask" 7 0 "namedvarname"

diva_get_or_write_instance_named_variable "dbg\MTPX\value" $((DebugTraceMTPX)) 4 1 "dbg\MTPX\value" "Diva MTPX Board trace mask" 7 0 "namedvarname"

diva_get_or_write_instance_named_variable "dbg\CAPI\value" $((DebugTraceCAPI)) 4 1 "dbg\CAPI\value" "Diva CAPI driver trace mask" 7 0 "namedvarname"

diva_get_or_write_instance_named_variable "dbg\TTY\value" $((DebugTraceTTY)) 4 1 "dbg\TTY\value" "Diva TTY driver trace mask" 7 0 "namedvarname"

echo '  </tlie>' >> ${diva_xml}
echo ""          >> ${diva_xml}
echo ' </tlie>'  >> ${diva_xml}
echo ""          >> ${diva_xml}
echo ""          >> ${diva_xml}

echo ' <tlie>'                   >> ${diva_xml}.tty
echo '  <vie id="owner">6</vie>' >> ${diva_xml}.tty
echo ""                          >> ${diva_xml}.tty
echo ""                          >> ${diva_xml}.tty

# ----------------------------------------------------------
# TTY Interface instance zero - Global driver configuration
# ----------------------------------------------------------
echo '   <tlie>' >> ${diva_xml}.tty
echo '    <vie id="instance">'0'</vie>' >> ${diva_xml}.tty
echo "" >> ${diva_xml}.tty

add_instance_data "6" "0" "${diva_xml}.tty"

if [ $((GlobalFaxClass2Options)) -eq $((1)) -o $((GlobalFaxClass2Options)) -eq $((3)) ]
then
	diva_write_namedvar "GlobalOptions\FAX_FORCE_ECM" 1 1 "GlobalOptions\FAX_FORCE_ECM" "Force Fax CLASS 2 ECM" ".tty"
else
	diva_write_namedvar "GlobalOptions\FAX_FORCE_ECM" 0 1 "GlobalOptions\FAX_FORCE_ECM" "Force Fax CLASS 2 ECM" ".tty"
fi

if [ $((GlobalFaxClass2Options)) -eq $((2)) -o $((GlobalFaxClass2Options)) -eq $((3)) ]
then
	diva_write_namedvar "GlobalOptions\FAX_FORCE_V34" 1 1 "GlobalOptions\FAX_FORCE_V34" "Force Fax CLASS 2 V.34" ".tty"
else
	diva_write_namedvar "GlobalOptions\FAX_FORCE_V34" 0 1 "GlobalOptions\FAX_FORCE_V34" "Force Fax CLASS 2 V.34" ".tty"
fi

	diva_write_namedvar "GlobalOptions\WaitSigDisc" $((DivaTTYWaitCause)) 1 "GlobalOptions\WaitSigDisc" "Wait until cause available before disconnect" ".tty"

diva_write_namedvar "GlobalOptions\DIVA_FAX_ALLOW_V34_CODES" $((GlobalFaxClass2OptionsV34Rate)) 1 "GlobalOptions\DIVA_FAX_ALLOW_V34_CODES" "Allows V.34 Fax CLASS 2 speed indication" ".tty"

diva_write_namedvar "GlobalOptions\DIVA_FAX_ALLOW_HIRES" $((GlobalFaxClass2OptionsHiRes)) 1 "GlobalOptions\DIVA_FAX_ALLOW_HIRES" "Allows Fine and SuperFine resolutions" ".tty"

diva_write_namedvar "GlobalOptions\FAX_FORCE_SEP_SUB_PWD" $((GlobalFaxClass2OptionsSEP)) 1 "GlobalOptions\FAX_FORCE_SEP_SUB_PWD" "Allows Fine and SuperFine resolutions" ".tty"

if [ ! -z "${GlobalTTYATInit}" ]
then
	diva_write_namedvar "GlobalOptions\TTY_INIT" "${GlobalTTYATInit}" 0 "GlobalOptions\TTY_INIT" "TTY Init String" ".tty"
else
	diva_write_namedvar "GlobalOptions\TTY_INIT" 0 1 "GlobalOptions\TTY_INIT" "TTY Init String" ".tty"
fi

diva_write_namedvar "GlobalOptions\DIVA_ISDN_IGNORE_NUMBER_TYPE" $((DivaTTYIgnoreNumberType)) 1 "GlobalOptions\DIVA_ISDN_IGNORE_NUMBER_TYPE" "Ignore number type" ".tty"

diva_write_namedvar "GlobalOptions\DIVA_ISDN_AT_RSP_IF_RINGING" $((DivaTTYNoCarrier)) 1 "GlobalOptions\DIVA_ISDN_AT_RSP_IF_RINGING" "NO CARRIER after RING" ".tty"


diva_write_namedvar "GlobalOptions\Cause" 0 1 "GlobalOptions\Cause" "Cause" ".tty"

echo '   </tlie>' >> ${diva_xml}.tty
echo "" >> ${diva_xml}.tty
echo "" >> ${diva_xml}.tty
# ----------------------------------------------------------

if [ $((MtpxOn)) -eq 1 ]
then #{
#
# Create and configure MTPX adapters
#
#
	max_mtpx_adapter=0
	FoundMtpx[0]=0
	CombinedMtpx[0]=0
	last_mtpx_adapter_nr=0

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		if [ $((tmp_j)) -gt $((max_mtpx_adapter)) ]
		then
			max_mtpx_adapter=$((tmp_j))
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do
		tmp_j=$((${Card_MADAPTER[$tmp_i]}))
		if [ $((tmp_j)) -gt $((max_mtpx_adapter)) ]
		then
			max_mtpx_adapter=$((tmp_j))
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=101
	while [ $((tmp_i)) -le $((max_mtpx_adapter)) ]
	do
		FoundMtpx[$tmp_i]=0
		CombinedMtpx[$tmp_i]=0
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=1
	while [ $((${CardSN[$tmp_i]})) -gt 0 ]
	do
		if [ $((FoundMtpx[$((${Card_MADAPTER[$tmp_i]}))])) -eq 1 ]
		then
			CombinedMtpx[$((${Card_MADAPTER[$tmp_i]}))]=1
		else
			FoundMtpx[$((${Card_MADAPTER[$tmp_i]}))]=1
		fi
		tmp_i=$(($tmp_i+1))
	done

	tmp_i=65
	while [ $((${CardSN[$tmp_i]})) -eq 0 ]
	do
		if [ $((FoundMtpx[$((${Card_MADAPTER[$tmp_i]}))])) -eq 1 ]
		then
			CombinedMtpx[$((${Card_MADAPTER[$tmp_i]}))]=1
		else
			FoundMtpx[$((${Card_MADAPTER[$tmp_i]}))]=1
		fi
		tmp_i=$(($tmp_i+1))
	done

#
# Create necessary amount of MTPX adapters
#

	echo ' <tlie>'                   >  ${diva_xml}.mtpx
	echo '  <vie id="owner">a</vie>' >> ${diva_xml}.mtpx
	echo ""                          >> ${diva_xml}.mtpx
	echo ""                          >> ${diva_xml}.mtpx

	echo ' <tlie>'                   >  ${diva_xml}.capi
	echo '  <vie id="owner">3</vie>' >> ${diva_xml}.capi
	echo ""                          >> ${diva_xml}.capi
	echo ""                          >> ${diva_xml}.capi

	echo '  <tlie>'                                                                >> ${diva_xml}.capi
	echo '   <vie id="instance">0</vie>'                                           >> ${diva_xml}.capi
	echo '   <tlie>'                                                               >> ${diva_xml}.capi
	echo '    <vie id="namedvarname"><as>SendMessageInInterruptContext</as></vie>' >> ${diva_xml}.capi
	echo '    <vie id="namedvarvalue"><bs>'$((SysCAPIIrq))'</bs></vie>'            >> ${diva_xml}.capi
	echo '   </tlie>'                                                              >> ${diva_xml}.capi
	echo '  </tlie>'                                                               >> ${diva_xml}.capi
	echo ""                                                                        >> ${diva_xml}.capi

	cur_mtpx_adapter=101
	flat_mtpx_adapter=101
	while [ $((cur_mtpx_adapter)) -le $((max_mtpx_adapter)) ]
	do #{
		if [ $((FoundMtpx[cur_mtpx_adapter])) -eq 1 ]
		then
			#
			# Update MTPX and CAPI Configuration
			# In case one of XDI adapters that are part of this MTPX adapter
			# uses CAPI group optimization then activate CAPI group optimization
			# In case one of XDI adapters that are part of this MTPX adapter
	        	# uses hunt group mode then acticate hunt group mode
			#
			tmp_capi_hunt_group=0
			cur_xdi_adapter=1
			ect_emulation_mode_qsig=1

			while [ $((${CardSN[$cur_xdi_adapter]})) -gt 0 ]
			do   #{
				if [ $((${Card_MADAPTER[$cur_xdi_adapter]})) -eq $((cur_mtpx_adapter)) ]
				then
					if [ $((${MTPX_ECT[$cur_mtpx_adapter]})) -ne 0 ]
					then
						if [ $((${Card_ANALOG[$cur_xdi_adapter]})) -ne 0 ]
						then
							ect_emulation_mode_qsig=0
						else
							if [ $((${CardPRI[$cur_xdi_adapter]})) -eq 1 ]
							then
								if [ $((${PriProtQSIG[${CardPROT[$cur_xdi_adapter]}]})) -eq 0 ]
								then
									ect_emulation_mode_qsig=0
								fi
							else
								if [ $((${PriProtQSIG[${CardPROT[$cur_xdi_adapter]}]})) -eq 0 ]
								then
									ect_emulation_mode_qsig=0
								fi
							fi
						fi
					fi
				fi
				cur_xdi_adapter=$(($cur_xdi_adapter+1))
			done #}

			if [ $((${MTPX_ECT[$cur_mtpx_adapter]})) -ne 0 ]
			then
				if [ $((ect_emulation_mode_qsig)) -eq 1 ]
				then
					ect_emulation_mode_qsig=2
				else
					ect_emulation_mode_qsig=1
				fi
			else
				ect_emulation_mode_qsig=0
			fi

			echo '   <tlie>' >> ${diva_xml}.mtpx
			echo '    <vie id="instance">'$(printf "%x" $(($flat_mtpx_adapter)))'</vie>' >> ${diva_xml}.mtpx
			echo "" >> ${diva_xml}.mtpx

			add_instance_data "a" "$(printf "%x" $(($flat_mtpx_adapter)))" "${diva_xml}.mtpx"

			diva_write_namedvar "Cfg\Ctrl\ECT\Emulation" $((ect_emulation_mode_qsig)) 1 "Cfg\Ctrl\ECT\Emulation" "ECT emulation" ".mtpx"
			diva_write_namedvar "Cfg\Ctrl\DOut\CallRate" $((GlobalCallRateLimit)) 1 "Cfg\Ctrl\DOut\CallRate" "Call Rate limiter" ".mtpx"

			strategy=0
			number_of_softip_resource=0

			cur_xdi_adapter=1
			while [ $((${CardSN[$cur_xdi_adapter]})) -gt 0 ]
			do   #{
				if [ $((${Card_MADAPTER[$cur_xdi_adapter]})) -eq $((cur_mtpx_adapter)) ]
				then
					diva_write_namedvar "Cfg\CfgLibAdapter\A$((cur_xdi_adapter))\Nr" $((cur_xdi_adapter)) 1 "Cfg\CfgLibAdapter\A$((cur_xdi_adapter))\Nr" "XDI Board $((cur_xdi_adapter))" ".mtpx"

					if [ $((StartHMPMode)) -ne $((0)) ]
					then
						diva_write_namedvar "Cfg\Ctrl\NetXDI\CombiReq" $((${Card_HSI_CLOCK[$((cur_xdi_adapter))]})) 1 "Cfg\Ctrl\NetXDI\CombiReq" "HMP" ".mtpx"
					else
						diva_write_namedvar "Cfg\Ctrl\NetXDI\CombiReq" 0 1 "Cfg\Ctrl\NetXDI\CombiReq" "HMP" ".mtpx"
					fi

					if [ $((${PriProtSS7[${CardPROT[$cur_xdi_adapter]}]})) -eq 1 ]
					then
					  strategy=2
					else
						if [ $((${Card_ResourceBoard[$cur_xdi_adapter]})) -ne 0 -a $((CombinedMtpx[$cur_mtpx_adapter])) -eq 1 ]
						then
						  number_of_softip_resource=$(($number_of_softip_resource+1))
						fi
					fi
				fi
				cur_xdi_adapter=$(($cur_xdi_adapter+1))
			done #}

			cur_xdi_adapter=65
			while [ $((${CardSN[$cur_xdi_adapter]})) -eq 0 ]
			do   #{
				if [ $((${Card_MADAPTER[$cur_xdi_adapter]})) -eq $((cur_mtpx_adapter)) ]
				then
					diva_write_namedvar "Cfg\CfgLibAdapter\A$((cur_xdi_adapter))\Nr" $((cur_xdi_adapter)) 1 "Cfg\CfgLibAdapter\A$((cur_xdi_adapter))\Nr" "XDI Board $((cur_xdi_adapter))" ".mtpx"
					if [ $((CombinedMtpx[$cur_mtpx_adapter])) -eq 1 ]
					then
					  number_of_softip_resource=$(($number_of_softip_resource+1))
					fi
				fi
				cur_xdi_adapter=$(($cur_xdi_adapter+1))
			done #}

			if [ $(($number_of_softip_resource)) -gt $((1)) ]
			then
			  strategy=3
			  diva_write_namedvar "Debug\ORFeatures" 1 1 "Debug\ORFeatures" "OR Feature" ".mtpx"
			else
			  diva_write_namedvar "Debug\ORFeatures" 0 1 "Debug\ORFeatures" "OR Feature" ".mtpx"
			fi

			diva_write_namedvar "Cfg\Ctrl\DOut\Strategy" $(($strategy)) 1 "Cfg\Ctrl\DOut\Strategy" "Strategy" ".mtpx"

			diva_write_namedvar "Cfg\Ctrl\NetXDI\StreamControl" 1 1 "Cfg\Ctrl\NetXDI\StreamControl" "StreamControl" ".mtpx"

			echo '   </tlie>' >> ${diva_xml}.mtpx
			echo "" >> ${diva_xml}.mtpx

			echo '   <tlie>' >> ${diva_xml}.capi
			echo '    <vie id="instance">'$(printf "%x" $((flat_mtpx_adapter)))'</vie>' >> ${diva_xml}.capi
			echo "" >> ${diva_xml}.capi

			add_instance_data "3" "$(printf "%x" $((flat_mtpx_adapter)))" "${diva_xml}.capi"

			diva_write_namedvar "XDI\AN\GroupOpt" $((GlobalCapiGO)) 1 "XDI\A$((flat_mtpx_adapter))\GroupOpt" "CAPI MTPX Board group optimization" ".capi"
			diva_write_namedvar "XDI\AN\DynL1" $((${MTPX_HI[$cur_mtpx_adapter]})) 1 "XDI\A$((flat_mtpx_adapter))\DynL1" "CAPI MTPX Board hunt group mode" ".capi"

			echo '   </tlie>' >> ${diva_xml}.capi
			echo "" >> ${diva_xml}.capi

			flat_mtpx_adapter=$(($flat_mtpx_adapter+1))

		fi

		cur_mtpx_adapter=$(($cur_mtpx_adapter+1))
	done #}

	cur_xdi_adapter=1
	while [ $((${CardSN[$cur_xdi_adapter]})) -gt 0 ]
	do   #{
		if [ $((CombinedMtpx[$((${Card_MADAPTER[$cur_xdi_adapter]}))])) -eq $((1)) ]
		then
			echo '   <tlie>' >> ${diva_xml}.mtpx
			echo '    <vie id="instance">'$(printf "%x" $(($flat_mtpx_adapter)))'</vie>' >> ${diva_xml}.mtpx
			echo "" >> ${diva_xml}.mtpx
			diva_write_namedvar "Cfg\CfgLibAdapter\A$((cur_xdi_adapter))\Nr" $((cur_xdi_adapter)) 1 "Cfg\CfgLibAdapter\A$((cur_xdi_adapter))\Nr" "XDI Board $((cur_xdi_adapter))" ".mtpx"
			diva_write_namedvar "internal" 1 1 "" "" ".mtpx"
			diva_write_namedvar "Cfg\Ctrl\NetXDI\StreamControl" 1 1 "Cfg\Ctrl\NetXDI\StreamControl" "StreamControl" ".mtpx"
			echo '   </tlie>' >> ${diva_xml}.mtpx
			echo "" >> ${diva_xml}.mtpx
			flat_mtpx_adapter=$(($flat_mtpx_adapter+1))
			Card_is_part_of_combined[$cur_xdi_adapter]=1
		else
			Card_is_part_of_combined[$cur_xdi_adapter]=0
		fi
		cur_xdi_adapter=$(($cur_xdi_adapter+1))
	done #}

	cur_xdi_adapter=65
	while [ $((${CardSN[$cur_xdi_adapter]})) -eq 0 ]
	do   #{
		if [ $((CombinedMtpx[$((${Card_MADAPTER[$cur_xdi_adapter]}))])) -eq $((1)) ]
		then
			echo '   <tlie>' >> ${diva_xml}.mtpx
			echo '    <vie id="instance">'$(printf "%x" $(($flat_mtpx_adapter)))'</vie>' >> ${diva_xml}.mtpx
			echo "" >> ${diva_xml}.mtpx
			diva_write_namedvar "Cfg\CfgLibAdapter\A$((cur_xdi_adapter))\Nr" $((cur_xdi_adapter)) 1 "Cfg\CfgLibAdapter\A$((cur_xdi_adapter))\Nr" "XDI Board $((cur_xdi_adapter))" ".mtpx"
			diva_write_namedvar "internal" 1 1 "" "" ".mtpx"
			diva_write_namedvar "Cfg\Ctrl\NetXDI\StreamControl" 1 1 "Cfg\Ctrl\NetXDI\StreamControl" "StreamControl" ".mtpx"
			echo '   </tlie>' >> ${diva_xml}.mtpx
			echo "" >> ${diva_xml}.mtpx
			flat_mtpx_adapter=$(($flat_mtpx_adapter+1))
			Card_is_part_of_combined[$cur_xdi_adapter]=1
		else
			Card_is_part_of_combined[$cur_xdi_adapter]=0
		fi
		cur_xdi_adapter=$(($cur_xdi_adapter+1))
	done #}

	echo " </tlie>" >> ${diva_xml}.mtpx
	echo ""         >> ${diva_xml}.mtpx

	echo " </tlie>" >> ${diva_xml}.capi
	echo ""         >> ${diva_xml}.capi

# ----------------------------------------------
#  Write MTPX adapter configuration
# ----------------------------------------------
	cat ${diva_xml}.mtpx >> ${diva_xml}
fi

echo ' <tlie>'                   >> ${diva_xml}
echo '  <vie id="owner">2</vie>' >> ${diva_xml}
echo "" >> ${diva_xml}
echo "" >> ${diva_xml}

echo ' <tlie>'                   >  ${diva_xml}.capi
echo '  <vie id="owner">3</vie>' >> ${diva_xml}.capi
echo ""                          >> ${diva_xml}.capi
echo ""                          >> ${diva_xml}.capi

echo '  <tlie>'                                                                >> ${diva_xml}.capi
echo '   <vie id="instance">0</vie>'                                           >> ${diva_xml}.capi
add_instance_data "3" "0" "${diva_xml}.capi"
echo '   <tlie>'                                                               >> ${diva_xml}.capi
echo '    <vie id="namedvarname"><as>SendMessageInInterruptContext</as></vie>' >> ${diva_xml}.capi
echo '    <vie id="namedvarvalue"><bs>'$((SysCAPIIrq))'</bs></vie>'            >> ${diva_xml}.capi
echo '   </tlie>'                                                              >> ${diva_xml}.capi
echo '  </tlie>'                                                               >> ${diva_xml}.capi
echo ""                                                                        >> ${diva_xml}.capi

while [ $((${CardSN[$i]})) -gt 0 ]
do #{
	current_card=$((i))

	echo '   <tlie>' >> ${diva_xml}
  echo '    <vie id="instance">'$(printf "%x" $((current_card)))'</vie>' >> ${diva_xml}
 	echo "" >> ${diva_xml}

	add_instance_data "2" "$(printf "%x" $((current_card)))" "${diva_xml}"

	if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 -a $((${Card_FROZEN[$current_card]})) -eq 0 ]
	then
		diva_get_or_write_instance_named_variable "Debug\L1DbgMask" $((DebugTraceADAPTERLayer1)) 4 1 "Debug\L1DbgMask" "L1 debug" 2 "$(printf "%x" $((current_card)))" "namedvarname"
	fi

	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
		if [ $((${Card_ResourceBoard[$current_card]})) -ne 0 ]
		then
			diva_write_named_var "Config\Layer3\HideResourceFTY" $((${Card_is_part_of_combined[$i]})) 1 1 "Config\Layer3\HideResourceFTY" "HideResourceFTY"
		else
			diva_write_named_var "Config\Layer3\HideResourceFTY" $((0)) 1 1 "Config\Layer3\HideResourceFTY" "HideResourceFTY"
		fi

		diva_get_or_write_instance_named_variable "Config\Robbed Bit\Debug" $((DebugTraceADAPTERRBS)) 4 1 "Config\Robbed Bit\Debug" "RBS debug" 2 "$(printf "%x" $((current_card)))" "namedvarname"
	fi

	if [ $((StartHMPMode)) -ne $((0)) ]
	then
		if [ $((${Card_HSI_CLOCK[$((current_card))]})) -ne 0 ]
		then
			diva_write_pcinit $((PCINIT_OPTIMIZATION)) 3 1 1 "" "Optimization"
		else
			diva_write_pcinit $((PCINIT_OPTIMIZATION)) 0 1 1 "" "Optimization"
		fi
	else
		diva_write_pcinit $((PCINIT_OPTIMIZATION)) 0 1 1 "" "Optimization"
	fi

	diva_get_or_write_instance_named_variable "Debug\RTPDbgMask" $((DebugTraceADAPTERRTP)) 4 1 "Debug\RTPDbgMask" "RTP debug" 2 "$(printf "%x" $((current_card)))" "namedvarname"

	echo '    <tlie>' >> ${diva_xml}
	echo '     <vie id="namedvarname"><as>adapters</as></vie>' >> ${diva_xml}
 	echo '     <vie id="namedvarvalue"><bs>'$((CardADAPTERS[$current_card]))'</bs></vie>' >> ${diva_xml}
 	echo '    </tlie>' >> ${diva_xml}
 	echo "" >> ${diva_xml}

	echo '    <tlie>' >> ${diva_xml}
	echo '     <vie id="namedvarname"><as>adapter</as></vie>' >> ${diva_xml}
 	echo -e '     <vie id="namedvarvalue"><bs>'"\c" >> ${diva_xml}
 	if [ $((${CardADAPTERS[$current_card]})) -le 1 -o $((${CardSUBADAPTER[$current_card]})) -le 1 ]
 	then
		echo -e "0\c" >> ${diva_xml}
	else
		echo -e "$((${CardSUBADAPTER[$current_card]}-1))""\c" >> ${diva_xml}
	fi
 	echo '</bs></vie>' >> ${diva_xml}
 	echo '    </tlie>' >> ${diva_xml}
 	echo "" >> ${diva_xml}

	if [ $((${Card_HOST_VIDI[$current_card]})) -ne 0 ]
	then
		echo '   <tlie>' >> ${diva_xml}
  	echo '    <vie id="namedvarname"><as>vidi_mode</as></vie>' >> ${diva_xml}
    echo '    <vie id="namedvarvalue"><bs>1</bs></vie>' >> ${diva_xml}
    echo '   </tlie>' >> ${diva_xml}
	fi

	if [ $((${Card_DISABLED[$current_card]})) -ne 0 ]
	then
		echo '   <tlie>' >> ${diva_xml}
  	echo '    <vie id="namedvarname"><as>disabled</as></vie>' >> ${diva_xml}
    echo '    <vie id="namedvarvalue"><bs>1</bs></vie>' >> ${diva_xml}
    echo '   </tlie>' >> ${diva_xml}
	fi

	echo '    <tlie>' >> ${diva_xml}
	echo '     <vie id="namedvarname"><as>name</as></vie>' >> ${diva_xml}
 	echo '     <vie id="namedvarvalue"><as>'${CardVISUALNAME[$i]}'</as></vie>' >> ${diva_xml}
 	echo '    </tlie>' >> ${diva_xml}
 	echo "" >> ${diva_xml}

	echo '    <tlie>' >> ${diva_xml}
	echo '     <vie id="namedvarname"><as>serial</as></vie>' >> ${diva_xml}
 	echo '     <vie id="namedvarvalue"><as>'${CardSN[$i]}'</as></vie>' >> ${diva_xml}
 	echo '    </tlie>' >> ${diva_xml}
 	echo "" >> ${diva_xml}

	if [ $((${CardADAPTERS[$current_card]})) -le 1 -o $((${CardSUBADAPTER[$current_card]})) -le 1 ]
 	then
		adapterdir=$(printf "%x_%d" ${CardNAME[$i]} ${CardSN[$i]})
		license_segment_number=1
		if [ -d ${diva_dir}licenses -a -d ${diva_dir}licenses/${adapterdir} ]
		then
			for j in ${diva_dir}licenses/${adapterdir}/*
			do
				if [ -s "$j" ]
				then
					cat $j | ${diva_dir}/licman -c $((license_segment_number)) >> ${diva_xml}
					license_segment_number=$(($license_segment_number+1))
				fi
			done
			if [ $((license_segment_number)) -eq $((1)) ]
			then
				rmdir ${diva_dir}licenses/${adapterdir}
			fi

		fi
		if [ $((license_segment_number)) -eq $((1)) ]
		then
			$mantool -c $((current_card)) -r"Info\License\BoardReset" > /dev/null 2>&1
			if [ $(($?)) -eq $((0)) ]
			then
				if [ $((${CardBoardReset[$current_card]})) -eq $((0)) ]
				then
					CardBoardReset[$current_card]=$(date +"%s")
				fi
				diva_write_namedvar "Info\License\BoardReset" $((${CardBoardReset[$current_card]})) 4 "Info\License\BoardReset" "BoardReset"
			fi
		else
			CardBoardReset[$current_card]=0
		fi
	fi

	update_card_configuration

  echo '   </tlie>' >> ${diva_xml}
  echo "" >> ${diva_xml}
	echo "" >> ${diva_xml}


	i=$(($i+1))
done #}

echo " </tlie>" >> ${diva_xml}
echo ""         >> ${diva_xml}

if [ $((StartDivaSoftIP)) -ne $((0)) ]
then
	update_soft_ip_adapter_config ${diva_xml}
fi

if [ $((sipcontrol_present)) -ne $((0)) ]
then
	diva_update_sipcontrol_config ${diva_xml}
fi

if [ $((StartDivaSS7)) -ne $((0)) ]
then
	echo "" >> ${diva_xml}
#	echo ' <tlie>'                   >> ${diva_xml}
#	echo '  <vie id="owner">e</vie>' >> ${diva_xml}
#	echo "" >> ${diva_xml}
#	echo "" >> ${diva_xml}
#	echo '   <tlie>' >> ${diva_xml}
#	echo '    <vie id="instance2"><as>softSS7 MTP3</as></vie>' >> ${diva_xml}
#	diva_get_or_write_instance_named_variable "Debug\debug_mask" $((DebugTraceSS7_MTP3)) 4 1 "Debug\debug_mask" "Diva softss7 MTP3 trace mask" c "$(printf "%x" $(($i)))" "namedvarname"
#	echo '   </tlie>' >> ${diva_xml}
#	echo '' >> ${diva_xml}
#	echo ' </tlie>'                   >> ${diva_xml}
#	echo ''                           >> ${diva_xml}

	echo "" >> ${diva_xml}
#	echo ' <tlie>'                   >> ${diva_xml}
#	echo '  <vie id="owner">f</vie>' >> ${diva_xml}
#	echo "" >> ${diva_xml}
#	echo "" >> ${diva_xml}
#	echo '   <tlie>' >> ${diva_xml}
#	echo '    <vie id="instance2"><as>softSS7 ISUP</as></vie>' >> ${diva_xml}
#	diva_get_or_write_instance_named_variable "Debug\debug_mask" $((DebugTraceSS7_ISUP)) 4 1 "Debug\debug_mask" "Diva softss7 ISUP trace mask" c "$(printf "%x" $(($i)))" "namedvarname"
#	echo '   </tlie>' >> ${diva_xml}
#	echo '' >> ${diva_xml}
#	echo ' </tlie>'                   >> ${diva_xml}
#	echo ''                           >> ${diva_xml}
fi

if [ $((StartHMPMode)) -ne $((0)) ]
then
	echo ' <tlie>'			  >> ${diva_xml}
	echo '  <vie id="owner">10</vie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
	echo "" >> ${diva_xml}
	echo '   <tlie>' >> ${diva_xml}
	echo '    <vie id="instance">0</vie>' >> ${diva_xml}
	diva_write_named_var "Cfg\LogicalAdapterNr" $((HSIPORT)) 4 1 "" "Diva HSInterface"
	echo '   </tlie>' >> ${diva_xml}
	echo '' >> ${diva_xml}
	echo ' </tlie>'                   >> ${diva_xml}
	echo ''                           >> ${diva_xml}

	echo ' <tlie>'			  >> ${diva_xml}
	echo '  <vie id="owner">11</vie>' >> ${diva_xml}
	echo "" >> ${diva_xml}
	echo "" >> ${diva_xml}
	echo '   <tlie>' >> ${diva_xml}
	echo '    <vie id="instance">0</vie>' >> ${diva_xml}

	diva_write_named_var "Cfg\Ctrl\SrcPort" $((0x3ef)) 2 0 "" "RPC src port"
	diva_write_named_var "Cfg\Ctrl\DstPort" $((0x3ef)) 2 0 "" "RPC dst port"

	dal_card=1
	while [ $((${CardSN[$((dal_card))]})) -ge $((1)) ]
	do
		if [ $((${Card_HSI_CLOCK[$((dal_card))]})) -ne 0 ]
		then

			diva_write_named_var "Cfg\Capi\Adapter$((dal_card))\law" 0 1 1 "" "Card law"

			reserved_timeslot=0
			if [ $((${CardPRI[$current_card]})) -eq 1 ]
			then
				if [ $((${PriProtSS7[${CardPROT[$((dal_card))]}]})) -ne 0 -o $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -eq 2 ]
				then
					reserved_timeslot=$((${Card_SIGNALING_TIMESLOTS[$((dal_card))]}))
				fi
			fi
			diva_write_named_var "Cfg\Capi\Adapter$((dal_card))\timeslots" $((reserved_timeslot)) 4 1 "" "Reserved timeslots mask"

		fi
		dal_card=$(($dal_card+1))
	done

	echo '   </tlie>' >> ${diva_xml}
	echo '' >> ${diva_xml}
	echo ' </tlie>'                   >> ${diva_xml}
	echo ''                           >> ${diva_xml}


	echo '# HMP Dongle Adapter' >> ${diva_xml}
	echo ' <tlie>' >> ${diva_xml}
	echo '' >> ${diva_xml}
	echo '  <vie id="owner">12</vie>' >> ${diva_xml}
	echo '' >> ${diva_xml}
	echo '   <tlie>' >> ${diva_xml}
	echo '    <vie id="instance">0</vie>' >> ${diva_xml}
	echo '' >> ${diva_xml}

	diva_write_named_var "DivaDongleAdapterType" $((${CardNAME[1]})) 2 1 "DivaDongleAdapterType" "Adapter type"
	diva_write_named_var "DivaDongleAdapterSerial" $((${CardSN[1]})) 2 1 "DivaDongleAdapterSerial" "Adapter serial number"

	echo '' >> ${diva_xml}
	echo '  </tlie>' >> ${diva_xml}
	echo '' >> ${diva_xml}
	echo ' </tlie>' >> ${diva_xml}
	echo '' >> ${diva_xml}

fi

echo " </tlie>" >> ${diva_xml}.capi
echo ""         >> ${diva_xml}.capi

echo " </tlie>" >> ${diva_xml}.tty
echo ""         >> ${diva_xml}.tty

# -----------------------------------
#  Write TTY Driver configuration
# -----------------------------------
cat ${diva_xml}.tty >> ${diva_xml}

cfg_file=${diva_dir}divas_cfg.rc.$$
rm -f ${cfg_file} > /dev/null 2>&1

echo "#! /bin/bash" >> $cfg_file
echo "# ----------------------------------------------------------------------" >> $cfg_file
echo "#  CONFIGURATION SCRIPT FOR DIALOGIC(R) DIVA(R) ISDN ADAPTERS" >> $cfg_file
echo "#  THIS SCRIPT WAS GENERATED AUTOMATICALLY BY" >> $cfg_file
echo "#  /usr/lib/opendiva/divas/Config" >> $cfg_file
echo "#" >> $cfg_file
echo "#  Copyright 1993-2009 by Dialogic(R)" >> $cfg_file
echo "# ----------------------------------------------------------------------" >> $cfg_file
echo "" >> $cfg_file
echo "if [ -x \"${diva_dir}diva.helper.rc\" ]" >> $cfg_file
echo "then" >> $cfg_file
echo "  source ${diva_dir}diva.helper.rc" >> $cfg_file
if [ $((StartHMPMode)) -ne 0 ]
then
echo "  diva_helper_irqbalance" >> $cfg_file
fi
echo "fi" >> $cfg_file
echo "" >> $cfg_file
echo "restart=0" >> $cfg_file
echo "component_restart=0" >> $cfg_file
echo "no_network=0" >> $cfg_file
echo "do_start=0" >> $cfg_file
echo 'if [ $(($#)) -gt $((1)) ]' >> $cfg_file
echo 'then' >> $cfg_file
echo '  case $1 in' >> $cfg_file
echo "    'restart')"' restart=$(($2))' >> $cfg_file
echo '             ;;' >> $cfg_file
echo "    'component_restart')"' restart=$((-1))' >> $cfg_file
echo '             component_restart=$(($2))' >> $cfg_file
echo '             ;;' >> $cfg_file
echo "    'no_network')"' no_network=$(($2))' >> $cfg_file
echo '             ;;' >> $cfg_file
echo '            *) exit 2' >> $cfg_file
echo '             ;;' >> $cfg_file
echo '  esac' >> $cfg_file
echo 'fi' >> $cfg_file
echo "" >> $cfg_file


#
# Update system configuration
#
if [ $((SysRebootOnError)) -ne 0 ]
then

	if [ -x /sbin/startproc -o -x /usr/sbin/startproc -o -x /bin/startproc -o -x /usr/bin/startproc ]
	then
		echo "#" >> $cfg_file
		echo "# Use native startproc/checkproc" >> $cfg_file
		echo "#" >> $cfg_file
	else
		echo "" >> $cfg_file
		echo "startproc()" >> $cfg_file
		echo "{" >> $cfg_file
		echo '  $2 < /dev/null > /dev/null 2>&1 & >/dev/null 2>&1' >> $cfg_file
		echo '  if [ $(($?)) -eq 0 ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo '    disown -h $!' >> $cfg_file
		echo '    disown $!' >> $cfg_file
		echo '  fi' >> $cfg_file
		echo "}" >> $cfg_file

		echo "" >> $cfg_file

		echo "checkproc()" >> $cfg_file
		echo "{" >> $cfg_file
    echo '  l=$(find /proc/*/fd 2>/dev/null | xargs ls -l 2>/dev/null)' >> $cfg_file
		echo '  echo $l | grep $1 > /dev/null 2>&1' >> $cfg_file
		echo '  last_ret=$(($?))' >> $cfg_file
		echo '  l=""' >> $cfg_file
		echo '  return $last_ret' >> $cfg_file
		echo "}" >> $cfg_file

		echo "" >> $cfg_file
	fi

	echo 'echo "1" > /proc/sys/kernel/panic 2>/dev/null' >> $cfg_file
	echo 'if [ -f "/proc/sys/kernel/panic_on_oops" ]' >> $cfg_file
	echo 'then' >> $cfg_file
	echo '  echo "1" > /proc/sys/kernel/panic_on_oops 2>/dev/null' >> $cfg_file
	echo 'fi' >> $cfg_file
	echo "" >> $cfg_file

  echo 'if [ ! -x "'${diva_dir}diva_system_watchdog.sh'" ]' >> $cfg_file
	echo "then" >> $cfg_file

  echo "  echo '#! /bin/bash' > ${diva_dir}diva_system_watchdog.sh" >> $cfg_file
  echo "  echo '' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file

	echo "  echo 'ulimit -S -c 0 > /dev/null 2>&1' >> ${diva_dir}diva_system_watchdog.sh" >> $cfg_file
	echo "  echo 'ulimit -S -t unlimited > /dev/null 2>&1' >> ${diva_dir}diva_system_watchdog.sh" >> $cfg_file
	echo "  echo 'ulimit -H -t unlimited > /dev/null 2>&1' >> ${diva_dir}diva_system_watchdog.sh" >> $cfg_file

  echo "  echo 'wdogs=\"i6300esb i810-tco i8xx_tco iTCO_wdt softdog\"' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '#wdogs=\"i6300esb i810-tco i8xx_tco w83627hf_wdt softdog\"' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'wdog_found=0' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'if [ ! -c \"/dev/watchdog\" ]' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'then' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	rm -f /dev/watchdog' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	mknod /dev/watchdog c 10 130 > /dev/null 2>&1' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	if [ \$((\$?)) -ne 0 ]' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	then' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '		exit 1' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	fi' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'fi' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'for wdog in \$wdogs' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'do' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	lsmod 2>/dev/null | grep \$wdog > /dev/null 2>&1' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	if [ \$((\$?)) -eq 0 ]' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	then' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '		wdog_found=1' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '		break' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	fi' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'done' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'if [ $((wdog_found)) -eq 0 ]' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'then' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	for wdog in \$wdogs' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	do' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '		modprobe \$wdog > /dev/null 2>&1' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '		if [ \$((\$?)) -eq 0 ]' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '		then' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '			wdog_found=1' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '			break' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '		fi' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	done' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'fi' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'exec 5<>/dev/watchdog' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'if [ \$((\$?)) -ne 0 ]' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'then' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	exit 1' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'fi' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'while [ $((1)) -eq $((1)) ]' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'do' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	echo -n . >&5' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '	sleep 1' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo 'done' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
  echo "  echo '' >> ${diva_dir}diva_system_watchdog.sh"  >> $cfg_file
	echo "" >> $cfg_file
	echo '  chmod 700 '${diva_dir}diva_system_watchdog.sh >> $cfg_file

	echo 'fi'   >> $cfg_file

	echo "" >> $cfg_file

	echo "echo -e \"Start system watchdog ... \\c\"" >> $cfg_file

	echo "checkproc ${diva_dir}diva_system_watchdog.sh > /dev/null 2>&1" >> $cfg_file
	echo 'if [ $(($?)) -eq 0 ]' >> $cfg_file
	echo 'then' >> $cfg_file
		echo "  echo OK, running" >> $cfg_file
	echo 'else' >> $cfg_file

		echo "  startproc -q ${diva_dir}diva_system_watchdog.sh > /dev/null 2>&1" >> $cfg_file
	  echo "  checkproc ${diva_dir}diva_system_watchdog.sh > /dev/null 2>&1" >> $cfg_file
  	echo '  if [ $(($?)) -eq 0 ]' >> $cfg_file
  	echo '  then' >> $cfg_file
 		echo "    echo OK" >> $cfg_file
  	echo '  else' >> $cfg_file
  	echo "    echo FAILED" >> $cfg_file
  	echo '  fi' >> $cfg_file

	echo 'fi' >> $cfg_file


else
	echo 'echo "0" > /proc/sys/kernel/panic 2>/dev/null' >> $cfg_file
	echo 'if [ -f "/proc/sys/kernel/panic_on_oops" ]' >> $cfg_file
	echo 'then' >> $cfg_file
	echo '  echo "0" > /proc/sys/kernel/panic_on_oops 2>/dev/null' >> $cfg_file
	echo 'fi' >> $cfg_file
fi

echo "" >> $cfg_file
echo "failed_driver=none" >> $cfg_file
echo "" >> $cfg_file

echo "diva_print_abort()" >> $cfg_file
echo "{" >> $cfg_file
echo "echo ' -------------------------------------------------------------------------------'" >> $cfg_file
echo "echo '  DIVA CONFIGURATION: HARDWARE CONFIGURATION CHANGED'" >> $cfg_file
echo "echo '                      PLEASE START DIVA(R) CONFIGURATION WIZARD'" >> $cfg_file
echo "echo '                      (/usr/lib/opendiva/divas/Config)'" >> $cfg_file
echo "echo ' -------------------------------------------------------------------------------'" >> $cfg_file
echo "}" >> $cfg_file
echo "" >> $cfg_file

echo "diva_print_hw_failed()" >> $cfg_file
echo "{" >> $cfg_file
echo "echo ' -------------------------------------------------------------------------------'" >> $cfg_file
echo "echo '  DIVA CONFIGURATION: HARDWARE START FAILED'" >> $cfg_file
echo "echo '                      PLEASE START DIVA(R) CONFIGURATION WIZARD'" >> $cfg_file
echo "echo '                      (/usr/lib/opendiva/divas/Config)'" >> $cfg_file
echo "echo '                      AND SELECT DEBUG CARD STARTUP MODE'" >> $cfg_file
echo "echo ' -------------------------------------------------------------------------------'" >> $cfg_file

echo "if [ -f ${dbg_file} ]" >> $cfg_file
echo "then" >> $cfg_file
echo "echo '  INFO:'" >> $cfg_file
echo "${diva_dir}divactrl ditrace" >> $cfg_file
echo "fi" >> $cfg_file

echo "}" >> $cfg_file
echo "" >> $cfg_file

echo "diva_print_sw_failed()" >> $cfg_file
echo "{" >> $cfg_file
echo "echo ' -------------------------------------------------------------------------------'" >> $cfg_file
echo "echo \"  DIVA CONFIGURATION: \$failed_driver DRIVER LOAD FAILED\"" >> $cfg_file
echo "echo '                       PLEASE CHECK SYSTEM INSTALLATION'" >> $cfg_file
echo "echo '                       (kernel version, missing files)'" >> $cfg_file
echo "echo ' -------------------------------------------------------------------------------'" >> $cfg_file

echo "if [ -f ${dbg_file} ]" >> $cfg_file
echo "then" >> $cfg_file
echo "echo '  INFO:'" >> $cfg_file
echo "${diva_dir}divactrl ditrace" >> $cfg_file
echo "fi" >> $cfg_file

echo "}" >> $cfg_file
echo "" >> $cfg_file

echo "diva_print_dev_node_failed()" >> $cfg_file
echo "{" >> $cfg_file
echo "echo ' -------------------------------------------------------------------------------'" >> $cfg_file
echo "echo \"  DIVA CONFIGURATION: FAILED TO CREATE \$failed_driver FILE\"" >> $cfg_file
echo "echo '                       PLEASE CHECK SYSTEM INSTALLATION'" >> $cfg_file
echo "echo '                       (kernel version, missing files)'" >> $cfg_file
echo "echo ' -------------------------------------------------------------------------------'" >> $cfg_file

echo "if [ -f ${dbg_file} ]" >> $cfg_file
echo "then" >> $cfg_file
echo "echo '  INFO:'" >> $cfg_file
echo "${diva_dir}divactrl ditrace" >> $cfg_file
echo "fi" >> $cfg_file

echo "}" >> $cfg_file
echo "" >> $cfg_file


if [ $((check_diva_device_nodes)) -ne $((0)) ]
then

echo 'diva_get_device_major()' >> $cfg_file
echo '{' >> $cfg_file
echo '  if [ -c "$1" ]' >> $cfg_file
echo '	then' >> $cfg_file
echo '		return $((0x$(stat --format "%t" "$1")))' >> $cfg_file
echo '	fi' >> $cfg_file
echo "" >> $cfg_file
echo '	return 0' >> $cfg_file
echo '}' >> $cfg_file
echo "" >> $cfg_file
echo 'diva_get_driver_major()' >> $cfg_file
echo '{' >> $cfg_file
echo '	if [ -f "/proc/devices" ]' >> $cfg_file
echo '	then' >> $cfg_file
echo '		return $(($(cat /proc/devices | grep " *$1 *$" | sed -e "s/^ //g;" -e "s/ .*$//" -)))' >> $cfg_file
echo '	fi' >> $cfg_file
echo "" >> $cfg_file
echo '	return 0' >> $cfg_file
echo '}' >> $cfg_file
echo "" >> $cfg_file

echo 'check_diva_device_node_file()' >> $cfg_file
echo '{' >> $cfg_file
echo '	diva_get_driver_major "$1"' >> $cfg_file
echo '	drv_major=$(($?))' >> $cfg_file
echo '  drv_minor=0' >> $cfg_file
echo "" >> $cfg_file
echo '  if [ $(($#)) -gt $((2)) ]' >> $cfg_file
echo '  then' >> $cfg_file
echo '   drv_minor=$(($3))' >> $cfg_file
echo '  fi' >> $cfg_file
echo "" >> $cfg_file
echo '	diva_get_device_major "$2"' >> $cfg_file
echo '	dev_major=$(($?))' >> $cfg_file
echo "" >> $cfg_file
echo '	if [ $((drv_major)) -le $((0)) ]' >> $cfg_file
echo '	then' >> $cfg_file
echo '    failed_driver="$2"' >> $cfg_file
echo '    diva_print_dev_node_failed' >> $cfg_file
echo "    ${diva_dir}divas_stop.rc" >> $cfg_file
echo '    exit 1' >> $cfg_file
echo '	fi' >> $cfg_file
echo "" >> $cfg_file
echo '	if [ $((drv_major)) -ne $((dev_major)) ]' >> $cfg_file
echo '	then' >> $cfg_file
echo '		rm -f "$2"' >> $cfg_file
echo '		mknod "$2" c $((drv_major)) $((drv_minor))' >> $cfg_file
echo '		if [ $(($?)) -ne 0 ]' >> $cfg_file
echo '		then' >> $cfg_file
echo '      failed_driver="$2"' >> $cfg_file
echo '      diva_print_dev_node_failed' >> $cfg_file
echo "      ${diva_dir}divas_stop.rc" >> $cfg_file
echo '      exit 1' >> $cfg_file
echo '		fi' >> $cfg_file
echo '	fi' >> $cfg_file
echo "" >> $cfg_file
echo '}' >> $cfg_file
echo "" >> $cfg_file

fi


echo "#if [ -f ${diva_proc}divas ]" >> $cfg_file
echo "#then" >> $cfg_file
echo "#echo ' -------------------------------------------------------------------------------'" >> $cfg_file
echo "#echo '  DIVA CONFIGURATION: DRIVERS HAVE BEEN ALREADY LOADED'" >> $cfg_file
echo "#echo '                      PLEASE STOP FIRST BY'" >> $cfg_file
echo "#echo '                      /usr/lib/opendiva/divas/Stop'" >> $cfg_file
echo "#echo ' -------------------------------------------------------------------------------'" >> $cfg_file
echo "#exit 1" >> $cfg_file
echo "#fi" >> $cfg_file
echo "" >> $cfg_file

echo "sync" >> $cfg_file
echo "sync" >> $cfg_file
echo "sync" >> $cfg_file
echo "" >> $cfg_file

if [ $((ForceDriverLoad)) -eq 1 ]
then
	if [ $((opendiva)) -eq 0 ]
	then
		driver_load="${driver_load} -f"
	fi
fi

if [ $((opendiva)) -eq 1 ]
then
	echo 'new_xdi_load=1' >> $cfg_file
	echo "failed_driver=DIDD+XDI" >> $cfg_file
	echo "echo -e \"Load Diva XDI  driver ... \\c\"" >> $cfg_file
	echo "${driver_load} divas" >> $cfg_file
else
	echo "failed_driver=DIDD" >> $cfg_file
	echo "if [ ! -f ${diva_proc}divadidd ]" >> $cfg_file
	echo "then" >> $cfg_file
	echo "echo -e \"Load Diva DIDD driver ... \\c\"" >> $cfg_file
	echo "${driver_load} ${diva_dir}divadidd${driver_suffix}" >> $cfg_file
	echo "if [ \$((\$?)) -ne 0  ]" >> $cfg_file
	echo "then" >> $cfg_file
	echo "diva_print_sw_failed" >> $cfg_file
	echo "${diva_dir}divas_stop.rc" >> $cfg_file
	echo "exit 1" >> $cfg_file
	echo "fi" >> $cfg_file
	echo "echo OK" >> $cfg_file
	echo "fi" >> $cfg_file

	echo "if [ ! -f ${diva_proc}divadidd ]" >> $cfg_file
	echo "then" >> $cfg_file
	echo "diva_print_sw_failed" >> $cfg_file
	echo "${diva_dir}divas_stop.rc" >> $cfg_file
	echo "exit 1" >> $cfg_file
	echo "fi" >> $cfg_file

	echo 'new_xdi_load=0' >> $cfg_file

	echo "if [ ! -f ${diva_proc}divas ]" >> $cfg_file
	echo "then" >> $cfg_file
	echo 'new_xdi_load=1' >> $cfg_file
	echo "echo -e \"Load Diva XDI  driver ... \\c\"" >> $cfg_file
	echo "failed_driver=XDI" >> $cfg_file
	if [ $((SysMSIIrq)) -eq 0 ]
	then
	  echo "${driver_load} ${diva_dir}divas${driver_suffix} no_msi=1" >> $cfg_file
  else
	  echo "${driver_load} ${diva_dir}divas${driver_suffix}" >> $cfg_file
	fi
	echo "fi" >> $cfg_file

fi
echo "if [ \$((\$?)) -ne 0  ]" >> $cfg_file
echo "then" >> $cfg_file
echo "diva_print_sw_failed" >> $cfg_file
echo "${diva_dir}divas_stop.rc" >> $cfg_file
echo "exit 1" >> $cfg_file
echo "fi" >> $cfg_file
echo "if [ ! -f ${diva_proc}divas ]" >> $cfg_file
echo "then" >> $cfg_file
echo "diva_print_sw_failed" >> $cfg_file
echo "${diva_dir}divas_stop.rc" >> $cfg_file
echo "exit 1" >> $cfg_file
echo "fi" >> $cfg_file
echo 'if [ $((new_xdi_load)) -ne 0 ]' >> $cfg_file
echo "then" >> $cfg_file
echo "echo OK" >> $cfg_file
echo "fi" >> $cfg_file
echo "" >> $cfg_file
if [ $((check_diva_device_nodes)) -ne $((0)) ]
then
echo 'check_diva_device_node_file "DivasDIDD" "/dev/DivasDIDD"' >> $cfg_file
echo 'check_diva_device_node_file "Divas" "/dev/Divas"' >> $cfg_file
echo 'check_diva_device_node_file "Divas" "/dev/DivasMAP" 1' >> $cfg_file
echo "" >> $cfg_file
fi

# -------------------------------------------------------
#
#  Check if debug mode was active and recover trace
#  information
#
# -------------------------------------------------------
echo 'if [ $((new_xdi_load)) -ne 0 ]' >> $cfg_file
echo "then" >> $cfg_file
echo "  rm -f ${diva_dir}support.debug.*" >> $cfg_file
echo '  echo -e "Check for saved MAINT debug/trace buffer ... \c"' >> $cfg_file
echo "  adapter_to_recover=1" >> $cfg_file
echo '  while [ $((1)) -eq $((1)) ]' >> $cfg_file
echo '  do' >> $cfg_file
echo "    ${diva_dir}divactrl"' load -c $((adapter_to_recover)) -CardName > /dev/null 2>&1' >> $cfg_file
echo '    if [ $(($?)) -ne 0 ]' >> $cfg_file
echo '    then' >> $cfg_file
echo '      echo "idle"' >> $cfg_file
echo '      break' >> $cfg_file
echo '    fi' >> $cfg_file
echo "    ${diva_dir}divactrl"' load -c $((adapter_to_recover)) -DumpMaint -File /var/log/maint.bin > /dev/null 2>&1' >> $cfg_file
echo '    if [ $(($?)) -eq 0 ]' >> $cfg_file
echo '    then' >> $cfg_file
echo '      echo "recovered from Board $((adapter_to_recover)) and saved to /var/log/maint.bin"' >> $cfg_file
echo '      logger -t Diva MAINT trace buffer recovered from Board $((adapter_to_recover)) and saved to /var/log/maint.bin > /dev/null 2>&1' >> $cfg_file
echo '      break' >> $cfg_file
echo '    fi' >> $cfg_file
echo '    adapter_to_recover=$(($adapter_to_recover+1))' >> $cfg_file
echo '  done' >> $cfg_file
echo "fi" >> $cfg_file
echo "" >> $cfg_file

#
# Write configuration to CfgLib
#
if [ $((cfg_lib_available)) -ne $((0)) ]
then
	echo "" >> $cfg_file
	echo "# ------------------------------------------------------------------------" >> $cfg_file
	echo "" >> $cfg_file
	echo 'diva_xdi_response_nr=0' >> $cfg_file

	echo 'cfg_lib_state=$(cat '${cfg_lib_device}' 2>/dev/null | grep cfgstate 2>/dev/null | sed -e "s/^.*://" -e "s/ //g;" - 2>/dev/null)' >> $cfg_file

	echo "" >> $cfg_file

	echo 'if [ ! -f '"${diva_dir}diva.custom.xml"' ]' >> $cfg_file
	echo 'then' >> $cfg_file
	echo '  sed -e "/XML_CFG_START.*XML_CFG_END/d;" -ne "/XML_CFG_START/,/XML_CFG_END/p;" '"${diva_dir}divas_cfg.rc"' | sed -e "/^#/d;" - > '"${diva_dir}cfg.tmp.xml 2>/dev/null" >> $cfg_file
	echo 'else' >> $cfg_file
	echo '  echo "Use custom configuration file"' >> $cfg_file
	echo '  sed -e "/XML_CFG_START.*XML_CFG_END/d;" -ne "/XML_CFG_START/,/XML_CFG_END/p;" '"${diva_dir}diva.custom.xml"' | sed -e "/^#/d;" - > '"${diva_dir}cfg.tmp.xml 2>/dev/null" >> $cfg_file
	echo 'fi' >> $cfg_file

	echo "" >> $cfg_file

	echo 'if [ "${cfg_lib_state}" -eq "0" ]' >> $cfg_file
	echo 'then' >> $cfg_file
  echo "  echo -e 'Write Diva configuration to CFGLib ... \c'" >> $cfg_file
	echo "	${divacfg} init ${cfg_lib_device} ${diva_dir}cfg.tmp.xml > /dev/null 2>&1" >> $cfg_file
  echo '  if [ $(($?)) -ne $((0)) ]' >> $cfg_file
  echo '  then' >> $cfg_file
	echo "	echo 'failed'" >> $cfg_file
  echo "    rm -f ${diva_dir}cfg.tmp.xml" >> $cfg_file
  echo "    rm -f ${diva_dir}cfg.tmp.response.xml" >> $cfg_file
  echo '    failed_driver=CFGLib' >> $cfg_file
  echo '    diva_print_sw_failed' >> $cfg_file
  echo '    /usr/lib/divas/divas_stop.rc' >> $cfg_file
  echo '    exit 1' >> $cfg_file
  echo '  fi' >> $cfg_file
	echo "	echo 'succeeded'" >> $cfg_file
  echo 'else' >> $cfg_file
  echo "  echo -e 'Update CFGLib information ... \c'" >> $cfg_file
	echo "	${divacfg} update ${cfg_lib_device} ${diva_dir}cfg.tmp.xml > ${diva_dir}cfg.tmp.response.xml 2>/dev/null" >> $cfg_file
  echo '  if [ $(($?)) -ne $((0)) ]' >> $cfg_file
  echo '  then' >> $cfg_file
	echo "    echo 'failed'" >> $cfg_file
  echo "    rm -f ${diva_dir}cfg.tmp.xml" >> $cfg_file
  echo "    rm -f ${diva_dir}cfg.tmp.response.xml" >> $cfg_file
  echo '    failed_driver=CFGLib' >> $cfg_file
  echo '    diva_print_sw_failed' >> $cfg_file
  echo '    /usr/lib/divas/divas_stop.rc' >> $cfg_file
  echo '    exit 1' >> $cfg_file
  echo '  fi' >> $cfg_file

	echo "  awk -f ${divaresponse} ${diva_dir}cfg.tmp.response.xml > ${diva_dir}cfg.tmp.xml 2>/dev/null" >> $cfg_file
	echo '  if [ $(($?)) -eq 0 ]' >> $cfg_file
	echo '  then' >> $cfg_file
	echo "    echo 'succeeded'" >> $cfg_file
	echo '  else' >> $cfg_file
	echo "    echo 'failed'" >> $cfg_file
  echo "    rm -f ${diva_dir}cfg.tmp.xml" >> $cfg_file
  echo "    rm -f ${diva_dir}cfg.tmp.response.xml" >> $cfg_file
  echo '    failed_driver=CFGLib' >> $cfg_file
  echo '    diva_print_sw_failed' >> $cfg_file
  echo '    /usr/lib/divas/divas_stop.rc' >> $cfg_file
  echo '    exit 1' >> $cfg_file
	echo '  fi' >> $cfg_file

	echo "source ${diva_dir}cfg.tmp.xml" >> $cfg_file


	echo 'fi' >> $cfg_file
	echo "" >> $cfg_file
  echo "rm -f ${diva_dir}cfg.tmp.xml" >> $cfg_file
  echo "rm -f ${diva_dir}cfg.tmp.response.xml" >> $cfg_file
	echo "" >> $cfg_file
	echo "# ------------------------------------------------------------------------" >> $cfg_file
	echo "" >> $cfg_file
fi

# --------------------------------------------
# MAINT driver uses CfgLib now
# Load MAINT driver after update of CfgLib information
# is complete
# --------------------------------------------
if [ $((LoadMaintOn)) -ne 0 ]
then
  echo "" >> $cfg_file

  echo "echo -e \"Load Diva MAINT debug/trace driver ... \\c\"" >> $cfg_file
  echo "${diva_dir}Trace notrunning > /dev/null 2>&1" >> $cfg_file
	echo 'if [ $(($?)) -eq $((0)) ]' >> $cfg_file
	echo 'then' >> $cfg_file
	  echo "  ${diva_dir}Trace start L 4 > /dev/null 2>&1" >> $cfg_file
	  echo '  if [ $(($?)) -eq 0 ]' >> $cfg_file
	  echo '  then' >> $cfg_file
	  echo "    echo OK" >> $cfg_file
	  echo '  else' >> $cfg_file
	  echo "    echo FAILED" >> $cfg_file
	  echo '  fi' >> $cfg_file
	echo 'else' >> $cfg_file
	  echo "    echo OK, trace process active" >> $cfg_file
	echo 'fi' >> $cfg_file

  echo "" >> $cfg_file
fi


#echo "" >> $cfg_file
#echo "# ------------------------------------------------------------------------" >> $cfg_file
#echo "" >> $cfg_file
#echo 'if [ -d "/etc/asterisk" ]' >> $cfg_file
#echo 'then' >> $cfg_file
#echo "  ${diva_dir}chancapi.sh ${diva_dir} /etc/asterisk/" >> $cfg_file
#echo 'fi' >> $cfg_file
#echo "" >> $cfg_file
#echo "# ------------------------------------------------------------------------" >> $cfg_file
#echo "" >> $cfg_file

# -------------------------------------------------------
#
#  The configuration update should be done only if at
#  least one of adapters is started
#
# -------------------------------------------------------
echo 'if [ $((restart)) -lt 0 ]' >> $cfg_file
echo 'then' >> $cfg_file
echo "  echo -e 'Check Diva configuration ... \c'" >> $cfg_file
echo '  ifc_started=0' >> $cfg_file
echo '	i=1' >> $cfg_file
echo '	while [ -f '${diva_proc}'adapter$((i))/info ]' >> $cfg_file
echo '	do' >> $cfg_file
echo '  	state=$(/usr/lib/divas/divactrl load -c $((i)) -CardState 2>/dev/null)' >> $cfg_file
echo '		if [ "$state" = "active" ]' >> $cfg_file
echo '		then' >> $cfg_file
echo '  		ifc_started=1' >> $cfg_file
echo '			break' >> $cfg_file
echo '		fi' >> $cfg_file
echo '		i=$(($i+1))' >> $cfg_file
echo '	done' >> $cfg_file
echo "" >> $cfg_file
echo 'if [ $(($(pidof DivasC))) -ne 0 -o $(($(pidof DivasP))) -ne 0 -o $(($(lsmod | grep "^DivasP" 2>/dev/null | wc -l))) -ne 0 ]' >> $cfg_file
echo 'then' >> $cfg_file
echo '  ifc_started=1' >> $cfg_file
echo 'fi' >> $cfg_file
echo '	if [ $((ifc_started)) -eq 0 ]' >> $cfg_file
echo '	then' >> $cfg_file
echo "		echo 'succeeded, Board not loaded'" >> $cfg_file
echo '		exit 0' >> $cfg_file
echo '	fi' >> $cfg_file
echo "	echo 'succeeded, look for changes now'" >> $cfg_file
echo 'fi' >> $cfg_file
echo "" >> $cfg_file




hardware_adapter_detected=0
software_adapter_detected=0

i=1
while [ $((${CardSN[$i]})) -gt 0 ]
do

if [ $((${Card_SOFTWARE[$i]})) -eq $((0)) ]
then #{
	hardware_adapter_detected=1

	if [ $((VerifyCardSerialNumber)) -eq 1 ]
	then
		echo "# ${CardVISUALNAME[$i]} SN: ${CardSN[$i]}" >> $cfg_file
	else
		echo "# ${CardVISUALNAME[$i]}" >> $cfg_file
	fi
	echo "current_card_type=\$(${divaload} $((i)) -CardOrdinal)" >> $cfg_file
	echo "current_card_sn=\$(${divaload} $((i)) -SerialNumber)" >> $cfg_file
	if [ $((VerifyCardSerialNumber)) -eq 1 ]
	then
		echo "current_card_type=\"\$current_card_type \$current_card_sn\"" >> $cfg_file
	fi
	echo "case \$current_card_type in" >> $cfg_file
	current_card_type_lk=${CardNAME[$i]}
	if [ $((VerifyCardSerialNumber)) -eq 1 ]
	then
		echo "'$current_card_type_lk ${CardSN[$i]}')" >> $cfg_file
	else
		echo "'$current_card_type_lk')" >> $cfg_file
	fi
	echo ";;"              >> $cfg_file
	echo "  *)"            >> $cfg_file
	echo "    diva_print_abort" >> $cfg_file
	echo "    ${diva_dir}divas_stop.rc" >> $cfg_file
	echo "    exit 1"      >> $cfg_file
	echo "    ;;"          >> $cfg_file
	echo "esac"            >> $cfg_file
	echo ""                >> $cfg_file

else #}{
	software_adapter_detected=1
	if [ ! -z "${Card_SOFTWARE_INTERFACE_MODULE[$i]}" ]
	then #{
		echo "lsmod | grep ${Card_SOFTWARE_INTERFACE_MODULE[$i]}"' > /dev/null 2>&1' >> $cfg_file
		echo 'if [ $(($?)) -ne $((0)) ]' >> $cfg_file
		echo 'then #{' >> $cfg_file
		echo "  echo -e \"Load Diva ${Card_SOFTWARE_INTERFACE_MODULE[$i]} driver ... \\c\"" >> $cfg_file
		echo "  insmod ${diva_dir}${Card_SOFTWARE_INTERFACE_MODULE[$i]}${driver_suffix}"' > /dev/null 2>&1' >> $cfg_file
		echo '  if [ $(($?)) -ne $((0)) ]' >> $cfg_file
		echo '  then #{' >> $cfg_file
		echo "    modprobe ${Card_SOFTWARE_INTERFACE_MODULE[$i]}"' > /dev/null 2>&1' >> $cfg_file
		echo '    if [ $(($?)) -ne $((0)) ]' >> $cfg_file
		echo '    then #{' >> $cfg_file
		echo "      echo FAILED" >> $cfg_file
		echo "      failed_driver=${Card_SOFTWARE_INTERFACE_MODULE[$i]}" >> $cfg_file
		echo "      diva_print_sw_failed" >> $cfg_file
		echo "      ${diva_dir}divas_stop.rc" >> $cfg_file
		echo "      exit 1" >> $cfg_file
		echo '    fi #}' >> $cfg_file
		echo '  fi #}' >> $cfg_file
		echo "  sleep 2" >> $cfg_file
		echo "  echo OK" >> $cfg_file
		echo 'fi #}' >> $cfg_file
	fi #}


	if [ ! -z "${Card_SOFTWARE_INTERFACE_DEVICE_INFO[$i]}" ]
	then #{
		echo '  if [ -e "'${Card_SOFTWARE_INTERFACE_DEVICE_INFO[$i]}'" ]' >> $cfg_file
		echo '  then #{' >> $cfg_file
		echo '    driver_major=$(($(cat '"${Card_SOFTWARE_INTERFACE_DEVICE_INFO[$i]}"' | sed -n -e "1s/:.*$//p" -)))' >> $cfg_file
		echo '    driver_minor=$(($(cat '"${Card_SOFTWARE_INTERFACE_DEVICE_INFO[$i]}"' | sed -n -e "1s/^.*://p" -)))' >> $cfg_file

    echo '    if [ -e "'${Card_SOFTWARE_INTERFACE_DEVICE[$i]}'" ]' >> $cfg_file
    echo '    then #{' >> $cfg_file
		echo '      device_major=$((0x$(stat --format "%t" '"${Card_SOFTWARE_INTERFACE_DEVICE[$i]}"')))' >> $cfg_file
		echo '      device_minor=$((0x$(stat --format "%T" '"${Card_SOFTWARE_INTERFACE_DEVICE[$i]}"')))' >> $cfg_file
    echo '    else #}{' >> $cfg_file
		echo '      device_major=0' >> $cfg_file
		echo '      device_minor=0' >> $cfg_file
    echo '    fi #}' >> $cfg_file

		echo '    driver_string="$((driver_major)):$((driver_minor))"' >> $cfg_file
		echo '    device_string="$((device_major)):$((device_minor))"' >> $cfg_file
		echo '    if [ "$device_string" != "$driver_string" ]' >> $cfg_file
		echo '    then #{' >> $cfg_file
		echo '      rm -f '${Card_SOFTWARE_INTERFACE_DEVICE[$i]} >> $cfg_file
		echo '      mknod '${Card_SOFTWARE_INTERFACE_DEVICE[$i]} ' c $((driver_major)) $((driver_minor))' >> $cfg_file
		echo '    fi #}' >> $cfg_file

		echo '    echo '${Card_SOFTWARE_INTERFACE_MODULE[$i]}' uses '${Card_SOFTWARE_INTERFACE_DEVICE[$i]}' major:$((driver_major)) minor:$((driver_minor))' >> $cfg_file
    echo '    actcardtype=$(($(cat '"${Card_SOFTWARE_INTERFACE_DEVICE_INFO[$i]}"' | sed -n -e "2s/^Cardtype://p" -)))' >> $cfg_file
    echo '    if [ $(($actcardtype)) -ne $((0)) ] && [ $(($actcardtype)) -ne $(('${Card_HARDWARE[$i]}')) ]' >> $cfg_file
    echo '    then' >> $cfg_file
    echo '      diva_print_abort' >> $cfg_file
    echo '      /usr/lib/divas/divas_stop.rc' >> $cfg_file
    echo '      exit 1' >> $cfg_file
    echo '    fi' >> $cfg_file
    if [  ${Card_HARDWARE_HOTPLUGGABLE[$i]} == "0" ]
    then
      echo '  else #}{' >> $cfg_file
      echo '    echo Stub driver does not expose card, so we have a card load error in stub driver....FAILED' >> $cfg_file
      echo '    failed_driver='${Card_SOFTWARE_INTERFACE_MODULE[$i]} >> $cfg_file
      echo '    diva_print_sw_failed' >> $cfg_file
      echo '    /usr/lib/divas/divas_stop.rc' >> $cfg_file
      echo '    exit 1' >> $cfg_file
    fi
		echo '  fi #}' >> $cfg_file
  fi #}

fi #}

if [ $((${Card_SOFTWARE[$i]})) -eq $((0)) ]
then #{
#
# Check for board restart
#
	echo "do_start=0" >> $cfg_file
	echo 'if [ $((restart)) -eq $(('$((i))')) ]' >> $cfg_file
	echo 'then' >> $cfg_file
	echo '  do_start=1' >> $cfg_file
	echo '  '${divaload}' '$((i))' -StopCard  > /dev/null 2>&1' >> $cfg_file
	echo '  '${divaload}' '$((i))' -ResetCard > /dev/null 2>&1' >> $cfg_file
	echo 'fi' >> $cfg_file

#
# Check if board is already running
#

	echo 'if [ $((restart)) -eq $((0)) ]' >> $cfg_file
	echo 'then' >> $cfg_file
	echo '  do_start=1' >> $cfg_file

if [ $((cfg_lib_available)) -eq $((0)) ]
then

	echo '  state=$('"${divaload} $((i)) -CardState 2>/dev/null"')' >> $cfg_file
  echo '  if [ "$state" != "ready" ]' >> $cfg_file
  echo '  then' >> $cfg_file
echo "  echo ' -------------------------------------------------------------------------------'" >> $cfg_file
echo "  echo '  DIVA CONFIGURATION: DRIVERS HAS BEEN ALREADY STARTED'" >> $cfg_file
echo "  echo '                      PLEASE STOP FIRST BY'" >> $cfg_file
echo "  echo '                      /usr/lib/divas/Stop'" >> $cfg_file
echo "  echo ' -------------------------------------------------------------------------------'" >> $cfg_file
  echo '  exit 1' >> $cfg_file
  echo '  fi' >> $cfg_file
  echo 'fi' >> $cfg_file
  echo "" >> $cfg_file

	echo 'if [ $((do_start)) -eq $((1)) ]' >> $cfg_file
	echo 'then' >> $cfg_file

	sub_adapter=$((i))
	sub_adapters=$(($i+${CardADAPTERS[$i]}))
	while [ $((sub_adapter)) -lt $((sub_adapters)) ]
	do
		echo "  ${CardCMD1[$sub_adapter]}" >> $cfg_file
		echo "  ${CardCMD2[$sub_adapter]}" >> $cfg_file
		sub_adapter=$(($sub_adapter+1))
	done

	echo -e "  ${divaload} $((i))\c" >> $cfg_file
	if [ $((${CardADAPTERS[$i]})) -gt 1 ]
	then
		echo -e " -SeparateConfig\c" >> $cfg_file
	fi
	sub_adapter=$((i))
	sub_adapters=$(($i+${CardADAPTERS[$i]}))
	while [ $((sub_adapter)) -lt $((sub_adapters)) ]
	do
		echo -e " ${CardLOAD[$sub_adapter]}\c" >> $cfg_file
		sub_adapter=$(($sub_adapter+1))
	done
	echo "" >> $cfg_file

	echo "  if [ \$((\$?)) -ne 0  ]" >> $cfg_file
	echo "  then" >> $cfg_file
	echo "  diva_print_hw_failed" >> $cfg_file
	echo "  ${diva_dir}divas_stop.rc" >> $cfg_file
	echo "  exit 1" >> $cfg_file
	echo "  fi" >> $cfg_file
	echo "" >> $cfg_file

	sub_adapter=$((i))
	sub_adapters=$(($i+${CardADAPTERS[$i]}))
	while [ $((sub_adapter)) -lt $((sub_adapters)) ]
	do
		echo "  ${CardCMD1[$sub_adapter]}" >> $cfg_file
		echo "  ${CardCMD2[$sub_adapter]}" >> $cfg_file
		sub_adapter=$(($sub_adapter+1))
	done

	sub_adapter=$((i))
	sub_adapters=$(($i+${CardADAPTERS[$i]}))
	while [ $((sub_adapter)) -lt $((sub_adapters)) ]
	do
		echo "  echo -e \"Save initial XLOG to /var/log/diva$((sub_adapter)).log ... \\c\"" >> $cfg_file
		echo "  echo \"INITIAL XLOG: CARD:$((sub_adapter)), ${CardVISUALNAME[$i]} SN:${CardSN[$i]}${CardPORT[$sub_adapter]}, STARTED AT: \$(date)\" > /var/log/diva$((sub_adapter)).log" >> $cfg_file
		echo "  echo \"\" >> /var/log/diva$((sub_adapter)).log" >> $cfg_file
		echo "  ${divaload} $((sub_adapter)) -FlushXlog >> /var/log/diva$((sub_adapter)).log" >> $cfg_file
		echo "  echo OK" >> $cfg_file
		sub_adapter=$(($sub_adapter+1))
	done

else

	sub_adapter=$((i))
	sub_adapters=$(($i+${CardADAPTERS[$i]}))
	while [ $((sub_adapter)) -lt $((sub_adapters)) ]
	do
		echo "  ${CardCMD1[$sub_adapter]}" >> $cfg_file
		echo "  ${CardCMD2[$sub_adapter]}" >> $cfg_file
		sub_adapter=$(($sub_adapter+1))
	done

fi


	echo 'fi' >> $cfg_file
fi #}
	echo "" >> $cfg_file
	echo "# ------------------------------------------------------------------------" >> $cfg_file
	echo "" >> $cfg_file

	i=$(($i+${CardADAPTERS[$i]}))
done

if [ $((cfg_lib_available)) -ne $((0)) ]
then
	echo "" >> $cfg_file

	i=1
	while [ $((${CardSN[$((i))]})) -ge $((1)) ]
	do
    if [ $((${Card_SOFTWARE[$i]})) -eq $((0)) ]
    then #{

  		echo 'state=$(/usr/lib/divas/divactrl load -c '"$((i))"' -CardState 2>/dev/null)' >> $cfg_file
  		echo 'if [ "$state" == "ready" ]' >> $cfg_file
  		echo 'then' >> $cfg_file
  		echo '  card_ready=1' >> $cfg_file
  		echo 'else' >> $cfg_file
  		echo '  card_ready=0' >> $cfg_file
  		echo 'fi'   >> $cfg_file

      sub_adapter=$((i))
      sub_adapters=$(($i+${CardADAPTERS[$i]}))
      while [ $((sub_adapter)) -lt $((sub_adapters)) ]
      do
        echo 'read_xlog['"$((sub_adapter))"']=$((card_ready))' >> $cfg_file
	  		sub_adapter=$(($sub_adapter+1))
      done

    fi #}

		i=$(($i+${CardADAPTERS[$i]}))
	done

	echo ""                                     >> $cfg_file
	echo ""                                     >> $cfg_file
	echo 'if [ $((restart)) -ge $((0)) ]'            >> $cfg_file
	echo 'then # {'                             >> $cfg_file

	if [ $((software_adapter_detected)) -ne $((0)) ]
	then #{
		echo -e 'if [ '"\c" >> $cfg_file
		or_prefix=""
		i=1
		while [ $((${CardSN[$((i))]})) -ge $((1)) ]
		do
			if [ $((${Card_SOFTWARE[$((i))]})) -ne 0 ]
			then
				echo -e "$or_prefix $((i)) -eq "'$((restart))'"\c" >> $cfg_file
				or_prefix=" -o "
			fi
			i=$(($i+1))
		done

		echo ' ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo '  killall DivasC > /dev/null 2>&1' >> $cfg_file
		echo '  sleep 5 > /dev/null 2>&1' >> $cfg_file
		echo '  restart=0' >> $cfg_file
		echo 'fi'   >> $cfg_file
	fi #}

	if [ $((hardware_adapter_detected)) -ne $((0)) ]
	then #{

		echo ""                                     >> $cfg_file
		echo ""                                     >> $cfg_file
		echo 'preffered_card=" "'                   >> $cfg_file
		echo 'if [ $((restart)) -gt $((0)) ]'       >> $cfg_file
		echo 'then'                                 >> $cfg_file
		echo '  preffered_card=" -c $((restart)) "' >> $cfg_file
		echo 'fi'                                   >> $cfg_file

		# Check if parallel load supported by two or more boards
		parallel_load_supported_adapters=0
		parallel_load_not_supported_adapters=0
		parallel_load_supported_list=""
    i=1
    while [ $((${CardSN[$((i))]})) -ge $((1)) ]
    do
      if [ $((${CardSUBADAPTER[$i]})) -le 1 -a $((${Card_PARALLEL_LOAD[$i]})) -ne 0 ]
      then
				parallel_load_supported_adapters=$(($parallel_load_supported_adapters+1))
				parallel_load_supported_list="${parallel_load_supported_list} $i"
      fi
      if [ $((${CardSUBADAPTER[$i]})) -le 1 -a $((${Card_PARALLEL_LOAD[$i]})) -eq 0 ]
			then
				parallel_load_not_supported_adapters=$(($parallel_load_not_supported_adapters+1))
			fi
      i=$(($i+1))
    done

		if [ $((parallel_load_supported_adapters)) -gt 1 ]
		then

			echo 'if [ $((restart)) -eq $((0)) ]'       >> $cfg_file
			echo 'then'                                 >> $cfg_file

			echo '  echo "Parallel start of '$((parallel_load_supported_adapters))' Diva Boards:"' >> $cfg_file

			for i in ${parallel_load_supported_list}
			do
				echo '  echo " Nr:'$((i))' - '${CardVISUALNAME[$((i))]}' SN:'${CardSN[$((i))]}'"' >> $cfg_file
				echo "  ${divacfglib} -c $((i)) -Silent > /dev/null 2>&1 &" >> $cfg_file
			done
			echo '  echo -e "Wait ... \c"' >> $cfg_file

			echo '  wait' >> $cfg_file
			echo '  echo OK' >> $cfg_file

			if [ $((parallel_load_not_supported_adapters)) -eq 0 ]
			then
				echo 'echo "Verify state of Diva Boards:"' >> $cfg_file
			else
				echo 'echo "Start/Verify state of Diva Boards:"' >> $cfg_file
			fi

			echo 'fi'                                   >> $cfg_file
		fi

	  echo -e "${divacfglib}\c"                   >> $cfg_file
		echo -e ' ${preffered_card} '"\c"           >> $cfg_file

#
# In case FPGA access on one of boards is disabled then
# disable it on all boards
#
	  i=1
		while [ $((${CardSN[$((i))]})) -ge $((1)) ]
		do
			if [ $((${Card_DISABLE_4BRIFPGA[$i]})) -eq 1 ]
			then
				echo -e " -Diva4BRIDisableFPGA\c" >> $cfg_file
				break
			fi
			i=$(($i+1))
		done

		if [ $((LoadInDebugMode)) -ne 0 ]
		then
			echo " -Debug" >> $cfg_file
	  else
	    echo "" >> $cfg_file
		fi
		echo 'if [ $(($?)) -ne $((0)) ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo '  diva_print_hw_failed' >> $cfg_file
		echo "  ${diva_dir}divas_stop.rc" >> $cfg_file
		echo '  exit 1' >> $cfg_file
	  echo 'fi'   >> $cfg_file

		echo "" >> $cfg_file
		echo "" >> $cfg_file

	fi #}

	echo "read_xlog_started=0" >> $cfg_file
	echo "" >> $cfg_file
  i=1
	while [ $((${CardSN[$((i))]})) -ge $((1)) ]
  do
		echo 'if [ $((${read_xlog['"$((i))"']})) -ne 0 ]' >> $cfg_file
    echo 'then' >> $cfg_file
		echo '  xlog_sn=$('"$divaload $((i)) -SerialNumber > /dev/null 2>&1 && $divaload $((i)) -SerialNumber"')' >> $cfg_file
		echo '  xlog_sn=$((xlog_sn))' >> $cfg_file
		echo '  xlog_sn=$((${xlog_sn} & 0x00ffffff))' >> $cfg_file
		echo '  if [ $((xlog_sn)) -eq $((0)) ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo '    xlog_sn="unknown"' >> $cfg_file
		echo '  fi' >> $cfg_file
		echo '  if [ $((read_xlog_started)) -eq $((0)) ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo '    echo "Start background retrieval of initial XLOG for:"' >> $cfg_file
		echo '  fi' >> $cfg_file
 		echo '  buildver=3.1.6-109.75-1' >> $cfg_file
		echo "  echo \"  ${CardVISUALNAME[$i]} "'SN:${xlog_sn}'"${CardPORT[$i]} to /var/log/diva$((i)).log\"" >> $cfg_file
		echo "  echo \"INITIAL XLOG:  CARD:$((i)), ${CardVISUALNAME[$i]} "'SN:${xlog_sn}'"${CardPORT[$i]}, STARTED AT: \$(date)\" > /var/log/diva$((i)).log" >> $cfg_file
		echo "  echo \"Package Build: \$buildver\" >> /var/log/diva$((i)).log" >> $cfg_file
		echo "  echo \"\" >> /var/log/diva$((i)).log" >> $cfg_file
		echo "  ${divaload} $((i)) -FlushXlog >> /var/log/diva$((i)).log 2>/dev/null &" >> $cfg_file
		echo "  read_xlog_started=1" >> $cfg_file
    echo 'fi' >> $cfg_file
		i=$(($i+1))
  done
	echo "" >> $cfg_file
	echo 'if [ $((read_xlog_started)) -gt $((0)) ]' >> $cfg_file
	echo 'then' >> $cfg_file
	echo '  echo -e "Wait until XLOG retrieval is completed ... \c"' >> $cfg_file
	echo '  wait' >> $cfg_file
	echo '  echo OK' >> $cfg_file
	echo 'fi' >> $cfg_file

	echo "" >> $cfg_file
	echo "" >> $cfg_file
	echo 'fi # }' >> $cfg_file

	echo "" >> $cfg_file
	echo "" >> $cfg_file
	echo "# ------------------------------------------------------------------------" >> $cfg_file
	echo "" >> $cfg_file
fi

	echo 'if [ ! -f '${diva_proc}'diva_idi ]' >> $cfg_file
	echo 'then' >> $cfg_file
	echo "  echo -e \"Load Diva IDI  driver ... \\c\"" >> $cfg_file
	echo "  failed_driver=IDI" >> $cfg_file

	if [ $((opendiva)) -eq 1 ]
	then
		echo "  ${driver_load} diva_idi" >> $cfg_file
	else
		echo "  ${driver_load} ${diva_dir}diva_idi${driver_suffix}" >> $cfg_file
	fi
	echo "  if [ \$((\$?)) -ne 0  ]" >> $cfg_file
	echo "  then" >> $cfg_file
	echo "    diva_print_sw_failed" >> $cfg_file
	echo "    ${diva_dir}divas_stop.rc" >> $cfg_file
	echo "    exit 1" >> $cfg_file
	echo "  fi" >> $cfg_file
	echo "  echo OK" >> $cfg_file
	echo 'fi' >> $cfg_file
	echo "" >> $cfg_file
  if [ $((check_diva_device_nodes)) -ne $((0)) ]
  then
    echo 'check_diva_device_node_file "DivasIDI" "/dev/DivasIDI"' >> $cfg_file
    echo "" >> $cfg_file
  fi


	if [ $((StartHMPMode)) -ne 0 ]
	then #{

  echo "if [ -f \"${diva_dir}diva_hsi${driver_suffix}\" ]" >> $cfg_file
  echo 'then' >> $cfg_file
  echo '  lsmod | grep diva_hsi > /dev/null 2>&1' >> $cfg_file
  echo '  if [ $(($?)) -ne $((0)) ]' >> $cfg_file
  echo '  then' >> $cfg_file
  echo "    echo -e \"Load Diva HSI  driver ... \\c\"" >> $cfg_file
  echo "    failed_driver=HSI" >> $cfg_file

  if [ $((opendiva)) -eq 1 ]
  then
    echo "    ${driver_load} diva_hsi" >> $cfg_file
  else
    echo "    ${driver_load} ${diva_dir}diva_hsi${driver_suffix}" >> $cfg_file
  fi
  echo "    if [ \$((\$?)) -ne 0  ]" >> $cfg_file
  echo "    then" >> $cfg_file
  echo "      diva_print_sw_failed" >> $cfg_file
  echo "      ${diva_dir}divas_stop.rc" >> $cfg_file
  echo "      exit 1" >> $cfg_file
  echo "    fi" >> $cfg_file
  echo "    echo OK" >> $cfg_file
  echo '  fi' >> $cfg_file
  echo "" >> $cfg_file
  if [ $((check_diva_device_nodes)) -ne $((0)) ]
  then
    echo '  check_diva_device_node_file "DivasHSI" "/dev/DivasHSI"' >> $cfg_file
    echo "" >> $cfg_file
  fi
  echo 'fi' >> $cfg_file

	fi #}

	if [ $((software_adapter_detected)) -ne $((0)) ]
	then
	  echo '  DivasC_running=$(($(pidof DivasC 2>/dev/null)))' >> $cfg_file
	  echo '  if [ $((DivasC_running)) -eq $((0)) ]' >> $cfg_file
	  echo '  then #{' >> $cfg_file
		echo "    echo -e \"Start ${CardVISUALNAME[$i]} driver ... \\c\"" >> $cfg_file
		echo "    ${diva_dir}DivasC > /dev/null 2>&1" >> $cfg_file
		echo '    if [ $(($?)) -eq $((0)) ]' >> $cfg_file
		echo '    then #{' >> $cfg_file
	  echo '      sleep 1' >> $cfg_file
		echo '    else #}{' >> $cfg_file
		echo "      echo FAILED" >> $cfg_file
		echo "      failed_driver=DivasC" >> $cfg_file
		echo "      diva_print_sw_failed" >> $cfg_file
		echo "      ${diva_dir}divas_stop.rc" >> $cfg_file
		echo "      exit 1" >> $cfg_file
		echo '    fi #}' >> $cfg_file
	  echo '    DivasC_running=$(($(pidof DivasC 2>/dev/null)))' >> $cfg_file
	  echo '    if [ $((DivasC_running)) -eq $((0)) ]' >> $cfg_file
	  echo '    then #{' >> $cfg_file
		echo "      echo FAILED" >> $cfg_file
		echo "      failed_driver=DivasC" >> $cfg_file
		echo "      diva_print_sw_failed" >> $cfg_file
		echo "      ${diva_dir}divas_stop.rc" >> $cfg_file
		echo "      exit 1" >> $cfg_file
		echo '    fi #}' >> $cfg_file
		echo "    echo OK" >> $cfg_file
	  echo '  fi #}' >> $cfg_file
	fi

	echo "" >> $cfg_file

	echo 'ignore_update=""' >> $cfg_file

#
# Load SoftIP driver
#
if [ $((max_softip_adapters)) -gt 0 ]
then
	if [ $((StartDivaSoftIP)) -ne 0 ]
	then
		echo 'softip_adapter_started=0' >> $cfg_file
		echo 'lsmod 2>/dev/null | grep DivasP > /dev/null 2>&1' >> $cfg_file
		echo 'if [ $(($?)) -eq $((0)) ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo '  softip_adapter_started=1' >> $cfg_file
		echo 'fi' >> $cfg_file
		echo "if [ "'$((softip_adapter_started)) -eq $((0)) -a '"-f \"${diva_softip_dir}DivasP${driver_suffix}\" ]" >> $cfg_file
		echo "then" >> $cfg_file
		echo "  echo -e \"Load Diva softIP Board driver ... \\c\"" >> $cfg_file
		echo "  insmod ${diva_softip_dir}DivasP${driver_suffix} > /dev/null 2>&1" >> $cfg_file
		echo '  if [ $(($?)) -eq $((0)) ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo '    sleep 1' >> $cfg_file
		echo "    ignore_update=\"\$ignore_update 0xb\"" >> $cfg_file
		echo '    softip_adapter_started=1' >> $cfg_file
		echo "    echo OK" >> $cfg_file
		echo '  else' >> $cfg_file
		echo '    softip_adapter_started=0' >> $cfg_file
		echo "    echo FAILED" >> $cfg_file
		echo '  fi' >> $cfg_file
		echo 'else' >> $cfg_file
		echo '  if [ $(($(pidof DivasP))) -ne 0 ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo '    softip_adapter_started=1' >> $cfg_file
		echo '  fi' >> $cfg_file
		echo "fi" >> $cfg_file

		echo 'if [ $((softip_adapter_started)) -eq $((0)) ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo "  if [ -x \"${diva_softip_dir}DivasP\" ]" >> $cfg_file
		echo "  then" >> $cfg_file
		echo "    echo -e \"Start Diva softIP Board ... \\c\"" >> $cfg_file
		echo "    ${diva_softip_dir}DivasP > /dev/null 2>&1" >> $cfg_file
		echo '    if [ $(($?)) -eq $((0)) ]' >> $cfg_file
		echo '    then' >> $cfg_file
		echo '      softip_adapter_started=1' >> $cfg_file
		echo "      ignore_update=\"\$ignore_update 0xb\"" >> $cfg_file
		echo '      sleep 1' >> $cfg_file
		echo "      echo OK" >> $cfg_file
		echo '    else' >> $cfg_file
		echo '      softip_adapter_started=0' >> $cfg_file
		echo "      echo FAILED" >> $cfg_file
		echo '    fi' >> $cfg_file
		echo "  fi"   >> $cfg_file
		echo 'fi'   >> $cfg_file
	else
		echo 'lsmod 2>/dev/null | grep DivasP > /dev/null 2>&1' >> $cfg_file
		echo 'if [ $(($?)) -eq $((0)) ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo "  echo -e \"Stopping Diva softIP Board driver ... \\c\"" >> $cfg_file
		echo "  rmmod DivasP > /dev/null 2>&1" >> $cfg_file
		echo "  echo OK" >> $cfg_file
		echo 'fi' >> $cfg_file
		echo 'softip_pid=$(($(pidof DivasP)))' >> $cfg_file
		echo 'if [ $((softip_pid)) -ne 0 ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo "  echo -e \"Stopping Diva softIP Board driver ... \\c\"" >> $cfg_file
		echo '  kill $((softip_pid)) > /dev/null 2>&1' >> $cfg_file
		echo '  wait $((softip_pid)) > /dev/null 2>&1' >> $cfg_file
		echo "  echo OK" >> $cfg_file
		echo 'fi' >> $cfg_file
	fi
	echo "" >> $cfg_file
fi

#
# Now load MTPX driver if necessary
#
  if [ $((MtpxOn)) -eq 1 ]
  then #{
	echo "$mantool -c $((1004)) -r > /dev/null 2>&1" >> $cfg_file
	echo 'if [ $(($?)) -ne $((0)) ]' >> $cfg_file
	echo 'then' >> $cfg_file
	echo "  echo -e \"Load Diva M-Board driver ... \\c\"" >> $cfg_file
	echo "  failed_driver=MTPX" >> $cfg_file
	if [ $((opendiva)) -eq 1 ]
	then
		echo "  ${driver_load} diva_mtpx" >> $cfg_file
	else
		echo "  ${driver_load} ${diva_dir}diva_mtpx${driver_suffix} > /dev/null 2>&1" >> $cfg_file
	fi
	echo "  if [ \$((\$?)) -ne 0  ]" >> $cfg_file
	echo "  then" >> $cfg_file
	echo "    echo FAILED" >> $cfg_file
	echo "    diva_print_sw_failed" >> $cfg_file
	echo "    ${diva_dir}divas_stop.rc" >> $cfg_file
	echo "    exit 1" >> $cfg_file
	echo "  fi" >> $cfg_file
	echo "  sleep 1" >> $cfg_file
	echo "  echo OK" >> $cfg_file
	echo 'fi' >> $cfg_file
	echo "" >> $cfg_file

#
# Create helper functions
#

	echo 'read_mgmt_int()' >> $cfg_file
	echo '{' >> $cfg_file
	echo	"${mantool}"' -c $(($1)) -r"$2" > /dev/null 2>&1' >> $cfg_file
	echo '	if [ $(($?)) -ne 0 ]' >> $cfg_file
	echo '	then' >> $cfg_file
	echo '		return $((0))' >> $cfg_file
	echo '	fi' >> $cfg_file
	echo '	ret=$('${mantool}' -c $(($1)) -r"$2" 2>/dev/null | sed -e "s/^.*= //" -e "/^$/d;" -)' >> $cfg_file
	echo '	return $((ret))' >> $cfg_file
	echo '}' >> $cfg_file
	echo "" >> $cfg_file

  fi #}

# -----------------------------------
#  Write CAPI Driver configuration
# -----------------------------------
cat ${diva_xml}.capi >> ${diva_xml}

	if [ $((StartCAPI)) -ne 0 -o $((StartCtransferOn)) -ne 0 ]
	then #{
		echo "failed_driver=CAPI" >> $cfg_file

		echo 'capi_loaded=0' >> $cfg_file
		echo 'divacapi_loaded=0' >> $cfg_file
		echo 'grep "^divacapi" /proc/modules > /dev/null 2>&1' >> $cfg_file
		echo 'if [ $(($?)) -eq 0 ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo '  divacapi_loaded=1' >> $cfg_file
		echo '  grep "^kernelcapi" /proc/modules > /dev/null 2>&1' >> $cfg_file
		echo '  if [ $(($?)) -ne 0 ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo '    capi_loaded=1' >> $cfg_file
		echo '  fi' >> $cfg_file
		echo 'fi' >> $cfg_file
		echo '' >> $cfg_file
		echo 'if [ $((capi_loaded)) -eq 0 -a $((divacapi_loaded)) -eq 0 ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo "  echo -e \"Load optimized Diva CAPI driver ... \\c\"" >> $cfg_file
		if [ $((opendiva)) -eq 1 ]
		then
			echo "  ${driver_load} divacapi"' >/dev/null 2>&1' >> $cfg_file
		else
			echo "  ${driver_load} ${diva_dir}divacapi${driver_suffix}"' >/dev/null 2>&1' >> $cfg_file
		fi
		echo '  if [ $(($?)) -eq 0 ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo "    echo OK" >> $cfg_file

    echo '    if [ ! -e /dev/capi20 ]' >> $cfg_file
    echo '    then' >> $cfg_file
    echo '      mknod /dev/capi20 c 68 0 > /dev/null 2>&1' >> $cfg_file
    echo '    fi'   >> $cfg_file

		echo "    capi_loaded=1" >> $cfg_file
		echo '  else' >> $cfg_file
		echo "    echo 'not available'" >> $cfg_file
		echo '  fi' >> $cfg_file
		echo 'fi' >> $cfg_file
		echo '' >> $cfg_file


		echo 'if [ $((capi_loaded)) -eq 0 ]' >> $cfg_file
		echo 'then' >> $cfg_file

		echo '  grep "^kernelcapi" /proc/modules > /dev/null 2>&1' >> $cfg_file
		echo '  if [ $(($?)) -ne 0 ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo "    echo -e \"Load KERNELCAPI driver ... \\c\"" >> $cfg_file

		echo "    modprobe kernelcapi" >> $cfg_file

		echo "    if [ \$((\$?)) -ne 0 ]" >> $cfg_file
		echo "    then" >> $cfg_file
		echo "      diva_print_sw_failed" >> $cfg_file
		echo "      ${diva_dir}divas_stop.rc" >> $cfg_file
		echo "      exit 1" >> $cfg_file
		echo "    fi" >> $cfg_file
    echo "    echo OK" >> $cfg_file
		echo '  fi' >> $cfg_file
		echo "" >> $cfg_file

		echo '  grep "^divacapi" /proc/modules > /dev/null 2>&1' >> $cfg_file
		echo '  if [ $(($?)) -ne 0 ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo "    echo -e \"Load Diva CAPI driver ... \\c\"" >> $cfg_file
		if [ $((opendiva)) -eq 1 ]
		then
			echo "    ${driver_load} divacapi" >> $cfg_file
		else
			echo "    ${driver_load} ${diva_dir}divacapi${driver_suffix}" >> $cfg_file
		fi

		echo "    if [ \$((\$?)) -ne 0 ]" >> $cfg_file
		echo "    then" >> $cfg_file
		echo "      diva_print_sw_failed" >> $cfg_file
		echo "      ${diva_dir}divas_stop.rc" >> $cfg_file
		echo "      exit 1" >> $cfg_file
		echo "    fi" >> $cfg_file
		echo '    if [ ! -e /dev/capi20 ]' >> $cfg_file
		echo '    then' >> $cfg_file
		echo '      mknod /dev/capi20 c 68 0 > /dev/null 2>&1' >> $cfg_file
		echo '    fi'   >> $cfg_file

    echo "    echo OK" >> $cfg_file
		echo '  fi' >> $cfg_file
		echo "" >> $cfg_file

    		if [ "${driver_suffix}" = ".ko" ]; then
    		echo '  grep -w "^capifs" /proc/modules > /dev/null 2>&1' >> $cfg_file
    		echo '  if [ $(($?)) -ne 0 ]' >> $cfg_file
    		echo '  then' >> $cfg_file
    		echo "    echo -e \"Load CAPIFS driver ... \\c\"" >> $cfg_file
    		echo "    modprobe capifs" >> $cfg_file
	   		echo "    echo" >> $cfg_file
    		echo '  fi' >> $cfg_file
    		echo "" >> $cfg_file
    		fi

		echo '  grep -w "^capi" /proc/modules > /dev/null 2>&1' >> $cfg_file
		echo '  if [ $(($?)) -ne 0 ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo "    echo -e \"Load CAPI driver ... \\c\"" >> $cfg_file
		echo "    modprobe capi" >> $cfg_file
		echo "    if [ \$((\$?)) -ne 0  ]" >> $cfg_file
		echo "    then" >> $cfg_file
		echo "      diva_print_sw_failed" >> $cfg_file
		echo "      ${diva_dir}divas_stop.rc" >> $cfg_file
		echo "      exit 1" >> $cfg_file
		echo "    fi" >> $cfg_file
    echo "    echo OK" >> $cfg_file
		echo '  fi' >> $cfg_file
		echo "" >> $cfg_file

		echo 'fi' >> $cfg_file
	fi #}

	echo "divas_wait_process()" >> $cfg_file
	echo "{" >> $cfg_file
	echo "  stop_nr=50" >> $cfg_file
	echo '  stop_pid=$(pidof $1 2>/dev/null | sed -e "s/ //g;" -e "/^$/d;" -)' >> $cfg_file
	echo '  if [ $((stop_pid)) -ne $((0)) ]' >> $cfg_file
	echo "  then" >> $cfg_file
	echo '    kill $((stop_pid)) > /dev/null 2>&1' >> $cfg_file
	echo "  fi" >> $cfg_file
	echo "" >> $cfg_file
	echo '  while [ $((stop_nr)) -ne $((0)) ]' >> $cfg_file
	echo "  do" >> $cfg_file
	echo '    stop_pid=$(pidof $1 2>/dev/null | sed -e "s/ //g;" -e "/^$/d;" -)' >> $cfg_file
	echo '    if [ $((stop_pid)) -eq $((0)) ]' >> $cfg_file
	echo "    then" >> $cfg_file
	echo "      break" >> $cfg_file
	echo "    fi" >> $cfg_file
	echo "    sleep 1" >> $cfg_file
	echo '    stop_nr=$(($stop_nr-1))' >> $cfg_file
	echo "  done" >> $cfg_file
	echo "}" >> $cfg_file

	if [ $((kernel_greater_2_6_8)) -gt 0 ]
	then
		if [ $((max_softip_adapters)) -gt 0 ]
		then
			if [ $((StartDivaSoftIP)) -eq 0 ]
			then
				echo 'softip_pid=$(($(pidof divas_softip)))' >> $cfg_file
				echo 'if [ $((softip_pid)) -ne 0 ]' >> $cfg_file
				echo 'then' >> $cfg_file
				echo "  echo -e \"Stopping Diva softIP stack ... \\c\"" >> $cfg_file
				echo "  divas_wait_process \"divas_softip\"" >> $cfg_file
				echo "  echo OK" >> $cfg_file
				echo 'fi' >> $cfg_file
			fi
		fi

		if [ $((sipcontrol_present)) -gt 0 ]
		then
			if [ $((StartDivaSIPcontrol)) -eq 0 ]
			then
				echo 'sipcontrol_bin=$(ps -eo "%c" | grep sipcontrol_)' >> $cfg_file
				echo 'if [ $(($?)) -eq $((0)) ]' >> $cfg_file
				echo 'then' >> $cfg_file
				echo "  echo -e \"Stopping Diva SIPcontrol ... \\c\"" >> $cfg_file
				echo '  divas_wait_process "$sipcontrol_bin"' >> $cfg_file
				echo "  echo OK" >> $cfg_file
				echo 'fi' >> $cfg_file
			fi
		fi

		if [ $((max_softip_adapters)) -gt 0 ]
		then
			if [ $((StartDivaSoftIP)) -ne 0 ]
			then
				echo "if [ "'$((no_network)) -eq $((0))'" ]" >> $cfg_file
				echo "then" >> $cfg_file
				echo '  softip_stack_started=0' >> $cfg_file
				echo "  $mantool -c $((1007)) -r > /dev/null 2>&1" >> $cfg_file
				echo '  if [ $(($?)) -eq $((0)) ]' >> $cfg_file
				echo '  then' >> $cfg_file
				echo '    if [ $((component_restart)) -eq $((1007)) ]' >> $cfg_file
				echo '    then' >> $cfg_file
				echo '      softip_pid=$(($(pidof divas_softip)))' >> $cfg_file
				echo '      if [ $((softip_pid)) -ne 0 ]' >> $cfg_file
				echo '      then' >> $cfg_file
				echo "        echo -e \"Stopping Diva softIP stack ... \\c\"" >> $cfg_file
				echo "        divas_wait_process \"divas_softip\"" >> $cfg_file
				echo "        echo OK" >> $cfg_file
				echo '      fi' >> $cfg_file
				echo '      softip_stack_started=0' >> $cfg_file
				echo '    else' >> $cfg_file
				echo '      softip_stack_started=1' >> $cfg_file
				echo '    fi' >> $cfg_file
				echo '  fi' >> $cfg_file
	                	echo '  if [ $((softip_stack_started)) -eq $((0)) ]' >> $cfg_file
	                	echo '  then' >> $cfg_file
				echo '    ifconfig_ips=$(LC_ALL=EN ifconfig | grep "inet addr:" | sed -n "/addr:/s/ [^r]*..//gp" 2>/dev/null)' >> $cfg_file
				echo '    found_name=0' >> $cfg_file
				echo '    for ip in ${ifconfig_ips}' >> $cfg_file
				echo '    do' >> $cfg_file
				echo "      echo \"${CSOFTIP_FROM_ADDRESS}\" | grep "'"${ip}\$" > /dev/null' >> $cfg_file
				echo '      if [ $(($?)) -eq 0 ]' >> $cfg_file
				echo '      then' >> $cfg_file
				echo '        found_name=1' >> $cfg_file
				echo '        break' >> $cfg_file
				echo '      fi' >> $cfg_file
				echo '    done' >> $cfg_file
				echo '    if [ $((found_name)) -eq $((1)) ]' >> $cfg_file
				echo '    then' >> $cfg_file
				echo "      echo -e \"Start Diva softIP stack ... \\c\"" >> $cfg_file
				echo "      sleep 1" >> $cfg_file
				echo "      ${diva_softip_dir}divas_softip > /dev/null 2>&1" >> $cfg_file
				echo "      sleep 1" >> $cfg_file
				echo "      $mantool -c $((1007)) -r > /dev/null 2>&1" >> $cfg_file
				echo '      if [ $(($?)) -eq $((0)) ]' >> $cfg_file
				echo '      then' >> $cfg_file
				echo '        softip_stack_started=1' >> $cfg_file
				echo "        ignore_update=\"\$ignore_update 0xc\"" >> $cfg_file
				echo '        sleep 1' >> $cfg_file
				echo "        echo OK" >> $cfg_file
				echo '      else' >> $cfg_file
				echo '        softip_stack_started=0' >> $cfg_file
				echo "        echo FAILED" >> $cfg_file
				echo '      fi' >> $cfg_file
				echo '    else' >> $cfg_file
				echo '      echo "softIP configuration is invalid, please check your configuration!"' >> $cfg_file
				echo '      logger -is "softIP configuration is invalid, please check your configuration!"' >> $cfg_file
				echo '    fi' >> $cfg_file
				echo '  fi' >> $cfg_file
				echo 'fi' >> $cfg_file
			fi
		fi

		if [ $((sipcontrol_present)) -gt 0 ]
		then
			if [ $((StartDivaSIPcontrol)) -ne 0 ]
			then
				echo "if [ "'$((no_network)) -eq $((0))'" ]" >> $cfg_file
				echo "then" >> $cfg_file
				echo '  sipcontrol_started=0' >> $cfg_file
				echo "  $mantool -c $((1005)) -r > /dev/null 2>&1" >> $cfg_file
				echo '  if [ $(($?)) -eq $((0)) ]' >> $cfg_file
				echo '  then' >> $cfg_file
				echo '    sipcontrol_bin=$(ps -eo "%c" | grep sipcontrol_)' >> $cfg_file
				echo '    if [ $((component_restart)) -eq $((1005)) -o "$sipcontrol_bin" != "'"${DivaSIPcontrol_bin}"'" ]' >> $cfg_file
				echo '    then' >> $cfg_file
				echo '      if [ $(($?)) -eq $((0)) ]' >> $cfg_file
				echo '      then' >> $cfg_file
				echo "        echo -e \"Stopping Diva SIPcontrol ... \\c\"" >> $cfg_file
				echo '        divas_wait_process "$sipcontrol_bin"' >> $cfg_file
				echo "        echo OK" >> $cfg_file
				echo '      fi' >> $cfg_file
				echo '      sipcontrol_started=0' >> $cfg_file
				echo '    else' >> $cfg_file
				echo '      sipcontrol_started=1' >> $cfg_file
				echo '    fi' >> $cfg_file
				echo '  fi' >> $cfg_file
	        	        echo '  if [ $((sipcontrol_started)) -eq $((0)) ]' >> $cfg_file
		                echo '  then' >> $cfg_file
				echo "    echo -e \"Start Diva SIPcontrol ... \\c\"" >> $cfg_file
				echo "    sleep 1" >> $cfg_file
				echo "    ${diva_sipcontrol_dir}${DivaSIPcontrol_bin} > /dev/null 2>&1" >> $cfg_file
				echo "    sleep 1" >> $cfg_file
				echo "    $mantool -c $((1005)) -r > /dev/null 2>&1" >> $cfg_file
				echo '    if [ $(($?)) -eq $((0)) ]' >> $cfg_file
				echo '    then' >> $cfg_file
				echo '      sipcontrol_started=1' >> $cfg_file
				echo "      ignore_update=\"\$ignore_update 0xd\"" >> $cfg_file
				echo '      sleep 1' >> $cfg_file
				echo "      echo OK" >> $cfg_file
				echo '    else' >> $cfg_file
				echo '      sipcontrol_started=0' >> $cfg_file
				echo "      echo FAILED" >> $cfg_file
				echo '    fi' >> $cfg_file
				echo '  fi' >> $cfg_file
				echo 'fi' >> $cfg_file
			fi
		fi
	else
		if [ $((StartDivaSoftIP)) -gt 0 ]
		then
			echo "    echo -e \"Warning: Diva softIP requires Kernel >= 2.6.9 to start\"" >> $cfg_file
		fi
		if [ $((StartDivaSIPcontrol)) -gt 0 ]
		then
			echo "    echo -e \"Warning: Diva SIPcontrol requires Kernel >= 2.6.9 to start\"" >> $cfg_file
		fi
	fi

	echo "" >> $cfg_file
	echo 'gcd_pid=$(($(pidof gcd)))' >> $cfg_file
	if [ $((StartCtransferOn)) -ne 0 ]
	then
		echo 'if [ $((gcd_pid)) -eq 0 ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo "echo -e \"Start Global Call Detection ... \\c\"" >> $cfg_file
		echo "${diva_dir}gcd > /dev/null 2>&1" >> $cfg_file
	 	echo 'if [ $(($?)) -eq 0 ]' >> $cfg_file
	 	echo 'then' >> $cfg_file
	 	echo "  echo OK" >> $cfg_file
	 	echo 'else' >> $cfg_file
	 	echo "  echo FAILED" >> $cfg_file
	 	echo 'fi' >> $cfg_file
	 	echo 'fi' >> $cfg_file
	else
		echo 'if [ $((gcd_pid)) -ne 0 ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo "  echo -e \"Stopping Global Call Detection ... \\c\"" >> $cfg_file
		echo "  divas_wait_process \"gcd\"" >> $cfg_file
		echo "  echo OK" >> $cfg_file
		echo 'fi' >> $cfg_file
	fi
	echo "" >> $cfg_file

	if [ $((StartTTY)) -ne 0 ]
	then
		echo 'grep "^Divatty" /proc/modules > /dev/null 2>&1' >> $cfg_file
		echo 'if [ $(($?)) -ne 0 ]' >> $cfg_file
		echo 'then' >> $cfg_file
		echo '  adapter_found=0' >> $cfg_file
		echo '  export IFS=","' >> $cfg_file
		echo '  for i in $('"${diva_dir}"'divactrl mantool -L | sed -e "s/^.*{//" -e "s/}$//" )' >> $cfg_file
		echo '  do' >> $cfg_file
		echo '    if [ $(($i)) -lt $((200)) ]' >> $cfg_file
		echo '    then' >> $cfg_file
		echo '      adapter_found=1' >> $cfg_file
		echo '    fi' >> $cfg_file
		echo '  done' >> $cfg_file
		echo '  if [ $(($adapter_found)) -ne $((0)) ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo "  echo -e \"Load Diva TTY  driver ... \\c\"" >> $cfg_file
		echo "  failed_driver=TTY" >> $cfg_file
		tty_load_options=""
		num_tty_load_options=0
		if [ $((GlobalFaxClass2OptionsSEP)) -gt $((0)) ]
		then
			num_tty_load_options=4
		fi
		if [ $((GlobalFaxClass2OptionsV34Rate)) -gt $((0)) ]
		then
			num_tty_load_options=$(($num_tty_load_options+8))
		fi
		if [ $((GlobalFaxClass2OptionsHiRes)) -gt $((0)) ]
		then
			num_tty_load_options=$(($num_tty_load_options+16))
		fi
		if [ $((GlobalFaxClass2Options)) -gt $((0)) ]
    then
			num_tty_load_options=$(($num_tty_load_options+$GlobalFaxClass2Options))
    fi
		if [ $((num_tty_load_options)) -gt $((0)) ]
    then
			tty_load_options="global_options=$((num_tty_load_options))"
    fi
		if [ ! -z ${GlobalTTYATInit} ]
    then
			tty_load_options="${tty_load_options} diva_tty_init=\"${GlobalTTYATInit}\""
    fi
		if [ $((opendiva)) -eq 1 ]
		then
			echo "  ${driver_load} Divatty $tty_load_options > /dev/null 2>&1" >> $cfg_file
		else
			echo "  ${driver_load} ${diva_dir}Divatty${driver_suffix} $tty_load_options > /dev/null 2>&1" >> $cfg_file
		fi
		echo "  if [ \$((\$?)) -ne 0 ]" >> $cfg_file
		echo "  then" >> $cfg_file
		echo "    diva_print_sw_failed" >> $cfg_file
		echo "    ${diva_dir}divas_stop.rc" >> $cfg_file
		echo "    exit 1" >> $cfg_file
		echo "  fi" >> $cfg_file
    echo "  echo OK" >> $cfg_file
		echo "  fi" >> $cfg_file
		echo 'fi' >> $cfg_file
		echo "" >> $cfg_file
		echo "#" >> $cfg_file
		echo "# Create device nodes" >> $cfg_file
		echo "nr=1" >> $cfg_file
		echo 'while [ $((nr)) -le 9 -a $((nr)) -le '"$((total_channels))"' ]' >> $cfg_file
		echo "do" >> $cfg_file
		echo '	if [ ! -e "/dev/ttyds0$((nr))" ]' >> $cfg_file
		echo "	then" >> $cfg_file
		echo '		ln -s /dev/ttyds$((nr)) /dev/ttyds0$((nr)) > /dev/null 2>&1' >> $cfg_file
		echo "	fi" >> $cfg_file
		echo '  nr=$(($nr+1))'>> $cfg_file
		echo "done" >> $cfg_file
		echo ""     >> $cfg_file

	fi

	if [ -x ${diva_dir}divalogd ]
	then
		echo 'divalogd_pid=$(pidof divalogd 2>/dev/null)' >> $cfg_file
		echo 'if [ $((divalogd_pid)) -ne $((0)) ]' >> $cfg_file
		echo "then" >> $cfg_file
		echo '  ps x | grep divalogd | grep -v grep | grep logfile_path=$ > /dev/null 2>&1' >> $cfg_file
		echo '  if [ $? -ne '"$((StartDivalogd))"' ]' >> $cfg_file
		echo '  then' >> $cfg_file
		echo '    divas_wait_process divalogd' >> $cfg_file
		echo '    divalogd_pid=0' >> $cfg_file
		echo '  fi' >> $cfg_file
		echo "fi" >> $cfg_file
		if [ $((StartDivalogd)) -eq 1 ]
		then
			echo 'if [ $((divalogd_pid)) -eq $((0)) ]' >> $cfg_file
			echo "then" >> $cfg_file
			echo "  echo -e \"Initialize Diva call history / Diva registry \\c\"" >> $cfg_file
			echo "  ${diva_dir}divalogd" >> $cfg_file
			echo '  if [ $(($?)) -eq $((0)) ]' >> $cfg_file
			echo '  then' >> $cfg_file
			echo '    registry_init_wait_to=15' >> $cfg_file
			echo '    while [ ! -d "'${diva_dir}'registry/ifc" -a $((registry_init_wait_to)) -gt 0 ]' >> $cfg_file
			echo '    do' >> $cfg_file
			echo '      sleep 1' >> $cfg_file
			echo '      echo -e ".\c"' >> $cfg_file
			echo '      registry_init_wait_to=$(($registry_init_wait_to-1))' >> $cfg_file
			echo '    done' >> $cfg_file
			echo '    echo " OK"' >> $cfg_file
			echo "  fi" >> $cfg_file
			echo "fi" >> $cfg_file
		else
			echo 'if [ $((divalogd_pid)) -eq $((0)) ]' >> $cfg_file
			echo "then" >> $cfg_file
			echo "  echo -e \"Initialize Diva registry \\c\"" >> $cfg_file
			echo "  ${diva_dir}divalogd -logfile_path=" >> $cfg_file
			echo '  if [ $(($?)) -eq $((0)) ]' >> $cfg_file
			echo '  then' >> $cfg_file
			echo '    registry_init_wait_to=15' >> $cfg_file
			echo '    while [ ! -d "'${diva_dir}'registry/ifc" -a $((registry_init_wait_to)) -gt 0 ]' >> $cfg_file
			echo '    do' >> $cfg_file
			echo '      sleep 1' >> $cfg_file
			echo '      echo -e ".\c"' >> $cfg_file
			echo '      registry_init_wait_to=$(($registry_init_wait_to-1))' >> $cfg_file
			echo '    done' >> $cfg_file
			echo '    echo " OK"' >> $cfg_file
			echo "  fi" >> $cfg_file
			echo "fi" >> $cfg_file
		fi
	fi

	if [ $((StartDivaSnmp)) -eq 1 ]
	then
		if [ -x ${diva_dir}divasnmpx ]
		then
      echo 'divasnmp_pid=$(pidof divasnmpx 2>/dev/null)' >> $cfg_file
      echo 'if [ $((divasnmp_pid)) -eq $((0)) ]' >> $cfg_file
      echo then >> $cfg_file
				echo "  echo -e \"Activate Diva SNMP support   ... \\c\"" >> $cfg_file
				echo "  ${diva_dir}divasnmpx > /dev/null 2>&1" >> $cfg_file
        echo '  if [ $(($?)) -eq $((0)) ]' >> $cfg_file
        echo '  then' >> $cfg_file
				echo "    echo OK" >> $cfg_file
        echo '  else' >> $cfg_file
				echo "    echo FAILED" >> $cfg_file
        echo '    diva_snmp_msg="WARNING: Diva SNMP start failed, please check if SNMP agent and AgentX support are active"' >> $cfg_file
        echo '    echo' >> $cfg_file
        echo '    echo $diva_snmp_msg' >> $cfg_file
        echo '    logger -t divasnmpx $diva_snmp_msg > /dev/null 2>&1' >> $cfg_file
        echo '    echo' >> $cfg_file
        echo "  fi" >> $cfg_file
      echo fi >> $cfg_file
		fi
	else
    echo 'divasnmp_pid=$(pidof divasnmpx 2>/dev/null)' >> $cfg_file
    echo 'if [ $((divasnmp_pid)) -gt $((1)) ]' >> $cfg_file
		echo "then" >> $cfg_file
			echo "  echo -e \"Shutdown Diva SNMP support ... \\c\"" >> $cfg_file
			echo '  kill $((divasnmp_pid)) > /dev/null 2>&1' >> $cfg_file
			echo "  echo OK" >> $cfg_file
		echo "fi" >> $cfg_file
	fi

	if [ $((StartDivaSS7)) -ne 0 -a "${SS7_type}" == "normal" ]
	then
		if [ -x ${dlg_ss7_dir}gctload ]
		then
      echo 'dlg_ss7_pid=$(pidof gctload 2>/dev/null)' >> $cfg_file
      echo 'if [ $((dlg_ss7_pid)) -eq $((0)) ]' >> $cfg_file
      echo then >> $cfg_file
				echo "  echo -e \"Activate DSI SS7 for Diva  ... \\c\"" >> $cfg_file
				echo "  (cd ${dlg_ss7_dir} && ./gctload -d &) > /dev/null 2>&1" >> $cfg_file
        echo '  if [ $(($?)) -eq $((0)) ]' >> $cfg_file
        echo '  then' >> $cfg_file
				echo "    echo OK" >> $cfg_file
        echo '  else' >> $cfg_file
				echo "    echo FAILED" >> $cfg_file
        echo '    diva_ss7_msg="WARNING: DSI SS7 for Diva failed to start, please check if SS7 configuration and license is valid"' >> $cfg_file
        echo '    echo' >> $cfg_file
        echo '    echo $diva_ss7_msg' >> $cfg_file
        echo '    logger -t diva_ss7 $diva_ss7_msg > /dev/null 2>&1' >> $cfg_file
        echo '    echo' >> $cfg_file
        echo "  fi" >> $cfg_file
      echo fi >> $cfg_file
		fi
	else
    echo 'dlg_ss7_pid=$(pidof gctload 2>/dev/null)' >> $cfg_file
    echo 'if [ $((dlg_ss7_pid)) -gt $((1)) ]' >> $cfg_file
		echo "then" >> $cfg_file
			echo "  echo -e \"Shutdown DSI SS7 for Diva ... \\c\"" >> $cfg_file
			echo "  ${dlg_ss7_dir}gctload -x" >> $cfg_file
			echo "  echo OK" >> $cfg_file
		echo "fi" >> $cfg_file
	fi


	chmod 744 $cfg_file

if [ $((cfg_lib_available)) -ne $((0)) ]
then
	echo "" >> $cfg_file
	echo "# ------------------------------------------------------------------------" >> $cfg_file
	echo "" >> $cfg_file

	echo 'echo ""' >> $cfg_file
	echo 'i=1' >> $cfg_file
	echo 'while [ $((i)) -le $((diva_xdi_response_nr)) ]' >> $cfg_file
	echo 'do' >> $cfg_file

	echo '  echo "${ignore_update}" | grep "${diva_xdi_response_owner[$i]}" > /dev/null' >> $cfg_file
	echo '  if [ $(($?)) -eq $((1)) -a $((${diva_xdi_response_value[$i]})) -gt 0 ]' >> $cfg_file
	echo '  then' >> $cfg_file
	echo '   echo " Please RESTART ${diva_xdi_response_adapter_name[$i]} to activate new configuration"' >> $cfg_file
	echo '  else' >> $cfg_file
	echo '   echo "  Successfully updated configuration of ${diva_xdi_response_adapter_name[$i]}"' >> $cfg_file
	echo '  fi' >> $cfg_file

	echo 'i=$(($i+1))' >> $cfg_file
	echo 'done' >> $cfg_file
	echo 'echo ""' >> $cfg_file

	echo "" >> $cfg_file
	echo "# ------------------------------------------------------------------------" >> $cfg_file
	echo "" >> $cfg_file
fi


# -----------------------------------------
# Close CFGLib file
# -----------------------------------------
echo "</tlie>" >> ${diva_xml}
echo "" >> ${diva_xml}

#
#  Create Device Nodes
#
	create_interface_nodes
}

# --------------------------------------------------------------------
#  Append Configuration to File
# --------------------------------------------------------------------
store_card_configuration_to_file()
{
i=1

# ------------------------------------------
# Apply configuration specific values
# ------------------------------------------
if [ $((StartHMPMode)) -ne 0 ]
then
	set_system_hmp_debug_defaults
fi

echo "exit 0" >> $cfg_file
echo "" >> $cfg_file

if [ $((cfg_lib_available)) -ne $((0)) -a -s ${diva_xml} ]
then
echo "" >> $cfg_file
echo "# XML_CFG_START" >> $cfg_file
cat ${diva_xml} >> $cfg_file
echo "# XML_CFG_END" >> $cfg_file
echo "" >> $cfg_file
fi

echo "# SHELL_CFG_START" >> $cfg_file

echo CVersion=\"9.0\" >> $cfg_file
echo CStartTTY="\"$StartTTY\"" >> $cfg_file
echo CTTY_PIAFS="\"$TTY_PIAFS\"" >> $cfg_file
echo CTTY_FAX="\"$TTY_FAX\"" >> $cfg_file
echo CStartCAPI="\"$StartCAPI\"" >> $cfg_file
echo CStartHMPMode="\"$StartHMPMode\"" >> $cfg_file
echo CStartDivaSIPcontrol="\"$StartDivaSIPcontrol\"" >> $cfg_file
echo CDivaSIPcontrol_bin="\"$DivaSIPcontrol_bin\"" >> $cfg_file
echo CStartDivaSS7="\"$StartDivaSS7\"" >> $cfg_file
echo CSS7_type="\"$SS7_type\"" >> $cfg_file
echo CStartDivaSoftIP="\"$StartDivaSoftIP\"" >> $cfg_file
echo CGlobalFaxClass2Options="\"$GlobalFaxClass2Options\"" >> $cfg_file
echo CGlobalFaxClass2OptionsSEP="\"$GlobalFaxClass2OptionsSEP\"" >> $cfg_file
echo CGlobalFaxClass2OptionsV34Rate="\"$GlobalFaxClass2OptionsV34Rate\"" >> $cfg_file
echo CGlobalFaxClass2OptionsHiRes="\"$GlobalFaxClass2OptionsHiRes\"" >> $cfg_file
echo CGlobalTTYATInit="\"${GlobalTTYATInit}\"" >> $cfg_file
echo CGlobalCapiGO="\"${GlobalCapiGO}\"" >> $cfg_file
echo CGlobalCallRateLimit="\"${GlobalCallRateLimit}\"" >> $cfg_file
echo CVerifyCardSerialNumber="\"$VerifyCardSerialNumber\"" >> $cfg_file
echo CLoadInDebugMode="\"$LoadInDebugMode\"" >> $cfg_file
echo CForceDriverLoad="\"$ForceDriverLoad\"" >> $cfg_file
echo CStartDivalogd="\"$StartDivalogd\"" >> $cfg_file
echo CStartDivaSnmp="\"$StartDivaSnmp\"" >> $cfg_file

# ----------------------------------------------------------------------
# Debug and Trace
# ----------------------------------------------------------------------
echo CDebugTraceProfile="\"$DebugTraceProfile\"" >> $cfg_file
echo CDebugTraceADAPTER="\"$DebugTraceADAPTER\"" >> $cfg_file
echo CDebugTraceADAPTERLayer1="\"$DebugTraceADAPTERLayer1\"" >> $cfg_file
echo CDebugTraceADAPTERRBS="\"$DebugTraceADAPTERRBS\"" >> $cfg_file
echo CDebugTraceADAPTERRTP="\"$DebugTraceADAPTERRTP\"" >> $cfg_file
echo CDebugTraceSoftIPRTP="\"$DebugTraceSoftIPRTP\"" >> $cfg_file
echo CDebugTraceSoftIP="\"$DebugTraceSoftIP\"" >> $cfg_file
echo CDebugTraceSIP="\"$DebugTraceSIP\"" >> $cfg_file
echo CDebugTraceXDI="\"$DebugTraceXDI\"" >> $cfg_file
echo CDebugTraceMTPX="\"$DebugTraceMTPX\"" >> $cfg_file
echo CDebugTraceCAPI="\"$DebugTraceCAPI\"" >> $cfg_file
echo CDebugTraceTTY="\"$DebugTraceTTY\"" >> $cfg_file
echo CDebugTraceSS7_MTP3="\"$DebugTraceSS7_MTP3\"" >> $cfg_file
echo CDebugTraceSS7_ISUP="\"$DebugTraceSS7_ISUP\"" >> $cfg_file

# ----------------------------------------------------------------------

echo CTraceDecodeAll="\"$CTraceDecodeAll\"" >> $cfg_file
echo CTraceDecodePPP="\"$CTraceDecodePPP\"" >> $cfg_file
echo CTraceDecodeVSIG="\"$CTraceDecodeVSIG\"" >> $cfg_file
cur_trace_drv=0
while [ $((cur_trace_drv)) -le $((32)) ]
do
  echo "CTraceDecodeS[$cur_trace_drv]=\"${CTraceDecodeS[$cur_trace_drv]}\"" >> $cfg_file
  cur_trace_drv=$(($cur_trace_drv+1))
done
echo CTraceDecodeChannel="\"$CTraceDecodeChannel\"" >> $cfg_file



echo CDivaMtpxMode="\"$DivaMtpxMode\"" >> $cfg_file
echo CStartOnBoot="\"$StartOnBoot\"" >> $cfg_file
echo CDivaTTYWaitCause="\"$DivaTTYWaitCause\"" >> $cfg_file
echo CDivaTTYIgnoreNumberType="\"$DivaTTYIgnoreNumberType\"" >> $cfg_file
echo CDivaTTYNoCarrier="\"$DivaTTYNoCarrier\"" >> $cfg_file

echo CGlobalPiafsRTF="\"$GlobalPiafsRTF\"" >> $cfg_file
echo CMtpxOn="\"$MtpxOn\"" >> $cfg_file

echo CSDKLogFilename="\"$SDKLogFilename\"" >> $cfg_file
echo CSDKLogFormat="\"$SDKLogFormat\""     >> $cfg_file
echo CSDKLogLevel="\"$SDKLogLevel\""       >> $cfg_file

echo CSysLIFixPCIBus="\"$SysLIFixPCIBus\"" >> $cfg_file
echo CSysRebootOnError="\"$SysRebootOnError\"" >> $cfg_file
echo CLoadMaintOn="\"$LoadMaintOn\"" >> $cfg_file
echo CStartCtransferOn="\"$StartCtransferOn\"" >> $cfg_file
echo CSysCAPIIrq="\"$SysCAPIIrq\"" >> $cfg_file
echo CSysMSIIrq="\"$SysMSIIrq\"" >> $cfg_file

echo CHSIPORT="\"$HSIPORT\"" >> $cfg_file

if [ $((sipcontrol_present)) -ne $((0)) ]
then
	echo 'CSIPCONTROL_CONFIG='\"${SIPCONTROL_CONFIG}\" >> $cfg_file
fi

max_mtpx=101
mtpx[101]=0

while [ $((${CardSN[$i]})) -gt 0 ]
do

echo "CCardSUBADAPTER[$i]=\"${CardSUBADAPTER[$i]}\"" >> $cfg_file
echo "CCardVISUALNAME[$i]=\"${CardVISUALNAME[$i]}\"" >> $cfg_file
echo "CCardNAME[$i]=\"${CardNAME[$i]}\"" >> $cfg_file
echo "CCardSN[$i]=\"${CardSN[$i]}\"" >> $cfg_file
echo "CCardPORT[$i]=\"${CardPORT[$i]}\"" >> $cfg_file
echo "CCard_FROZEN[$i]=\"${Card_FROZEN[$i]}\"" >> $cfg_file
echo "CCard_FROZEN2[$i]=\"${Card_FROZEN2[$i]}\"" >> $cfg_file
echo "CCardBoardReset[$i]=\"${CardBoardReset[$i]}\"" >> $cfg_file
echo "CCard_ANALOG[$i]=\"${Card_ANALOG[$i]}\"" >> $cfg_file
echo "CCardPROT[$i]=\"${CardPROT[$i]}\"" >> $cfg_file
echo "CCardNT2[$i]=\"${CardNT2[$i]}\"" >> $cfg_file
echo "CCard_ResourceBoard[$i]=\"${Card_ResourceBoard[$i]}\"" >> $cfg_file
echo "CCardDIDLEN[$i]=\"${CardDIDLEN[$i]}\"" >> $cfg_file
echo "CCardSPECIAL[$i]=\"${CardSPECIAL[$i]}\"" >> $cfg_file
echo "CCardDidTimeout[$i]=\"${CardDidTimeout[$i]}\"" >> $cfg_file
echo "CCardNT[$i]=\"${CardNT[$i]}\"" >> $cfg_file
echo "CCard_SYNC_MODE[$i]=\"${Card_SYNC_MODE[$i]}\"" >> $cfg_file
echo "CCard_SYNC_PORT[$i]=\"${Card_SYNC_PORT[$i]}\"" >> $cfg_file
echo "CCard_SYNC_CAPABLE[$i]=\"${Card_SYNC_CAPABLE[$i]}\"" >> $cfg_file
echo "CCard_HSI_CLOCK[$i]=\"${Card_HSI_CLOCK[$i]}\"" >> $cfg_file
echo "CCardBRI_LK[$i]=\"${CardBRI_LK[$i]}\"" >> $cfg_file
echo "CCardCRC[$i]=\"${CardCRC[$i]}\"" >> $cfg_file
echo "CCardL2[$i]=\"${CardL2[$i]}\"" >> $cfg_file
echo "CCardL2_CHANGED[$i]=\"${CardL2_CHANGED[$i]}\"" >> $cfg_file
echo "CCardLAW[$i]=\"${CardLAW[$i]}\"" >> $cfg_file
echo "CCardFL[$i]=\"${CardFL[$i]}\"" >> $cfg_file
echo "CCardFL_LEN[$i]=\"${CardFL_LEN[$i]}\"" >> $cfg_file
echo "CCardSTEI[$i]=\"${CardSTEI[$i]}\"" >> $cfg_file
echo "CCardNTEI[$i]=\"${CardNTEI[$i]}\"" >> $cfg_file
echo "CCardP2P[$i]=\"${CardP2P[$i]}\"" >> $cfg_file
echo "CCardLTONE[$i]=\"${CardLTONE[$i]}\"" >> $cfg_file
echo "CCardFAX_FINE[$i]=\"${CardFAX_FINE[$i]}\"" >> $cfg_file
echo "CCardFAX_ECM[$i]=\"${CardFAX_ECM[$i]}\"" >> $cfg_file
echo "CCardFAX_E64B[$i]=\"${CardFAX_E64B[$i]}\"" >> $cfg_file
echo "CCardFAX_C2D[$i]=\"${CardFAX_C2D[$i]}\"" >> $cfg_file
echo "CCardFAX_CT6[$i]=\"${CardFAX_CT6[$i]}\"" >> $cfg_file
echo "CCardFAX_DUC[$i]=\"${CardFAX_DUC[$i]}\"" >> $cfg_file
echo "CCardFAX_NPL[$i]=\"${CardFAX_NPL[$i]}\"" >> $cfg_file
echo "CCardFAX_HTL[$i]=\"${CardFAX_HTL[$i]}\"" >> $cfg_file
echo "CCardFAX_HHL[$i]=\"${CardFAX_HHL[$i]}\"" >> $cfg_file
echo "CCardFAX_HPI[$i]=\"${CardFAX_HPI[$i]}\"" >> $cfg_file
echo "CCardFAX_DFB[$i]=\"${CardFAX_DFB[$i]}\"" >> $cfg_file
echo "CCardFAX_SPEED[$i]=\"${CardFAX_SPEED[$i]}\"" >> $cfg_file
echo "CCardMIN_FAX_SPEED[$i]=\"$((${CardMIN_FAX_SPEED[$i]}))\"" >> $cfg_file
echo "CCard_FAX_MAX_OVERHEAD[$i]=\"$((${Card_FAX_MAX_OVERHEAD[$i]}))\"" >> $cfg_file
echo "CCardRBS_RXTO[$i]=\"${CardRBS_RXTO[$i]}\"" >> $cfg_file
echo "CCardRBS_GLARE[$i]=\"${CardRBS_GLARE[$i]}\"" >> $cfg_file
echo "CCardRBS_BC[$i]=\"${CardRBS_BC[$i]}\"" >> $cfg_file
echo "CCard_CAS_DEBUG_LEVEL[$i]=\"${Card_CAS_DEBUG_LEVEL[$i]}\"" >> $cfg_file
echo "CCardDIAL_PAUSE_CHAR[$i]=\"${CardDIAL_PAUSE_CHAR[$i]}\"" >> $cfg_file
echo "CCardDIAL_DONTWAITTONE_CHAR[$i]=\"${CardDIAL_DONTWAITTONE_CHAR[$i]}\"" >> $cfg_file
echo "CCardDIAL_WAITTONE_CHAR[$i]=\"${CardDIAL_WAITTONE_CHAR[$i]}\"" >> $cfg_file
echo "CCardDIAL_FLASH_CHAR[$i]=\"${CardDIAL_FLASH_CHAR[$i]}\"" >> $cfg_file
echo "CCardRBS_ANSWTO[$i]=\"${CardRBS_ANSWTO[$i]}\"" >> $cfg_file
echo "CCardRBS_TRUNK[$i]=\"${CardRBS_TRUNK[$i]}\"" >> $cfg_file
echo "CCardRBS_OFFICE[$i]=\"${CardRBS_OFFICE[$i]}\"" >> $cfg_file
echo "CCardRBS_AS[$i]=\"${CardRBS_AS[$i]}\"" >> $cfg_file
echo "CCardRBS_DIAL[$i]=\"${CardRBS_DIAL[$i]}\"" >> $cfg_file
echo "CCardRBS_DODIAL[$i]=\"${CardRBS_DODIAL[$i]}\"" >> $cfg_file
echo "CCardAUTO_SPID_DISABLE[$i]=\"${CardAUTO_SPID_DISABLE[$i]}\"" >> $cfg_file
echo "CCardALWAYS_RING_VOICE[$i]=\"${CardALWAYS_RING_VOICE[$i]}\"" >> $cfg_file
echo "CCardSPID1[$i]=\"${CardSPID1[$i]}\"" >> $cfg_file
echo "CCardSPID1MSN[$i]=\"${CardSPID1MSN[$i]}\"" >> $cfg_file
echo "CCardSPID2[$i]=\"${CardSPID2[$i]}\"" >> $cfg_file
echo "CCardSPID2MSN[$i]=\"${CardSPID2MSN[$i]}\"" >> $cfg_file
echo "CCardUS_EKTS_N_CACH_HANDLES[$i]=\"${CardUS_EKTS_N_CACH_HANDLES[$i]}\"" >> $cfg_file
echo "CCardUS_EKTS_BEGIN_CONF[$i]=\"${CardUS_EKTS_BEGIN_CONF[$i]}\"" >> $cfg_file
echo "CCardUS_EKTS_DROP_CONF[$i]=\"${CardUS_EKTS_DROP_CONF[$i]}\"" >> $cfg_file
echo "CCardUS_EKTS_CALL_TRANSFER[$i]=\"${CardUS_EKTS_CALL_TRANSFER[$i]}\"" >> $cfg_file
echo "CCardUS_EKTS_MWI[$i]=\"${CardUS_EKTS_MWI[$i]}\"" >> $cfg_file
echo "CCardQSIG_DIALECT[$i]=\"${CardQSIG_DIALECT[$i]}\"" >> $cfg_file
echo "CCardQSIG_PBX[$i]=\"${CardQSIG_PBX[$i]}\"" >> $cfg_file
echo "CCardQSIG_CHI[$i]=\"${CardQSIG_CHI[$i]}\"" >> $cfg_file
echo "CCardQSIG_CHFMT[$i]=\"${CardQSIG_CHFMT[$i]}\"" >> $cfg_file
echo "CCardQSIG_REROUTING[$i]=\"${CardQSIG_REROUTING[$i]}\"" >> $cfg_file
echo "CCardQSIG_CHARGE_DISABLED[$i]=\"${CardQSIG_CHARGE_DISABLED[$i]}\"" >> $cfg_file
echo "CCardQSIG_CHARGE_INSETUP[$i]=\"${CardQSIG_CHARGE_INSETUP[$i]}\"" >> $cfg_file
echo "CCardQSIG_CHARGE_NORATE[$i]=\"${CardQSIG_CHARGE_NORATE[$i]}\"" >> $cfg_file
echo "CCardQSIG_CHARGE_NOINTERIM[$i]=\"${CardQSIG_CHARGE_NOINTERIM[$i]}\"" >> $cfg_file
echo "CCardQSIG_CHARGE_NOFINAL[$i]=\"${CardQSIG_CHARGE_NOFINAL[$i]}\"" >> $cfg_file
echo "CCardQSIG_PR_INVITE[$i]=\"${CardQSIG_PR_INVITE[$i]}\"" >> $cfg_file
echo "CCardQSIG_NO_REROUTING[$i]=\"${CardQSIG_NO_REROUTING[$i]}\"" >> $cfg_file
echo "CCardQSIG_TRANSPARENT_FAC[$i]=\"${CardQSIG_TRANSPARENT_FAC[$i]}\"" >> $cfg_file
echo "CCardQSIG_TSC_CONN[$i]=\"${CardQSIG_TSC_CONN[$i]}\"" >> $cfg_file
echo "CCardQSIG_TAKELASTRDN[$i]=\"${CardQSIG_TAKELASTRDN[$i]}\"" >> $cfg_file
echo "CCardBRI_REV[$i]=\"${CardBRI_REV[$i]}\"" >> $cfg_file
echo "CCardR2_CTRYLEN[$i]=\"${CardR2_CTRYLEN[$i]}\"" >> $cfg_file
echo "CCardR2_NOCLI[$i]=\"${CardR2_NOCLI[$i]}\"" >> $cfg_file
echo "CCardR2_AUTOALERT[$i]=\"${CardR2_AUTOALERT[$i]}\"" >> $cfg_file
echo "CCard_MADAPTER[$i]=\"${Card_MADAPTER[$i]}\"" >> $cfg_file

while [ $((${Card_MADAPTER[$i]})) -gt $(($max_mtpx)) ]
do
  max_mtpx=$(($max_mtpx+1))
  mtpx[$(($max_mtpx))]=0
done
mtpx[$((${Card_MADAPTER[$i]}))]=$((mtpx[$((${Card_MADAPTER[$i]}))]+1))

echo "CCard_DISABLE_PART68[$i]=\"${Card_DISABLE_PART68[$i]}\"" >> $cfg_file
echo "CCard_DISABLE_4BRIFPGA[$i]=\"${Card_DISABLE_4BRIFPGA[$i]}\"" >> $cfg_file
echo "CCard_ANIDNI_1_TYPE[$i]=\"${Card_ANIDNI_1_TYPE[$i]}\"" >> $cfg_file
echo "CCard_ANIDNI_2_TYPE[$i]=\"${Card_ANIDNI_2_TYPE[$i]}\"" >> $cfg_file
echo "CCard_ANIDNI_3_TYPE[$i]=\"${Card_ANIDNI_3_TYPE[$i]}\"" >> $cfg_file
echo "CCard_ANIDNI_1_ON[$i]=\"${Card_ANIDNI_1_ON[$i]}\"" >> $cfg_file
echo "CCard_ANIDNI_2_ON[$i]=\"${Card_ANIDNI_2_ON[$i]}\"" >> $cfg_file
echo "CCard_ANIDNI_3_ON[$i]=\"${Card_ANIDNI_3_ON[$i]}\"" >> $cfg_file
echo "CCard_NODISCAFTERPROGRESS[$i]=\"${Card_NODISCAFTERPROGRESS[$i]}\"" >> $cfg_file
echo "CCard_ECT[$i]=\"${Card_ECT[$i]}\"" >> $cfg_file
echo "CCard_DEFLECTION[$i]=\"${Card_DEFLECTION[$i]}\"" >> $cfg_file
echo "CCard_LINKBALANCE[$i]=\"${Card_LINKBALANCE[$i]}\"" >> $cfg_file
echo "CCard_ETSI_MWI[$i]=\"${Card_ETSI_MWI[$i]}\"" >> $cfg_file
echo "CCard_ADDMISSINGRDN[$i]=\"${Card_ADDMISSINGRDN[$i]}\"" >> $cfg_file
echo "CCard_TX_ATTENUATION[$i]=\"${Card_TX_ATTENUATION[$i]}\"" >> $cfg_file
echo "CCard_DTMF_SUPRESSION[$i]=\"${Card_DTMF_SUPRESSION[$i]}\"" >> $cfg_file
echo "CCard_EC_TAIL[$i]=\"${Card_EC_TAIL[$i]}\"" >> $cfg_file
echo "CCard_REC_AGC[$i]=\"${Card_REC_AGC[$i]}\"" >> $cfg_file
echo "CCard_DTMF_COLLECT[$i]=\"${Card_DTMF_COLLECT[$i]}\"" >> $cfg_file
echo "CCard_RBS_SILENCE_TIMEOUT[$i]=\"${Card_RBS_SILENCE_TIMEOUT[$i]}\"" >> $cfg_file
echo "CCard_POTS_DIRECTION[$i]=\"${Card_POTS_DIRECTION[$i]}\"" >> $cfg_file
echo "CCard_POTS_CALIBRATION[$i]=\"${Card_POTS_CALIBRATION[$i]}\"" >> $cfg_file
echo "CCard_RINGSTILANSWER[$i]=\"${Card_RINGSTILANSWER[$i]}\"" >> $cfg_file
echo "CCard_POTS_PBXPARAMS[$i]=\"${Card_POTS_PBXPARAMS[$i]}\"" >> $cfg_file
echo "CCard_POTS_FLASHLEN[$i]=\"${Card_POTS_FLASHLEN[$i]}\"" >> $cfg_file
echo "CCard_POTS_CONSULT[$i]=\"${Card_POTS_CONSULT[$i]}\"" >> $cfg_file
echo "CCard_POTS_TRANSFER[$i]=\"${Card_POTS_TRANSFER[$i]}\"" >> $cfg_file
echo "CCard_POTS_SWAPHOLD[$i]=\"${Card_POTS_SWAPHOLD[$i]}\"" >> $cfg_file
echo "CCard_POTS_DISCACTIVCALL[$i]=\"${Card_POTS_DISCACTIVCALL[$i]}\"" >> $cfg_file
echo "CCard_POTS_DISCPASSIVCALL[$i]=\"${Card_POTS_DISCPASSIVCALL[$i]}\"" >> $cfg_file
echo "CCard_POTS_RETRIEVE_MODE[$i]=\"${Card_POTS_RETRIEVE_MODE[$i]}\"" >> $cfg_file
echo "CCard_POTS_CALLBACKTIMER[$i]=\"${Card_POTS_CALLBACKTIMER[$i]}\"" >> $cfg_file
echo "CCard_POTS_RETRIEVEHOOKOFFTIMER[$i]=\"${Card_POTS_RETRIEVEHOOKOFFTIMER[$i]}\"" >> $cfg_file
echo "CCard_POTS_CONFIGCPN[$i]=\"${Card_POTS_CONFIGCPN[$i]}\"" >> $cfg_file
echo "CCard_POTS_FLEXDTMF[$i]=\"${Card_POTS_FLEXDTMF[$i]}\"" >> $cfg_file
echo "CCard_POTS_FLEXDIRINT[$i]=\"${Card_POTS_FLEXDIRINT[$i]}\"" >> $cfg_file
echo "CCard_POTS_FLEXDIREXT[$i]=\"${Card_POTS_FLEXDIREXT[$i]}\"" >> $cfg_file
echo "CCard_POTS_FLEXDIVINT[$i]=\"${Card_POTS_FLEXDIVINT[$i]}\"" >> $cfg_file
echo "CCard_POTS_FLEXDIVEXT[$i]=\"${Card_POTS_FLEXDIVEXT[$i]}\"" >> $cfg_file
echo "CCard_POTS_FLEXDIRECT[$i]=\"${Card_POTS_FLEXDIRECT[$i]}\"" >> $cfg_file
echo "CCard_POTS_FLEXDIVERT[$i]=\"${Card_POTS_FLEXDIVERT[$i]}\"" >> $cfg_file
echo "CCard_DISABLED[$i]=\"${Card_DISABLED[$i]}\"" >> $cfg_file
echo "CCard_SIGNALING_TIMESLOTS[$i]=\"${Card_SIGNALING_TIMESLOTS[$i]}\"" >> $cfg_file

get_adapter_channel_count $i
echo "CCard_CHAN[$i]=\"$?\"" >> $cfg_file


if [ $((Card_ANALOG[$i])) -gt 0 ]
then
	j=1
	while [ $((j)) -le $((Card_ANALOG[$i])) ]
	do
		v_tmp=$((128 + $j + $i * 8))

		echo "CCardPROT[$v_tmp]=\"${CardPROT[$v_tmp]}\"" >> $cfg_file
		echo "CCardDIAL_DONTWAITTONE_CHAR[$v_tmp]=\"${CardDIAL_DONTWAITTONE_CHAR[$v_tmp]}\"" >> $cfg_file
		echo "CCardRBS_DIAL[$v_tmp]=\"${CardRBS_DIAL[$v_tmp]}\"" >> $cfg_file
		echo "CCard_RINGSTILANSWER[$v_tmp]=\"${Card_RINGSTILANSWER[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_PBXPARAMS[$v_tmp]=\"${Card_POTS_PBXPARAMS[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_FLASHLEN[$v_tmp]=\"${Card_POTS_FLASHLEN[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_CONSULT[$v_tmp]=\"${Card_POTS_CONSULT[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_SWAPHOLD[$v_tmp]=\"${Card_POTS_SWAPHOLD[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_TRANSFER[$v_tmp]=\"${Card_POTS_TRANSFER[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_DISCACTIVCALL[$v_tmp]=\"${Card_POTS_DISCACTIVCALL[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_DISCPASSIVCALL[$v_tmp]=\"${Card_POTS_DISCPASSIVCALL[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_RETRIEVE_MODE[$v_tmp]=\"${Card_POTS_RETRIEVE_MODE[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_CALLBACKTIMER[$v_tmp]=\"${Card_POTS_CALLBACKTIMER[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_RETRIEVEHOOKOFFTIMER[$v_tmp]=\"${Card_POTS_RETRIEVEHOOKOFFTIMER[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_DIRECTION[$v_tmp]=\"${Card_POTS_DIRECTION[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_CALIBRATION[$v_tmp]=\"${Card_POTS_CALIBRATION[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_CONFIGCPN[$v_tmp]=\"${Card_POTS_CONFIGCPN[$v_tmp]}\"" >> $cfg_file
		echo "CCardNT2[$v_tmp]=\"${CardNT2[$v_tmp]}\"" >> $cfg_file
		echo "CCard_DTMF_COLLECT[$v_tmp]=\"${Card_DTMF_COLLECT[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_FLEXDTMF[$v_tmp]=\"${Card_POTS_FLEXDTMF[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_FLEXDIRINT[$v_tmp]=\"${Card_POTS_FLEXDIRINT[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_FLEXDIREXT[$v_tmp]=\"${Card_POTS_FLEXDIREXT[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_FLEXDIVINT[$v_tmp]=\"${Card_POTS_FLEXDIVINT[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_FLEXDIVEXT[$v_tmp]=\"${Card_POTS_FLEXDIVEXT[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_FLEXDIRECT[$v_tmp]=\"${Card_POTS_FLEXDIRECT[$v_tmp]}\"" >> $cfg_file
		echo "CCard_POTS_FLEXDIVERT[$v_tmp]=\"${Card_POTS_FLEXDIVERT[$v_tmp]}\"" >> $cfg_file

		j=$(($j+1))
	done
fi

i=$(($i+1))

done

echo "CCardSN[$i]=\"-1\"" >> $cfg_file


echo 'CCardLAW[65]='\"$((${CardLAW[65]}))\"       >> $cfg_file
echo 'CCardNT2[65]='\"$((${CardNT2[65]}))\"       >> $cfg_file
echo 'CCardFAX_SPEED[65]='\"$((${CardFAX_SPEED[65]}))\" >> $cfg_file
echo 'CCardMIN_FAX_SPEED[65]='\"$((${CardMIN_FAX_SPEED[65]}))\" >> $cfg_file
echo 'CCard_FAX_MAX_OVERHEAD[65]='\"$((${Card_FAX_MAX_OVERHEAD[65]}))\" >> $cfg_file
echo 'CCardFAX_FINE[65]='\"$((${CardFAX_FINE[65]}))\" >> $cfg_file
echo 'CCardFAX_ECM[65]='\"$((${CardFAX_ECM[65]}))\" >> $cfg_file
echo 'CCardFAX_E64B[65]='\"$((${CardFAX_E64B[65]}))\" >> $cfg_file
echo 'CCardFAX_C2D[65]='\"$((${CardFAX_C2D[65]}))\" >> $cfg_file
echo 'CCardFAX_CT6[65]='\"$((${CardFAX_CT6[65]}))\" >> $cfg_file
echo 'CCardFAX_DUC[65]='\"$((${CardFAX_DUC[65]}))\" >> $cfg_file
echo 'CCardFAX_NPL[65]='\"$((${CardFAX_NPL[65]}))\" >> $cfg_file
echo 'CCardFAX_HTL[65]='\"$((${CardFAX_HTL[65]}))\" >> $cfg_file
echo 'CCardFAX_HHL[65]='\"$((${CardFAX_HHL[65]}))\" >> $cfg_file
echo 'CCardFAX_HPI[65]='\"$((${CardFAX_HPI[65]}))\" >> $cfg_file
echo 'CCardFAX_DFB[65]='\"$((${CardFAX_DFB[65]}))\" >> $cfg_file
echo 'CCard_DISABLE_PART68[65]='\"$((${Card_DISABLE_PART68[65]}))\" >> $cfg_file
echo 'CCard_DTMF_SUPRESSION[65]='\"$((${Card_DTMF_SUPRESSION[65]}))\" >> $cfg_file
echo 'CCard_EC_TAIL[65]='\"$((${Card_EC_TAIL[65]}))\" >> $cfg_file
echo 'CCard_REC_AGC[65]='\"$((${Card_REC_AGC[65]}))\" >> $cfg_file
echo "CCard_ADDMISSINGRDN[65]=\"${Card_ADDMISSINGRDN[65]}\"" >> $cfg_file
echo 'CSOFTIP_FROM_DISPLAYNAME='\"${SOFTIP_FROM_DISPLAYNAME}\" >> $cfg_file
echo 'CSOFTIP_FROM_ADDRESS='\"${SOFTIP_FROM_ADDRESS}\" >> $cfg_file
echo 'CSOFTIP_FROM_PORT='\"${SOFTIP_FROM_PORT}\" >> $cfg_file
echo 'CSOFTIP_REGISTRAR_ADDRESS='\"${SOFTIP_REGISTRAR_ADDRESS}\" >> $cfg_file
echo 'CSOFTIP_REGISTRAR_PORT='\"${SOFTIP_REGISTRAR_PORT}\" >> $cfg_file
echo 'CSOFTIP_PROXY_ADDRESS='\"${SOFTIP_PROXY_ADDRESS}\" >> $cfg_file
echo 'CSOFTIP_PROXY_USERNAME='\"${SOFTIP_PROXY_USERNAME}\" >> $cfg_file
echo 'CSOFTIP_PROXY_PASSWD='\"${SOFTIP_PROXY_PASSWD}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_PORT='\"${SOFTIP_MEDIA_PORT}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_TYPE='\"${SOFTIP_MEDIA_TYPE}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_NUMPORTS='\"${SOFTIP_MEDIA_NUMPORTS}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_TRANSPORT='\"${SOFTIP_MEDIA_TRANSPORT}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_TRANSTYPE='\"${SOFTIP_MEDIA_TRANSTYPE}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_CODEC='\"${SOFTIP_MEDIA_CODEC}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_ATTRIBUTE1='\"${SOFTIP_MEDIA_ATTRIBUTE1}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_ATTRIBUTE2='\"${SOFTIP_MEDIA_ATTRIBUTE2}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_ATTRIBUTE3='\"${SOFTIP_MEDIA_ATTRIBUTE3}\" >> $cfg_file
echo 'CSOFTIP_MEDIA_ATTRIBUTE4='\"${SOFTIP_MEDIA_ATTRIBUTE4}\" >> $cfg_file
echo 'CSOFTIP_SDP_ORIGIN='\"${SOFTIP_SDP_ORIGIN}\" >> $cfg_file
echo 'CSOFTIP_SDP_URI='\"${SOFTIP_SDP_URI}\" >> $cfg_file
echo 'CSOFTIP_SDP_CONNECTION='\"${SOFTIP_SDP_CONNECTION}\" >> $cfg_file
echo 'CSOFTIP_SDP_INFORMATION='\"${SOFTIP_SDP_INFORMATION}\" >> $cfg_file
echo 'CSOFTIP_SDP_SESSION='\"${SOFTIP_SDP_SESSION}\" >> $cfg_file
echo 'CSOFTIP_ALLOW1='\"${SOFTIP_ALLOW1}\" >> $cfg_file
echo 'CSOFTIP_ALLOW2='\"${SOFTIP_ALLOW2}\" >> $cfg_file
echo 'CSOFTIP_ALLOW3='\"${SOFTIP_ALLOW3}\" >> $cfg_file
echo 'CSOFTIP_RTP_START_PORT='\"${SOFTIP_RTP_START_PORT}\" >> $cfg_file
echo 'CSOFTIP_RTP_END_PORT='\"${SOFTIP_RTP_END_PORT}\" >> $cfg_file


i=65

while [ $((${CardSN[$i]})) -eq 0 ]
do
	echo "CCardSN[$i]=\"0\"" >> $cfg_file
	echo 'CCard_MADAPTER['$((i))']='\"$((${Card_MADAPTER[$((i))]}))\" >> $cfg_file

	while [ $((${Card_MADAPTER[$i]})) -gt $(($max_mtpx)) ]
	do
	  max_mtpx=$(($max_mtpx+1))
	  mtpx[$(($max_mtpx))]=0
	done
	mtpx[$((${Card_MADAPTER[$i]}))]=$((mtpx[$((${Card_MADAPTER[$i]}))]+1))

	get_adapter_channel_count $i
	echo "CCard_CHAN[$i]=\"$?\"" >> $cfg_file

	i=$(($i+1))
done

echo "CCardSN[$i]=\"-1\"" >> $cfg_file

cur_mtpx=101
while [ $(($cur_mtpx)) -le $(($max_mtpx)) ]
do
	if [ $((mtpx[$(($cur_mtpx))])) -gt $((0)) ]
	then
		echo "CMTPX_ECT[$(($cur_mtpx))]=\"$((${MTPX_ECT[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_HI[$(($cur_mtpx))]=\"$((${MTPX_HI[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_EC[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_EC[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_RTP[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_RTP[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_FAX[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_FAX[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_FAXTIME[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_FAXTIME[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_CONTEXT[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_CONTEXT[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_HOLD[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_HOLD[$(($cur_mtpx))]}))\"" >> $cfg_file

		if [ $((${MTPX_CHANCAPI_GRP[$(($cur_mtpx))]})) -eq 0 ]
		then
			MTPX_CHANCAPI_GRP[$(($cur_mtpx))]="1"
		fi
		echo "CMTPX_CHANCAPI_GRP[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_GRP[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_CGRP[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_CGRP[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_PGRP[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_PGRP[$(($cur_mtpx))]}))\"" >> $cfg_file
		echo "CMTPX_CHANCAPI_TGRP[$(($cur_mtpx))]=\"$((${MTPX_CHANCAPI_TGRP[$(($cur_mtpx))]}))\"" >> $cfg_file
	fi
	cur_mtpx=$(($cur_mtpx+1))
done
get_resourceboard_channels
echo "CResourceBoardChannels=\"$?\"" >> $cfg_file


DebugTraceDVSCC="0x0"
DebugTraceDVSCC_OWNER="0"
DebugTraceSSDD="0x0"
DebugTraceSSDD_OWNER="0"

check_args()
{
    while [ -n "$1" ]
    do
    if [ ${1:0:2} == "-d" ]
    then
      dbgmask=$(echo $1 | sed -e "s/-d//")
      if [ -z "${dbgmask}" ]
      then
        dbgmask="0x07"
      fi
    fi
    shift
    done
}

write_dvscc_divas_cfg()
{
	testarg=$(grep -v "^*" ${system_file} 2>&1  | grep FORK_PR | grep dvscc | sed -e 's/\*.*//')
	check_args $testarg
 	if [ -z "$dbgmask" ]
	then
          dbgmask="0x07"
	fi
	sed -e "s|^CDebugTraceDVSCC.*|CDebugTraceDVSCC\=\"$dbgmask\"|" ${diva_dir}divas_cfg.rc > divas_cfg.rc.Trace.$$ 2>&1
	DebugTraceDVSCC=$dbgmask
	if [ $(($?)) -eq 0 ]
	then
		cp -f divas_cfg.rc.Trace.$$ ${diva_dir}divas_cfg.rc > /dev/null 2>&1
	fi
	rm -f divas_cfg.rc.Trace.$$
}

write_ssdd_divas_cfg()
{
	testarg=$(grep -v "^*" ${system_file} 2>&1 | grep FORK_PR | grep ssdd | sed -e 's/\*.*//')
	check_args $testarg
 	if [ -z "$dbgmask" ]
	then
          dbgmask="0x07"
	fi
	sed -e "s|^CDebugTraceSSDD.*|CDebugTraceSSDD\=\"$dbgmask\"|" ${diva_dir}divas_cfg.rc > divas_cfg.rc.Trace.$$ 2>&1
	DebugTraceSSDD=$dbgmask
	if [ $(($?)) -eq 0 ]
	then
		cp -f divas_cfg.rc.Trace.$$ ${diva_dir}divas_cfg.rc > /dev/null 2>&1
	fi
	rm -f divas_cfg.rc.Trace.$$
}

write_ssdd_system_txt()
{ 
	eval $( sed -ne"/SHELL_CFG_START/,/SHELL_CFG_END/p;" ${diva_dir}divas_cfg.rc 2>/dev/null | grep CDebugTraceSSDD )
	testarg=$(grep -v "^*" ${system_file} 2>&1 | grep FORK_PR | grep ssdd | sed -e 's/\*.*//')
	echo $testarg > tmp.trace.$$
	check_args $testarg
	DebugTraceSSDD=$(printf "0x%x" $CDebugTraceSSDD)
	if [ -z "$dbgmask" ]
	then
	  sed -e "s/ssdd/ssdd -d$DebugTraceSSDD /" tmp.trace.$$ >  tmp1.trace.$$
	else
	  sed -e "s/-d$dbgmask/-d$DebugTraceSSDD/" tmp.trace.$$ >  tmp1.trace.$$
	fi
	replstr=$(grep -v "^*" tmp1.trace.$$| grep FORK_PR | grep ssdd)
	sed -e "s?${testarg}?${replstr} ?" ${system_file} 2>&1 > system.txt.tmp.$$
	if [ $(($?)) -eq 0 ]
	then
	cp -f system.txt.tmp.$$  ${system_file} > /dev/null 2>&1
	fi
	rm -f system.txt.tmp.$$
	rm -f tmp.trace.$$ 
	rm -f tmp1.trace.$$

}

write_dvscc_system_txt()
{ 
	eval $( sed -ne"/SHELL_CFG_START/,/SHELL_CFG_END/p;" ${diva_dir}divas_cfg.rc 2>/dev/null | grep CDebugTraceDVSCC )
	testarg=$(grep -v "^*" ${system_file} 2>&1 | grep FORK_PR | grep dvscc | sed -e 's/\*.*//')
	echo $testarg > tmp.trace.$$
	check_args $testarg
	DebugTraceDVSCC=$(printf "0x%x" $CDebugTraceDVSCC)
	if [ -z "$dbgmask" ]
	then
	  sed -e "s/dvscc/dvscc -d$DebugTraceDVSCC /" tmp.trace.$$ >  tmp1.trace.$$
	else
	  sed -e "s/-d$dbgmask/-d$DebugTraceDVSCC/" tmp.trace.$$ >  tmp1.trace.$$
	fi
	replstr=$(grep -v "^*" tmp1.trace.$$| grep FORK_PR | grep dvscc)
	sed -e "s?${testarg}?${replstr} ?" ${system_file} 2>&1 > system.txt.tmp.$$
	if [ $(($?)) -eq 0 ]
	then
	cp -f system.txt.tmp.$$ ${system_file} > /dev/null 2>&1
	fi
	rm -f system.txt.tmp.$$
	rm -f tmp.trace.$$ 
	rm -f tmp1.trace.$$

}

#if [ $((StartDivaSS7)) -ne 0 ]
if [ ! -z "$system_file" ]
then
	if [  -s $system_file ]
	then
		if [ $((CDebugTraceDVSCC_OWNER)) -ne 0 ]
		then
			write_dvscc_system_txt 
			DebugTraceDVSCC=$((CDebugTraceDVSCC))
		else
			write_dvscc_divas_cfg
		fi
		if [ $((CDebugTraceSSDD_OWNER)) -ne 0 ]
		then
			write_ssdd_system_txt 
			DebugTraceSSDD=$((CDebugTraceSSDD))
		else
			write_ssdd_divas_cfg
		fi
	fi
fi

echo "CDebugTraceDVSCC=\"$((DebugTraceDVSCC))\"" >> $cfg_file
echo "CDebugTraceDVSCC_OWNER=\"0\"" >> $cfg_file
echo "CDebugTraceSSDD=\"$((DebugTraceSSDD))\"" >> $cfg_file
echo "CDebugTraceSSDD_OWNER=\"0\"" >> $cfg_file

#
# CConfigCSUM must be last variable
#
ConfigCSUM=$(sed -ne "/SHELL_CFG_START/,/SHELL_CFG_END/p;" $cfg_file 2>/dev/null | sum 2>/dev/null | sed -e "s/ //g;" -)
license_sum_1=$(cat ${diva_dir}/Config.dlg ${diva_dir}/*.lic ${diva_dir}/../diva.softip/*.lic ${diva_dir}/../diva.sipcontrol/*.lic ${diva_dir}/../divas.ss7/*.lic ${diva_instance_file} ${diva_variables_file} 2>/dev/null | sum 2>/dev/null | sed -e "s/ //g;" -)
license_sum_2=$(find ${diva_dir} -name "*.lic" -print 2>/dev/null | xargs cat 2>/dev/null | sum 2>/dev/null | sed -e "s/ //g;" -)
if [ -s $system_file ]
then
	ss7_trace_sum1=$(cat $system_file 2>&1 | grep FORK_PR | grep dvscc  2>&1 | sum 2>/dev/null | sed -e "s/ //g;" -) 
	ss7_trace_sum2=$(cat $system_file 2>&1 | grep FORK_PR | grep ssdd  2>&1 | sum 2>/dev/null | sed -e "s/ //g;" -)
else 
  ss7_trace_sum1="noss7tracesum"
  ss7_trace_sum2="noss7tracesum"
fi
echo "CConfigCSUM=\"${ConfigCSUM}${license_sum_1}${license_sum_2}${ss7_trace_sum1}${ss7_trace_sum2}\"" >> $cfg_file
echo "# SHELL_CFG_END" >> $cfg_file
mv $cfg_file ${diva_dir}divas_cfg.rc

rm -f ${diva_xml}
rm -f ${diva_xml}.capi
rm -f ${diva_xml}.mtpx
rm -f ${diva_xml}.tty

}

diva_print_cards()
{
	i=1
	while [ $((${CardSN[$i]})) -gt 0 ]
	do
		echo CARD: $((i))
		echo "     ${CardSN[$i]}"
		echo "     ${CardVISUALNAME[$i]}"
		echo "     ${CardNOTE[$i]}"
		i=$(($i+1))
	done
}

set_card_defaults()
{
	current_card_type_lk=${CardNAME[$i]}

	Card_POTS_CONFIG_BY_LINE[$current_card]=-1
	Card2M[$current_card]=0
	Card_FROZEN[$current_card]=0
	Card_FROZEN2[$current_card]=0
	Card_ANALOG[$current_card]=0

	Card_DSP_IMAGE[$current_card]=""
	Card_DSP_FAX_IMAGE[$current_card]=""
	Card_DSP_MDM_IMAGE[$current_card]=""
	Card_SDP0_IMAGE[$current_card]=""
	Card_SDP1_IMAGE[$current_card]=""
	Card_FPGA_IMAGE[$current_card]=""
	Card_PROTOCOL_SUFFIX[$current_card]=""

	CardDIAL_PAUSE_CHAR[$current_card]=","
	CardDIAL_DONTWAITTONE_CHAR[$current_card]="x"
	CardDIAL_WAITTONE_CHAR[$current_card]="w"
	CardDIAL_FLASH_CHAR[$current_card]="!"
	Card_CAS_DEBUG_LEVEL[$current_card]=$((0x3))
	Card_SINGLE_IMAGE[$current_card]=0
	Card_ResourceBoard[$current_card]=0
	Card_HOST_VIDI[$current_card]=0
  Card_DISABLED[$current_card]=0

  Card_TYPE[$current_card]=0
  Card_BUS[$current_card]=0
  Card_HARDWARE[$current_card]=0
	Card_SOFTWARE[$current_card]=0
  Card_SOFTWARE_INTERFACE_MODULE[$current_card]=""

	Card_PARALLEL_LOAD[$current_card]=0

	Card_HSI_CLOCK[$current_card]=0

  divas_server_adapter_present=1

	case "$current_card_type_lk" in

						'80')
																				CardPRI[$current_card]=1
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardADAPTERS[$current_card]=2
																				Card_PROTOCOL_SUFFIX[$current_card]="qpm"
																				Card_DSP_IMAGE[$current_card]="bfdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsipm300.bit"
																				Card_SINGLE_IMAGE[$current_card]=1
                                        Card_ResourceBoard[$current_card]=1
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;

						'82')
																				CardPRI[$current_card]=1
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardADAPTERS[$current_card]=4
																				Card_PROTOCOL_SUFFIX[$current_card]="qpm"
																				Card_DSP_IMAGE[$current_card]="bfdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsipm600.bit"
																				Card_SINGLE_IMAGE[$current_card]=1
                                        Card_ResourceBoard[$current_card]=1
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;

						'81'            | '85')
																				CardPRI[$current_card]=1
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=4
																				Card_PROTOCOL_SUFFIX[$current_card]="qpm"
																				Card_DSP_IMAGE[$current_card]="bfdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4pri100.bit"
																				Card_SINGLE_IMAGE[$current_card]=1
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				Card_HSI_CLOCK[$current_card]=1
																				;;

						'79'           | '83')
																				CardPRI[$current_card]=1
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=2
																				Card_PROTOCOL_SUFFIX[$current_card]="qpm"
																				Card_DSP_IMAGE[$current_card]="bfdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds2pri100.bit"
																				Card_SINGLE_IMAGE[$current_card]=1
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				Card_HSI_CLOCK[$current_card]=1
																				;;

						'111')
																				CardPRI[$current_card]=1
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=2
																				Card_PROTOCOL_SUFFIX[$current_card]="qpm"
																				Card_DSP_IMAGE[$current_card]="bfdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4pe100.bit"
																				Card_SINGLE_IMAGE[$current_card]=1
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				Card_HSI_CLOCK[$current_card]=1
																				divas_pci_e_adapter_present=1
																				;;

						'110' | '113')
																				CardPRI[$current_card]=1
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=4
																				Card_PROTOCOL_SUFFIX[$current_card]="qpm"
																				Card_DSP_IMAGE[$current_card]="bfdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4pe100.bit"
																				Card_SINGLE_IMAGE[$current_card]=1
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				Card_HSI_CLOCK[$current_card]=1
																				divas_pci_e_adapter_present=1
																				;;

						'114')
																				CardPRI[$current_card]=1
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=8
																				Card_PROTOCOL_SUFFIX[$current_card]="qpm"
																				Card_DSP_IMAGE[$current_card]="bfdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds8pesp3.bit"
																				Card_SINGLE_IMAGE[$current_card]=1
																				Card_HOST_VIDI[$current_card]=0
																				Card_PARALLEL_LOAD[$current_card]=1
																				Card_HSI_CLOCK[$current_card]=1
																				divas_pci_e_adapter_present=1
																				;;

						'112')
																				CardPRI[$current_card]=1
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="qpm"
																				Card_DSP_IMAGE[$current_card]="bfdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4pe100.bit"
																				Card_SINGLE_IMAGE[$current_card]=1
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				Card_HSI_CLOCK[$current_card]=1
																				divas_pci_e_adapter_present=1
																				;;

# -------------------------------------------------------------
# 4BRI derivates
# -------------------------------------------------------------
					  '53')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=4
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																					Card_PROTOCOL_SINGLE_IMAGE_SUFFIX[$current_card]="2q"
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4bri2.bit"
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;
		        '55')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=4
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																					Card_PROTOCOL_SINGLE_IMAGE_SUFFIX[$current_card]="2q"
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4bri2.bit"
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;
            '88')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=4
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																					Card_PROTOCOL_SINGLE_IMAGE_SUFFIX[$current_card]="2q"
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4bri2.bit"
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;
						'22')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=0
																				CardADAPTERS[$current_card]=4
																				Card_SYNC_CAPABLE[$current_card]=0
																				Card_FROZEN[$current_card]=1
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																					Card_PROTOCOL_SINGLE_IMAGE_SUFFIX[$current_card]="qm"
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="qm"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4bri.bit"
																				;;
				    '52')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardADAPTERS[$current_card]=4
																				Card_FROZEN[$current_card]=1
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																					Card_PROTOCOL_SINGLE_IMAGE_SUFFIX[$current_card]="qm"
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="qm"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="ds4bri.bit"
																				;;

# -------------------------------------------------------------
# 4BRI PCIe and derivates
# -------------------------------------------------------------
            '99' | '100')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=1
																				CardADAPTERS[$current_card]=4
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																					Card_PROTOCOL_SINGLE_IMAGE_SUFFIX[$current_card]="2q"
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="d4bripe1.bit"
																				divas_pci_e_adapter_present=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;


# -------------------------------------------------------------
# BRI PCIe derivates
# -------------------------------------------------------------
            '101' | '102')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q0"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dbripe1.bit"
																				divas_pci_e_adapter_present=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;

# -------------------------------------------------------------
# BRI derivates
# -------------------------------------------------------------
						'21')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				Card2M[$current_card]=1
																				Card_FROZEN[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="sm"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin.old"
																				Card_DSP_FAX_IMAGE[$current_card]="dspdvfax.bin"
																				Card_DSP_MDM_IMAGE[$current_card]="dspdvmdm.bin"
																				;;

					  '60')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q0"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsbri2m.bit"
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;
            '63')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q0"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsbri2m.bit"
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;
            '87')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q0"
																				fi
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsbri2m.bit"
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;
            '61')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q0"
																				fi
																				Card_SDP0_IMAGE[$current_card]="sdp0.2q0"
																				Card_SDP1_IMAGE[$current_card]="sdp1.2q0"
																				Card_FPGA_IMAGE[$current_card]="dsbri2f.bit"
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;

            '103')
																				CardPRI[$current_card]=0
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				if [ $((diva_use_reentrant)) -ne 0 ]
																				then
																					Card_PROTOCOL_SUFFIX[$current_card]="2qm"
																					Card_SINGLE_IMAGE[$current_card]=1
																				else
																					Card_PROTOCOL_SUFFIX[$current_card]="2q0"
																				fi
																				Card_FPGA_IMAGE[$current_card]="dsbri2f.bit"
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;

# -------------------------------------------------------------
# PRI derivates
# -------------------------------------------------------------
						'23')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=1
																				CardADAPTERS[$current_card]=1
																				Card_FROZEN[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="pm"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				;;
						'54')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=1
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="pm2"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FROZEN2[$current_card]=1
																				;;
				    '56')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=1
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="pm2"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FROZEN2[$current_card]=1
																				;;

# -------------------------------------------------------------
# POTS (analog)
# -------------------------------------------------------------
						'92'       | '93')
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="am"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsap2.bit"
																				Card_ANALOG[$current_card]=2
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;
						'77'       | '89')
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="am"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsap8.bit"
																				Card_ANALOG[$current_card]=4
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;
						'78'       | '90')
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="am"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsap8.bit"
																				Card_ANALOG[$current_card]=8
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;

								'104' | '105')
                                        CardNT_CAPABLE[$current_card]=0
                                        Card_SYNC_CAPABLE[$current_card]=0
                                        CardPRI[$current_card]=0
                                        CardADAPTERS[$current_card]=1
                                        Card_PROTOCOL_SUFFIX[$current_card]="am"
                                        Card_DSP_IMAGE[$current_card]="dspdload.bin"
                                        Card_FPGA_IMAGE[$current_card]="dap2pe1.bit"
                                        Card_ANALOG[$current_card]=2
																				Card_PARALLEL_LOAD[$current_card]=1
																				divas_pci_e_adapter_present=1
                                        ;;

								'106' | '107')
                                        CardNT_CAPABLE[$current_card]=0
                                        Card_SYNC_CAPABLE[$current_card]=0
                                        CardPRI[$current_card]=0
                                        CardADAPTERS[$current_card]=1
                                        Card_PROTOCOL_SUFFIX[$current_card]="am"
                                        Card_DSP_IMAGE[$current_card]="dspdload.bin"
                                        Card_FPGA_IMAGE[$current_card]="dap8pe1.bit"
                                        Card_ANALOG[$current_card]=4
																				Card_PARALLEL_LOAD[$current_card]=1
																				divas_pci_e_adapter_present=1
                                        ;;
								'108' | '109')
                                        CardNT_CAPABLE[$current_card]=0
                                        Card_SYNC_CAPABLE[$current_card]=0
                                        CardPRI[$current_card]=0
                                        CardADAPTERS[$current_card]=1
                                        Card_PROTOCOL_SUFFIX[$current_card]="am"
                                        Card_DSP_IMAGE[$current_card]="dspdload.bin"
                                        Card_FPGA_IMAGE[$current_card]="dap8pe1.bit"
                                        Card_ANALOG[$current_card]=8
																				Card_PARALLEL_LOAD[$current_card]=1
																				divas_pci_e_adapter_present=1
                                        ;;

# -------------------------------------------------------------
# PRI v.3 and derivates
# -------------------------------------------------------------

            '70' | '71' | '72' | '73' | '74' | '75' | '115' | '116')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=1
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="pm3"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dspri331.bit"
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				;;

# -------------------------------------------------------------
# PRI v.3 PCIe and derivates
# -------------------------------------------------------------
            '94'    | '95'    | '96'    | '97'    | '98'    | '117'    | '118')
																				CardNT_CAPABLE[$current_card]=1
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=1
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]="pm3"
																				Card_DSP_IMAGE[$current_card]="dspdload.bin"
																				Card_FPGA_IMAGE[$current_card]="dsprie31.bit"
																				Card_HOST_VIDI[$current_card]=1
																				Card_PARALLEL_LOAD[$current_card]=1
																				divas_pci_e_adapter_present=1
																				;;


# -------------------------------------------------------------
# Clients and derivates
# -------------------------------------------------------------
            '91')
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]=""
																				Card_DSP_IMAGE[$current_card]=""
																				Card_FPGA_IMAGE[$current_card]=""
																				Card_FPGA_IMAGE[$current_card]=""
                                        Card_TYPE[$current_card]=1
                                        Card_BUS[$current_card]=5
                                        Card_HARDWARE[$current_card]=$((0x5b))
                                        Card_HARDWARE_HOTPLUGGABLE[$current_card]="1"
																				Card_SOFTWARE[$current_card]=1
																				Card_SOFTWARE_INTERFACE_MODULE[$current_card]="diva_usb"
																				Card_SOFTWARE_INTERFACE_DEVICE[$current_card]="/dev/DivasUSB0"
																				Card_SOFTWARE_INTERFACE_DEVICE_INFO[$current_card]="/sys/class/usb/DivasUSB0/dev"
                                        ;;

            '64')
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]=""
																				Card_DSP_IMAGE[$current_card]=""
																				Card_FPGA_IMAGE[$current_card]=""
																				Card_FPGA_IMAGE[$current_card]=""
                                        Card_TYPE[$current_card]=1
                                        Card_BUS[$current_card]=3
                                        Card_HARDWARE[$current_card]=$((0x40))
                                        Card_HARDWARE_HOTPLUGGABLE[$current_card]="0"
																				Card_SOFTWARE[$current_card]=1
																				Card_SOFTWARE_INTERFACE_MODULE[$current_card]="diva_pci"
																				Card_SOFTWARE_INTERFACE_DEVICE[$current_card]="/dev/DivasPCI0"
																				Card_SOFTWARE_INTERFACE_DEVICE_INFO[$current_card]="/sys/bus/pci/drivers/diva_pci/DivasPCI0"
                                        ;;

            '58')
																				CardNT_CAPABLE[$current_card]=0
																				Card_SYNC_CAPABLE[$current_card]=0
																				CardPRI[$current_card]=0
																				CardADAPTERS[$current_card]=1
																				Card_PROTOCOL_SUFFIX[$current_card]=""
																				Card_DSP_IMAGE[$current_card]=""
																				Card_FPGA_IMAGE[$current_card]=""
																				Card_FPGA_IMAGE[$current_card]=""
                                        Card_TYPE[$current_card]=1
                                        Card_BUS[$current_card]=3
                                        Card_HARDWARE[$current_card]=$((0x3a))
                                        Card_HARDWARE_HOTPLUGGABLE[$current_card]="0"
																				Card_SOFTWARE[$current_card]=1
																				Card_SOFTWARE_INTERFACE_MODULE[$current_card]="diva_pci"
																				Card_SOFTWARE_INTERFACE_DEVICE[$current_card]="/dev/DivasPCI0"
																				Card_SOFTWARE_INTERFACE_DEVICE_INFO[$current_card]="/sys/bus/pci/drivers/diva_pci/DivasPCI0"
                                        ;;
#
# -------------------------------------------------------------
#

	esac

# New Detected card
	CardNEW_CARD[$current_card]=1

# Card configuration was changed
	CardCFG_CHANGED[$current_card]=0

# Protocol
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then #{
# --------------------------------------
#   Other Board
# --------------------------------------
    if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
    then
		  CardPROT[$current_card]=2
    else
      CardPROT[$current_card]=$((resource_board_protocol))
    fi
# --------------------------------------
	else #}{
# --------------------------------------
#   Analog Board
# --------------------------------------
		CardPROT[$current_card]=1
# --------------------------------------
	fi   #}

# NT-2
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	CardNT2[$current_card]=1
else
	CardNT2[$current_card]=0
fi
CardDIDLEN[$current_card]=0
CardSPECIAL[$current_card]=""
CardDidTimeout[$current_card]=2

# TE/NT mode
	CardNT[$current_card]=0

# Clock sync mode
	Card_SYNC_MODE[$current_card]=0

# Clock sync port
	Card_SYNC_PORT[$current_card]=0

# BRI Link (TEI) count
	CardBRI_LK[$current_card]=0

# Layer 1
	CardCRC[$current_card]=0

# Layer 2 activarion Policy
	CardL2[$current_card]=1
	CardL2_CHANGED[$current_card]=0

# Voice
	CardLAW[$current_card]=0

# Hunt Group
	CardHI[$current_card]=0

# Fractional Line
	CardFL[$current_card]=0
	CardFL_LEN[$current_card]=1

# TEI
	CardSTEI[$current_card]=0
	CardNTEI[$current_card]=0
	CardP2P[$current_card]=0

# Local Tones
	CardLTONE[$current_card]=0

	CardFAX_FINE[$current_card]=0
	CardFAX_ECM[$current_card]=0
	CardFAX_E64B[$current_card]=0
	CardFAX_C2D[$current_card]=0
	CardFAX_CT6[$current_card]=0
	CardFAX_DUC[$current_card]=0
	CardFAX_NPL[$current_card]=0
	CardFAX_HTL[$current_card]=0
	CardFAX_HHL[$current_card]=0
	CardFAX_HPI[$current_card]=0
	CardFAX_DFB[$current_card]=0

# Fax speed Limit
	CardFAX_SPEED[$current_card]=0
	CardMIN_FAX_SPEED[$current_card]=0
	Card_FAX_MAX_OVERHEAD[$current_card]=0

# RBS parameters
	CardRBS_RXTO[$current_card]=10
	CardRBS_GLARE[$current_card]=1

	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   Other Board
# --------------------------------------
		CardRBS_BC[$current_card]=0
		CardRBS_DIAL[$current_card]=1
# --------------------------------------
	else
# --------------------------------------
#   Analog Board
# --------------------------------------
		CardRBS_BC[$current_card]=1
		CardRBS_DIAL[$current_card]=0
# --------------------------------------
	fi

	CardRBS_ANSWTO[$current_card]=120
	CardRBS_TRUNK[$current_card]=0
	CardRBS_OFFICE[$current_card]=0
	CardRBS_AS[$current_card]=0
	CardRBS_DODIAL[$current_card]=0

# SPID Parameters
	CardSPID1[$current_card]=""
	CardSPID1MSN[$current_card]=""
	CardSPID2[$current_card]=""
	CardSPID2MSN[$current_card]=""

# US Parameters
	CardAUTO_SPID_DISABLE[$current_card]=0
	CardALWAYS_RING_VOICE[$current_card]=0
	CardUS_EKTS_N_CACH_HANDLES[$current_card]=0
	CardUS_EKTS_BEGIN_CONF[$current_card]=61
	CardUS_EKTS_DROP_CONF[$current_card]=63
	CardUS_EKTS_CALL_TRANSFER[$current_card]=62
	CardUS_EKTS_MWI[$current_card]=0

# QSIG protocol parameters
	CardQSIG_DIALECT[$current_card]=0
	CardQSIG_PBX[$current_card]=0
	CardQSIG_CHI[$current_card]=0
	CardQSIG_CHFMT[$current_card]=0
	CardQSIG_REROUTING[$current_card]=0
	CardQSIG_CHARGE_DISABLED[$current_card]=0
	CardQSIG_CHARGE_INSETUP[$current_card]=0
	CardQSIG_CHARGE_NORATE[$current_card]=0
	CardQSIG_CHARGE_NOINTERIM[$current_card]=0
	CardQSIG_CHARGE_NOFINAL[$current_card]=0
	CardQSIG_PR_INVITE[$current_card]=0
	CardQSIG_NO_REROUTING[$current_card]=0
	CardQSIG_TRANSPARENT_FAC[$current_card]=0
	CardQSIG_TSC_CONN[$current_card]=0
# QSIG and ETSI
	CardQSIG_TAKELASTRDN[$current_card]=0


# BRI-2M protocol revision
	CardBRI_REV[$current_card]=0

# R2 protocol options
  CardR2_CTRYLEN[$current_card]=2
  CardR2_NOCLI[$current_card]=0
  CardR2_AUTOALERT[$current_card]=1

# Assign board to MTPX adapter
  Card_MADAPTER[$current_card]=-1
  Card_DISABLE_PART68[$current_card]=0
  Card_DISABLE_4BRIFPGA[$current_card]=0


# Set *ANI*DNIS* RBS defaults
  Card_ANIDNI_1_TYPE[$current_card]="0x2a"
  Card_ANIDNI_2_TYPE[$current_card]="0x2a"
  Card_ANIDNI_3_TYPE[$current_card]="0x2a"
  Card_ANIDNI_1_ON[$current_card]=0
  Card_ANIDNI_2_ON[$current_card]=0
  Card_ANIDNI_3_ON[$current_card]=0

# Set Disable DISC after PROGRESS default
  Card_NODISCAFTERPROGRESS[$current_card]=0

# ECT Mode
  Card_ECT[$current_card]=0

# ADDMISSINGRDN Mode
  Card_ADDMISSINGRDN[$current_card]=0

# Deflection Type
  Card_DEFLECTION[$current_card]=0

# ETSI Link Balance
  Card_LINKBALANCE[$current_card]=0

# MTPX ECT Emulation
  Card_MTPX_ECT[$current_card]=0

# ETSI MWI mode
  Card_ETSI_MWI[$current_card]=0

# TxAttenuation
  Card_TX_ATTENUATION[$current_card]=0

# DTMF Supression
  Card_DTMF_SUPRESSION[$current_card]=0

# Echo Canceller Tail Length
  Card_EC_TAIL[$current_card]=0
  
# Recording AGC
	Card_REC_AGC[$current_card]=0

  if [ $((${Card_ANALOG[$current_card]})) -ne 0 ]
	then
# DTMF Collection
    Card_DTMF_COLLECT[$current_card]=0
# RBS_SILENCE_TIMEOUT
		Card_RBS_SILENCE_TIMEOUT[$current_card]=0
# CALL DIRECTION
		Card_POTS_DIRECTION[$current_card]=0
# CALIBRATION MODE
		Card_POTS_CALIBRATION[$current_card]=0
# RINGS UNTIL ANSWER
		Card_RINGSTILANSWER[$current_card]=0
# SHOW PBX PARAMS
		Card_POTS_PBXPARAMS[$current_card]=0
# FLASH LENGTH
		Card_POTS_FLASHLEN[$current_card]=0
# POTS CONSULT
		Card_POTS_CONSULT[$current_card]='!'
# POTS TRANSFER
		Card_POTS_TRANSFER[$current_card]=''
# POTS SWAPHOLD
		Card_POTS_SWAPHOLD[$current_card]='!'
# POTS DISC ACTIVE CALL
		Card_POTS_DISCACTIVCALL[$current_card]=''
# POTS DISC PASSIVE CALL
		Card_POTS_DISCPASSIVCALL[$current_card]=''
# POTS RETRIEVE MODE
		Card_POTS_RETRIEVE_MODE[$current_card]=0
# POTS CALLBACKTIMER
		Card_POTS_CALLBACKTIMER[$current_card]=5
# POTS RETRIEVEHOOKOFFTIMER
		Card_POTS_RETRIEVEHOOKOFFTIMER[$current_card]=0
# POTS CPN MAPPING
		Card_POTS_CONFIGCPN[$current_card]=''
# POTS FLEXIBLE DTMF
		Card_POTS_FLEXDTMF[$current_card]=0
		Card_POTS_FLEXDIRINT[$current_card]=''
		Card_POTS_FLEXDIREXT[$current_card]=''
		Card_POTS_FLEXDIVINT[$current_card]=''
		Card_POTS_FLEXDIVEXT[$current_card]=''
		Card_POTS_FLEXDIRECT[$current_card]=''
		Card_POTS_FLEXDIVERT[$current_card]=''
  fi

	Card_SIGNALING_TIMESLOTS[$current_card]=0
}

set_mtpx_defaults()
{
# MTPX ECT Emulation
  MTPX_ECT[$current_card]=0

# MTPX ECT Emulation
  MTPX_HI[$current_card]=0
}

set_analog_line_defaults()
{
	CardPROT[$1]="-1"
	CardDIAL_DONTWAITTONE_CHAR[$1]=-1
	CardRBS_DIAL[$1]=-1
	Card_RINGSTILANSWER[$1]=-1
	Card_POTS_PBXPARAMS[$1]=0 # always save by line
	Card_POTS_FLASHLEN[$1]=-1
	Card_POTS_CONSULT[$1]=-1
	Card_POTS_TRANSFER[$1]=-1
	Card_POTS_SWAPHOLD[$1]=-1
	Card_POTS_DISCACTIVCALL[$1]=-1
	Card_POTS_DISCPASSIVCALL[$1]=-1
	Card_POTS_RETRIEVE_MODE[$1]=-1
	Card_POTS_CALLBACKTIMER[$1]=-1
	Card_POTS_RETRIEVEHOOKOFFTIMER[$1]=-1
	Card_POTS_DIRECTION[$1]=-1
	Card_POTS_CALIBRATION[$1]=-1
	Card_POTS_CONFIGCPN[$1]=-1
	CardNT2[$1]=-1
	Card_DTMF_COLLECT[$1]=-1
	Card_POTS_FLEXDTMF[$1]=-1
	Card_POTS_FLEXDIRINT[$1]=-1
	Card_POTS_FLEXDIREXT[$1]=-1
	Card_POTS_FLEXDIVINT[$1]=-1
	Card_POTS_FLEXDIVEXT[$1]=-1
	Card_POTS_FLEXDIRECT[$1]=-1
	Card_POTS_FLEXDIVERT[$1]=-1
}

# ----------------------------------------------------------------------
# Re-Assign card serial numbers if necessary
# ----------------------------------------------------------------------
update_card_serial_number()
{
	r_card=1

	if [ $((VerifyCardSerialNumber)) -ne $((0)) ]
	then
		return
	fi

	while [ $((${CCardSN[$r_card]})) -gt 0 ]
	do #{
		if [ $((${CCardSN[$r_card]})) -eq $((${CardSN[$current_card]})) -a \
				 $((${CCardSUBADAPTER[$r_card]})) -eq $((${CardSUBADAPTER[$current_card]})) ]
		then
			if [ "${CCardNAME[$r_card]}" == "${CardNAME[$current_card]}" ]
			then
				CardFound[$r_card]=1
				return
			fi
		fi
		r_card=$(($r_card+1))
	done #}

	r_card=1
	while [ $((${CCardSN[$r_card]})) -gt 0 ]
	do #{
		if [ $((${CardFound[$r_card]})) -eq 0 -a \
				 $((${CCardSUBADAPTER[$r_card]})) -eq $((${CardSUBADAPTER[$current_card]})) ]
		then
			if [ "${CCardNAME[$r_card]}" == "${CardNAME[$current_card]}" ]
			then
				CCardSN[$r_card]=$((${CardSN[$current_card]}))
				CardFound[$r_card]=1
				return
			fi
		fi
		r_card=$(($r_card+1))
	done #}
}

# ----------------------------------------------------------------------
#  Find card in the configuration array and read configuration if card
#  was already detected
# ----------------------------------------------------------------------
read_card_config()
{
	r_card=1

	while [ $((${CCardSN[$r_card]})) -gt 0 ]
	do #{
		if [ $((${CCardSN[$r_card]})) -eq $((${CardSN[$current_card]})) -a \
				 $((${CCardSUBADAPTER[$r_card]})) -eq $((${CardSUBADAPTER[$current_card]})) ]
		then
			if [ "${CCardNAME[$r_card]}" == "${CardNAME[$current_card]}" ]
			then
# ----------------------------------------------------------------------
#  CARD CONFIGURATION FOUND
# ----------------------------------------------------------------------
				CardNEW_CARD[$current_card]=0
				CardVISUALNAME[$current_card]="${CCardVISUALNAME[$r_card]}"
				CardNAME[$current_card]="${CCardNAME[$r_card]}"
				CardPROT[$current_card]="${CCardPROT[$r_card]}"
				CardNT2[$current_card]="${CCardNT2[$r_card]}"
				CardBoardReset[$current_card]="${CCardBoardReset[$r_card]}"
				Card_ResourceBoard[$current_card]="${CCard_ResourceBoard[$r_card]}"
				CardDIDLEN[$current_card]="${CCardDIDLEN[$r_card]}"
				CardSPECIAL[$current_card]="${CCardSPECIAL[$r_card]}"
				CardDidTimeout[$current_card]="${CCardDidTimeout[$r_card]}"
				CardNT[$current_card]="${CCardNT[$r_card]}"
				Card_SYNC_MODE[$current_card]="${CCard_SYNC_MODE[$r_card]}"
				Card_SYNC_PORT[$current_card]="${CCard_SYNC_PORT[$r_card]}"
				CardBRI_LK[$current_card]="${CCardBRI_LK[$r_card]}"
				CardCRC[$current_card]="${CCardCRC[$r_card]}"
				CardL2[$current_card]="${CCardL2[$r_card]}"
				CardL2_CHANGED[$current_card]="${CCardL2_CHANGED[$r_card]}"
				CardLAW[$current_card]="${CCardLAW[$r_card]}"
				CardFL[$current_card]="${CCardFL[$r_card]}"
				CardFL_LEN[$current_card]="${CCardFL_LEN[$r_card]}"
				CardSTEI[$current_card]="${CCardSTEI[$r_card]}"
				CardNTEI[$current_card]="${CCardNTEI[$r_card]}"
				CardP2P[$current_card]="${CCardP2P[$r_card]}"
				CardLTONE[$current_card]="${CCardLTONE[$r_card]}"
				CardFAX_FINE[$current_card]="${CCardFAX_FINE[$r_card]}"
				CardFAX_ECM[$current_card]="${CCardFAX_ECM[$r_card]}"
				CardFAX_E64B[$current_card]="${CCardFAX_E64B[$r_card]}"
				CardFAX_C2D[$current_card]="${CCardFAX_C2D[$r_card]}"
				CardFAX_CT6[$current_card]="${CCardFAX_CT6[$r_card]}"
				CardFAX_DUC[$current_card]="${CCardFAX_DUC[$r_card]}"
				CardFAX_NPL[$current_card]="${CCardFAX_NPL[$r_card]}"
				CardFAX_HTL[$current_card]="${CCardFAX_HTL[$r_card]}"
				CardFAX_HHL[$current_card]="${CCardFAX_HHL[$r_card]}"
				CardFAX_HPI[$current_card]="${CCardFAX_HPI[$r_card]}"
				CardFAX_DFB[$current_card]="${CCardFAX_DFB[$r_card]}"
				CardFAX_SPEED[$current_card]="${CCardFAX_SPEED[$r_card]}"
				CardMIN_FAX_SPEED[$current_card]="${CCardMIN_FAX_SPEED[$r_card]}"
				Card_FAX_MAX_OVERHEAD[$current_card]="${CCard_FAX_MAX_OVERHEAD[$current_card]}"
				CardRBS_RXTO[$current_card]="${CCardRBS_RXTO[$r_card]}"
				CardRBS_GLARE[$current_card]="${CCardRBS_GLARE[$r_card]}"
				CardRBS_BC[$current_card]="${CCardRBS_BC[$r_card]}"
				Card_CAS_DEBUG_LEVEL[$current_card]="${CCard_CAS_DEBUG_LEVEL[$current_card]}"
				CardDIAL_PAUSE_CHAR[$current_card]="${CCardDIAL_PAUSE_CHAR[$current_card]}"
				CardDIAL_DONTWAITTONE_CHAR[$current_card]="${CCardDIAL_DONTWAITTONE_CHAR[$current_card]}"
				CardDIAL_WAITTONE_CHAR[$current_card]="${CCardDIAL_WAITTONE_CHAR[$current_card]}"
				CardDIAL_FLASH_CHAR[$current_card]="${CCardDIAL_FLASH_CHAR[$current_card]}"
				CardRBS_ANSWTO[$current_card]="${CCardRBS_ANSWTO[$r_card]}"
				CardRBS_TRUNK[$current_card]="${CCardRBS_TRUNK[$r_card]}"
				CardRBS_OFFICE[$current_card]="${CCardRBS_OFFICE[$r_card]}"
				CardRBS_AS[$current_card]="${CCardRBS_AS[$r_card]}"
				CardRBS_DIAL[$current_card]="${CCardRBS_DIAL[$r_card]}"
				CardRBS_DODIAL[$current_card]="${CCardRBS_DODIAL[$r_card]}"
				CardAUTO_SPID_DISABLE[$current_card]="${CCardAUTO_SPID_DISABLE[$r_card]}"
				CardALWAYS_RING_VOICE[$current_card]="${CCardALWAYS_RING_VOICE[$r_card]}"
				CardSPID1[$current_card]="${CCardSPID1[$r_card]}"
				CardSPID1MSN[$current_card]="${CCardSPID1MSN[$r_card]}"
				CardSPID2[$current_card]="${CCardSPID2[$r_card]}"
				CardSPID2MSN[$current_card]="${CCardSPID2MSN[$r_card]}"
				CardUS_EKTS_N_CACH_HANDLES[$current_card]="${CCardUS_EKTS_N_CACH_HANDLES[$r_card]}"
				CardUS_EKTS_BEGIN_CONF[$current_card]="${CCardUS_EKTS_BEGIN_CONF[$r_card]}"
				CardUS_EKTS_DROP_CONF[$current_card]="${CCardUS_EKTS_DROP_CONF[$r_card]}"
				CardUS_EKTS_CALL_TRANSFER[$current_card]="${CCardUS_EKTS_CALL_TRANSFER[$r_card]}"
				CardUS_EKTS_MWI[$current_card]="${CCardUS_EKTS_MWI[$r_card]}"
				CardQSIG_DIALECT[$current_card]="${CCardQSIG_DIALECT[$r_card]}"
				CardQSIG_PBX[$current_card]="${CCardQSIG_PBX[$r_card]}"
				CardQSIG_CHI[$current_card]="${CCardQSIG_CHI[$r_card]}"
				CardQSIG_CHFMT[$current_card]="${CCardQSIG_CHFMT[$r_card]}"
				CardQSIG_REROUTING[$current_card]="${CCardQSIG_REROUTING[$r_card]}"
				CardQSIG_CHARGE_DISABLED[$current_card]="${CCardQSIG_CHARGE_DISABLED[$r_card]}"
				CardQSIG_CHARGE_INSETUP[$current_card]="${CCardQSIG_CHARGE_INSETUP[$r_card]}"
				CardQSIG_CHARGE_NORATE[$current_card]="${CCardQSIG_CHARGE_NORATE[$r_card]}"
				CardQSIG_CHARGE_NOINTERIM[$current_card]="${CCardQSIG_CHARGE_NOINTERIM[$r_card]}"
				CardQSIG_CHARGE_NOFINAL[$current_card]="${CCardQSIG_CHARGE_NOFINAL[$r_card]}"
				CardQSIG_PR_INVITE[$current_card]="${CCardQSIG_PR_INVITE[$r_card]}"
				CardQSIG_NO_REROUTING[$current_card]="${CCardQSIG_NO_REROUTING[$r_card]}"
				CardQSIG_TRANSPARENT_FAC[$current_card]="${CCardQSIG_TRANSPARENT_FAC[$r_card]}"
				CardQSIG_TSC_CONN[$current_card]="${CCardQSIG_TSC_CONN[$r_card]}"
				CardQSIG_TAKELASTRDN[$current_card]="${CCardQSIG_TAKELASTRDN[$r_card]}"
				CardBRI_REV[$current_card]="${CCardBRI_REV[$r_card]}"
				CardR2_CTRYLEN[$current_card]="${CCardR2_CTRYLEN[$r_card]}"
				CardR2_NOCLI[$current_card]="${CCardR2_NOCLI[$r_card]}"
				CardR2_AUTOALERT[$current_card]="${CCardR2_AUTOALERT[$r_card]}"
				Card_MADAPTER[$current_card]="${CCard_MADAPTER[$r_card]}"
				MTPX_ECT[$((Card_MADAPTER[$current_card]))]=CMTPX_ECT[$((Card_MADAPTER[$current_card]))]
				MTPX_HI[$((Card_MADAPTER[$current_card]))]=CMTPX_HI[$((Card_MADAPTER[$current_card]))]

				MTPX_CHANCAPI[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_EC[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_EC[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_RTP[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_RTP[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_FAX[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_FAX[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_FAXTIME[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_FAXTIME[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_CONTEXT[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_CONTEXT[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_HOLD[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_HOLD[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_GRP[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_GRP[$((Card_MADAPTER[$current_card]))]
				if [ $((${MTPX_CHANCAPI_GRP[$((Card_MADAPTER[$current_card]))]})) -eq 0 ]
				then
					MTPX_CHANCAPI_GRP[$((Card_MADAPTER[$current_card]))]="1"
				fi
				MTPX_CHANCAPI_CGRP[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_CGRP[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_PGRP[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_PGRP[$((Card_MADAPTER[$current_card]))]
				MTPX_CHANCAPI_TGRP[$((Card_MADAPTER[$current_card]))]=CMTPX_CHANCAPI_TGRP[$((Card_MADAPTER[$current_card]))]

				Card_DISABLE_PART68[$current_card]="${CCard_DISABLE_PART68[$r_card]}"
				Card_DISABLE_4BRIFPGA[$current_card]="${CCard_DISABLE_4BRIFPGA[$r_card]}"

				Card_ANIDNI_1_TYPE[$current_card]="${CCard_ANIDNI_1_TYPE[$r_card]}"
				Card_ANIDNI_2_TYPE[$current_card]="${CCard_ANIDNI_2_TYPE[$r_card]}"
				Card_ANIDNI_3_TYPE[$current_card]="${CCard_ANIDNI_3_TYPE[$r_card]}"
				Card_ANIDNI_1_ON[$current_card]="${CCard_ANIDNI_1_ON[$r_card]}"
				Card_ANIDNI_2_ON[$current_card]="${CCard_ANIDNI_2_ON[$r_card]}"
				Card_ANIDNI_3_ON[$current_card]="${CCard_ANIDNI_3_ON[$r_card]}"
				Card_NODISCAFTERPROGRESS[$current_card]="${CCard_NODISCAFTERPROGRESS[$r_card]}"

				if [ -z "${Card_ANIDNI_1_TYPE[$current_card]}" ]
				then
					Card_ANIDNI_1_TYPE[$current_card]="0x2a"
					Card_ANIDNI_2_TYPE[$current_card]="0x2a"
					Card_ANIDNI_3_TYPE[$current_card]="0x2a"
				fi

				Card_ECT[$current_card]="${CCard_ECT[$r_card]}"
				Card_DEFLECTION[$current_card]="${CCard_DEFLECTION[$r_card]}"
				Card_LINKBALANCE[$current_card]="${CCard_LINKBALANCE[$r_card]}"

				Card_ETSI_MWI[$current_card]="${CCard_ETSI_MWI[$r_card]}"

				Card_ADDMISSINGRDN[$current_card]="${CCard_ADDMISSINGRDN[$r_card]}"

 				Card_TX_ATTENUATION[$current_card]="${CCard_TX_ATTENUATION[$r_card]}"

				Card_DTMF_SUPRESSION[$current_card]="${CCard_DTMF_SUPRESSION[$r_card]}"
				Card_EC_TAIL[$current_card]="${CCard_EC_TAIL[$r_card]}"
				Card_REC_AGC[$current_card]="${CCard_REC_AGC[$r_card]}"
				Card_DTMF_COLLECT[$current_card]="${CCard_DTMF_COLLECT[$r_card]}"
				Card_RBS_SILENCE_TIMEOUT[$current_card]="${CCard_RBS_SILENCE_TIMEOUT[$r_card]}"
				Card_POTS_DIRECTION[$current_card]="${CCard_POTS_DIRECTION[$r_card]}"
				Card_POTS_CALIBRATION[$current_card]="${CCard_POTS_CALIBRATION[$r_card]}"
				Card_RINGSTILANSWER[$current_card]="${CCard_RINGSTILANSWER[$r_card]}"
				Card_POTS_PBXPARAMS[$current_card]="${CCard_POTS_PBXPARAMS[$r_card]}"
				Card_POTS_FLASHLEN[$current_card]="${CCard_POTS_FLASHLEN[$r_card]}"
				Card_POTS_CONSULT[$current_card]="${CCard_POTS_CONSULT[$r_card]}"
				Card_POTS_TRANSFER[$current_card]="${CCard_POTS_TRANSFER[$r_card]}"
				Card_POTS_SWAPHOLD[$current_card]="${CCard_POTS_SWAPHOLD[$r_card]}"
				Card_POTS_DISCACTIVCALL[$current_card]="${CCard_POTS_DISCACTIVCALL[$r_card]}"
				Card_POTS_DISCPASSIVCALL[$current_card]="${CCard_POTS_DISCPASSIVCALL[$r_card]}"
				Card_POTS_RETRIEVE_MODE[$current_card]="${CCard_POTS_RETRIEVE_MODE[$r_card]}"
				Card_POTS_CALLBACKTIMER[$current_card]="${CCard_POTS_CALLBACKTIMER[$r_card]}"
				Card_POTS_RETRIEVEHOOKOFFTIMER[$current_card]="${CCard_POTS_RETRIEVEHOOKOFFTIMER[$r_card]}"
				Card_POTS_CONFIGCPN[$current_card]="${CCard_POTS_CONFIGCPN[$r_card]}"
				Card_POTS_FLEXDTMF[$current_card]="${CCard_POTS_FLEXDTMF[$r_card]}"
				Card_POTS_FLEXDIRINT[$current_card]="${CCard_POTS_FLEXDIRINT[$r_card]}"
				Card_POTS_FLEXDIREXT[$current_card]="${CCard_POTS_FLEXDIREXT[$r_card]}"
				Card_POTS_FLEXDIVINT[$current_card]="${CCard_POTS_FLEXDIVINT[$r_card]}"
				Card_POTS_FLEXDIVEXT[$current_card]="${CCard_POTS_FLEXDIVEXT[$r_card]}"
				Card_POTS_FLEXDIRECT[$current_card]="${CCard_POTS_FLEXDIRECT[$r_card]}"
				Card_POTS_FLEXDIVERT[$current_card]="${CCard_POTS_FLEXDIVERT[$r_card]}"
				Card_DISABLED[$current_card]="${CCard_DISABLED[$r_card]}"
				Card_SIGNALING_TIMESLOTS[$current_card]="${CCard_SIGNALING_TIMESLOTS[$r_card]}"

        if [ -z "${Card_DISABLED[$current_card]}" ]
				then
					Card_DISABLED[$current_card]=0
				fi

        if [ -z "${Card_SIGNALING_TIMESLOTS[$current_card]}" ]
				then
					Card_SIGNALING_TIMESLOTS[$current_card]=0
				fi


				if [ $((Card_ANALOG[$current_card])) -gt 0 ]
				then
					j=1
					while [ $((j)) -le $((Card_ANALOG[$current_card])) ]
					do
						v_tmp=$((128 + $j + $current_card * 8))
						i_tmp=$((128 + $j + $r_card * 8))

						CardPROT[$v_tmp]="${CCardPROT[$i_tmp]}"
						CardDIAL_DONTWAITTONE_CHAR[$v_tmp]="${CCardDIAL_DONTWAITTONE_CHAR[$i_tmp]}"
						CardRBS_DIAL[$v_tmp]="${CCardRBS_DIAL[$i_tmp]}"
						Card_RINGSTILANSWER[$v_tmp]="${CCard_RINGSTILANSWER[$i_tmp]}"
						Card_POTS_PBXPARAMS[$v_tmp]="${CCard_POTS_PBXPARAMS[$i_tmp]}"
						Card_POTS_FLASHLEN[$v_tmp]="${CCard_POTS_FLASHLEN[$i_tmp]}"
						Card_POTS_CONSULT[$v_tmp]="${CCard_POTS_CONSULT[$i_tmp]}"
						Card_POTS_SWAPHOLD[$v_tmp]="${CCard_POTS_SWAPHOLD[$i_tmp]}"
						Card_POTS_TRANSFER[$v_tmp]="${CCard_POTS_TRANSFER[$i_tmp]}"
						Card_POTS_DISCACTIVCALL[$v_tmp]="${CCard_POTS_DISCACTIVCALL[$i_tmp]}"
						Card_POTS_DISCPASSIVCALL[$v_tmp]="${CCard_POTS_DISCPASSIVCALL[$i_tmp]}"
						Card_POTS_RETRIEVE_MODE[$v_tmp]="${CCard_POTS_RETRIEVE_MODE[$i_tmp]}"
						Card_POTS_CALLBACKTIMER[$v_tmp]="${CCard_POTS_CALLBACKTIMER[$i_tmp]}"
						Card_POTS_RETRIEVEHOOKOFFTIMER[$v_tmp]="${CCard_POTS_RETRIEVEHOOKOFFTIMER[$i_tmp]}"
						Card_POTS_DIRECTION[$v_tmp]="${CCard_POTS_DIRECTION[$i_tmp]}"
						Card_POTS_CALIBRATION[$v_tmp]="${CCard_POTS_CALIBRATION[$i_tmp]}"
						Card_POTS_CONFIGCPN[$v_tmp]="${CCard_POTS_CONFIGCPN[$i_tmp]}"
						CardNT2[$v_tmp]="${CCardNT2[$i_tmp]}"
						Card_DTMF_COLLECT[$v_tmp]="${CCard_DTMF_COLLECT[$i_tmp]}"
						Card_POTS_FLEXDTMF[$v_tmp]="${CCard_POTS_FLEXDTMF[$i_tmp]}"
						Card_POTS_FLEXDIRINT[$v_tmp]="${CCard_POTS_FLEXDIRINT[$i_tmp]}"
						Card_POTS_FLEXDIREXT[$v_tmp]="${CCard_POTS_FLEXDIREXT[$i_tmp]}"
						Card_POTS_FLEXDIVINT[$v_tmp]="${CCard_POTS_FLEXDIVINT[$i_tmp]}"
						Card_POTS_FLEXDIVEXT[$v_tmp]="${CCard_POTS_FLEXDIVEXT[$i_tmp]}"
						Card_POTS_FLEXDIRECT[$v_tmp]="${CCard_POTS_FLEXDIRECT[$i_tmp]}"
						Card_POTS_FLEXDIVERT[$v_tmp]="${CCard_POTS_FLEXDIVERT[$i_tmp]}"

						j=$(($j+1))
					done
				fi


# ----------------------------------------------------------------------
				return
			fi
		fi
		r_card=$(($r_card+1))
	done #}
}

get_hostaddr()
{
	found_name=0
	ifconfig_ips=$(LC_ALL=EN ifconfig | grep "inet addr:" | sed -n '/addr:/s/ [^r]*..//gp' | grep -v "^127." 2>/dev/null)
	hostname_ip=$(hostname -i 2>/dev/null)
	if [ $(($?)) -eq 0 ]
	then
		hostname_ip=$(echo ${hostname_ip} | sed -e 's/ //g')
		echo ${ifconfig_ips} | grep ${hostname_ip} > /dev/null
		if [ $(($?)) -eq 0 ]
		then
			from_host="${hostname_ip}"
		else
			for ip in ${ifconfig_ips}
			do
				from_host="${ip}"
				found_name=1
				break
			done
			if [ $((${found_name})) -eq $((0)) ]
			then
				from_host="127.0.0.1"
			fi
		fi
	else
		for ip in ${ifconfig_ips}
		do
			from_host="${ip}"
			found_name=1
			break
		done
		if [ $((${found_name})) -eq $((0)) ]
		then
			from_host="127.0.0.1"
		fi
	fi
}

read_sipcontrol_config()
{
	SIPCONTROL_CONFIG="${CSIPCONTROL_CONFIG}"
}

# ------------------------------------------------------------
#  Initialize softIP adapter
# ------------------------------------------------------------
diva_initialize_soft_ip_adapter()
{
	CardLAW[65]=0
	CardNT2[65]=0
	CardFAX_SPEED[65]=0
	CardMIN_FAX_SPEED[65]=0
	Card_FAX_MAX_OVERHEAD[65]=0
	CardFAX_FINE[65]=0
	CardFAX_ECM[65]=0
	CardFAX_E64B[65]=0
	CardFAX_C2D[65]=0
	CardFAX_CT6[65]=0
	CardFAX_DUC[65]=0
	CardFAX_NPL[65]=0
	CardFAX_HTL[65]=0
	CardFAX_HHL[65]=0
	CardFAX_HPI[65]=0
	CardFAX_DFB[65]=0x0200
	Card_DISABLE_PART68[65]=0
	Card_DTMF_SUPRESSION[65]=0
	Card_EC_TAIL[65]=0
	Card_REC_AGC[65]=0
# ADDMISSINGRDN Mode
	Card_ADDMISSINGRDN[65]=0

	SOFTIP_FROM_DISPLAYNAME="Dialogic softIP"
	get_hostaddr
	SOFTIP_FROM_ADDRESS="sip@${from_host}"
	SOFTIP_FROM_PORT="5060"
	SOFTIP_REGISTRAR_ADDRESS=""
	SOFTIP_REGISTRAR_PORT="5060"
	SOFTIP_PROXY_ADDRESS=""
	SOFTIP_PROXY_USERNAME=""
	SOFTIP_PROXY_PASSWD=""
	SOFTIP_MEDIA_PORT="3002"
	SOFTIP_MEDIA_TYPE="audio"
	SOFTIP_MEDIA_NUMPORTS="1"
	SOFTIP_MEDIA_TRANSPORT="RTP/AVP"
	SOFTIP_MEDIA_TRANSTYPE="sendrecv"
	SOFTIP_MEDIA_CODEC="PCMA/8000/1 PCMU/8000/1 101"
	SOFTIP_MEDIA_ATTRIBUTE1="a=rtpmap:101 telephone-event/8000"
	SOFTIP_MEDIA_ATTRIBUTE2="a=fmtp:101 0-15"
	SOFTIP_MEDIA_ATTRIBUTE3=""
	SOFTIP_MEDIA_ATTRIBUTE4=""
	SOFTIP_SDP_ORIGIN="o=dialogic 256 1 IN IP4 ${from_host}"
	SOFTIP_SDP_URI="http://www.dialogic.com"
	SOFTIP_SDP_CONNECTION="c=IN IP4 ${from_host}"
	SOFTIP_SDP_INFORMATION="softIP"
	SOFTIP_SDP_SESSION="SipSession with softIP"
	SOFTIP_ALLOW1="SUBSCRIBE"
	SOFTIP_ALLOW2="NOTIFY"
	SOFTIP_ALLOW3="REFER"
	SOFTIP_RTP_START_PORT="20000"
	SOFTIP_RTP_END_PORT="30000"
	Card_POTS_CONFIG_BY_LINE[65]=-1

}

# ----------------------------------------------------------------------
#  Find card in the configuration array and read configuration if card
#  was already detected
# ----------------------------------------------------------------------
read_softip_config()
{
	diva_initialize_soft_ip_adapter

    if [ $((${CCardSN[65]})) -eq 0 ]
	then
		CardNEW_CARD[65]=0
		CardNT2[65]="${CCardNT2[65]}"
		CardLAW[65]="${CCardLAW[65]}"
		CardFAX_FINE[65]="${CCardFAX_FINE[65]}"
		CardFAX_ECM[65]="${CCardFAX_ECM[65]}"
		CardFAX_E64B[65]="${CCardFAX_E64B[65]}"
		CardFAX_C2D[65]="${CCardFAX_C2D[65]}"
		CardFAX_CT6[65]="${CCardFAX_CT6[65]}"
		CardFAX_DUC[65]="${CCardFAX_DUC[65]}"
		CardFAX_NPL[65]="${CCardFAX_NPL[65]}"
		CardFAX_HTL[65]="${CCardFAX_HTL[65]}"
		CardFAX_HHL[65]="${CCardFAX_HHL[65]}"
		CardFAX_HPI[65]="${CCardFAX_HPI[65]}"
		CardFAX_DFB[65]="${CCardFAX_DFB[65]}"
		CardFAX_SPEED[65]="${CCardFAX_SPEED[65]}"
		CardMIN_FAX_SPEED[65]="${CCardMIN_FAX_SPEED[65]}"
       		Card_FAX_MAX_OVERHEAD[65]="${CCard_FAX_MAX_OVERHEAD[65]}"

		Card_DISABLE_PART68[65]="${CCard_DISABLE_PART68[65]}"

		Card_DTMF_SUPRESSION[65]="${CCard_DTMF_SUPRESSION[65]}"
		Card_EC_TAIL[65]="${CCard_EC_TAIL[65]}"
		Card_REC_AGC[65]="${CCard_REC_AGC[65]}"

		Card_ADDMISSINGRDN[65]="${CCard_ADDMISSINGRDN[65]}"

		Card_POTS_CONFIG_BY_LINE[65]=-1
	fi

	if [ "${CSOFTIP_FROM_ADDRESS}" != "" -a $((CSOFTIP_FROM_PORT)) -ne $((0)) ]
	then
		SOFTIP_FROM_DISPLAYNAME="${CSOFTIP_FROM_DISPLAYNAME}"
		SOFTIP_FROM_PORT="${CSOFTIP_FROM_PORT}"
		SOFTIP_REGISTRAR_ADDRESS="${CSOFTIP_REGISTRAR_ADDRESS}"
		SOFTIP_REGISTRAR_PORT="${CSOFTIP_REGISTRAR_PORT}"
		SOFTIP_PROXY_ADDRESS="${CSOFTIP_PROXY_ADDRESS}"
		SOFTIP_PROXY_USERNAME="${CSOFTIP_PROXY_USERNAME}"
		SOFTIP_PROXY_PASSWD="${CSOFTIP_PROXY_PASSWD}"
		SOFTIP_MEDIA_PORT="${CSOFTIP_MEDIA_PORT}"
		SOFTIP_MEDIA_TYPE="${CSOFTIP_MEDIA_TYPE}"
		SOFTIP_MEDIA_NUMPORTS="${CSOFTIP_MEDIA_NUMPORTS}"
		SOFTIP_MEDIA_TRANSPORT="${CSOFTIP_MEDIA_TRANSPORT}"
		SOFTIP_MEDIA_TRANSTYPE="${CSOFTIP_MEDIA_TRANSTYPE}"
		SOFTIP_MEDIA_CODEC="${CSOFTIP_MEDIA_CODEC}"
		SOFTIP_MEDIA_ATTRIBUTE1="${CSOFTIP_MEDIA_ATTRIBUTE1}"
		SOFTIP_MEDIA_ATTRIBUTE2="${CSOFTIP_MEDIA_ATTRIBUTE2}"
		SOFTIP_MEDIA_ATTRIBUTE3="${CSOFTIP_MEDIA_ATTRIBUTE3}"
		SOFTIP_MEDIA_ATTRIBUTE4="${CSOFTIP_MEDIA_ATTRIBUTE4}"
		SOFTIP_SDP_URI="${CSOFTIP_SDP_URI}"
		SOFTIP_SDP_INFORMATION="${CSOFTIP_SDP_INFORMATION}"
		SOFTIP_SDP_SESSION="${CSOFTIP_SDP_SESSION}"
		SOFTIP_ALLOW1="${CSOFTIP_ALLOW1}"
		SOFTIP_ALLOW2="${CSOFTIP_ALLOW2}"
		SOFTIP_ALLOW3="${CSOFTIP_ALLOW3}"
		SOFTIP_RTP_START_PORT="${CSOFTIP_RTP_START_PORT}"
		SOFTIP_RTP_END_PORT="${CSOFTIP_RTP_END_PORT}"

		ifconfig_ips=$(LC_ALL=EN ifconfig | grep "inet addr:" | sed -n '/addr:/s/ [^r]*..//gp' 2>/dev/null)
		found_name=0
		for ip in ${ifconfig_ips}
		do
			echo "${CSOFTIP_FROM_ADDRESS}" | grep "${ip}\$" > /dev/null
			if [ $(($?)) -eq 0 ]
			then
				found_name=1
				break
			fi
		done

		if [ $((found_name)) -eq $((1)) ]
		then
			SOFTIP_FROM_ADDRESS="${CSOFTIP_FROM_ADDRESS}"
			SOFTIP_SDP_ORIGIN="${CSOFTIP_SDP_ORIGIN}"
			SOFTIP_SDP_CONNECTION="${CSOFTIP_SDP_CONNECTION}"
	fi
	fi
}

extended_adapter_configuration()
{
	fpga4bri_on="on"
	nodiscafterprogress_on="on"
	debug_cas_signaling_on="on"
	debug_cas_signaling_used=0

	if [ $((${Card_DISABLE_4BRIFPGA[$current_card]})) -eq 0 ]
	then
		fpga4bri_on="off"
	fi
	if [ $((${Card_NODISCAFTERPROGRESS[$current_card]})) -eq 0 ]
	then
		nodiscafterprogress_on="off"
	fi
	if [ $((${Card_CAS_DEBUG_LEVEL[$current_card]})) -le 3 ]
	then
		debug_cas_signaling_on="off"
	fi

	set_help_id card_extended_cfg
  msg="$dialog ${help} --clear --title \"Extended configuration\" --separate-output "
  msg="$msg --backtitle \"$backtitle\" --checklist \"Card startup options\" 10 70 2"
  msg="$msg \"1\" \"Disable FPGA access\" $fpga4bri_on "

	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
		msg="$msg \"2\" \"Disable automatic DISC after PROGRESS messages\" $nodiscafterprogress_on "
	fi
	if [ $((${Card_ANALOG[$current_card]})) -ne 0 ]
	then
		msg="$msg \"3\" \"Trunk debug mode\" $debug_cas_signaling_on "
		debug_cas_signaling_used=1
	fi
	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then
		if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 1 -o \
				 $((${PriProtR2[${CardPROT[$current_card]}]})) -eq 1 ]
		then
			msg="$msg \"3\" \"Debug CAS signaling\" $debug_cas_signaling_on "
			debug_cas_signaling_used=1
		fi
	fi

	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 1
	fi
	grep "^1$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		Card_DISABLE_4BRIFPGA[$current_card]=1
	else
		Card_DISABLE_4BRIFPGA[$current_card]=0
	fi
	grep "^2$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		Card_NODISCAFTERPROGRESS[$current_card]=1
	else
		Card_NODISCAFTERPROGRESS[$current_card]=0
	fi
	if [ $((debug_cas_signaling_used)) -ne 0 ]
	then
		grep "^3$" $tmp > /dev/null 2>&1
		if [ $(($?)) -eq 0 ]
		then
			Card_CAS_DEBUG_LEVEL[$current_card]=$((0xffffffff))
		else
			Card_CAS_DEBUG_LEVEL[$current_card]=$((0x3))
		fi
	fi

	return 0
}

extended_system_configuration()
{
	sys_fix_pci_bus_on="on"
	sys_reboot_on_error_on="on"
	sys_capi_irq_on="on"
	sys_msi_irq_on="on"

	if [ $((SysLIFixPCIBus)) -eq 0 ]
	then
		sys_fix_pci_bus_on="off"
	fi
	if [ $((SysRebootOnError)) -eq 0 ]
	then
  	sys_reboot_on_error_on="off"
	fi
	if [ $((SysCAPIIrq)) -eq 0 ]
	then
		sys_capi_irq_on="off"
	fi
	if [ $((SysMSIIrq)) -eq 0 ]
	then
		sys_msi_irq_on="off"
	fi

  msg="$dialog --clear --title \"Extended configuration\" "
  msg="$msg --backtitle \"$backtitle\" --radiolist \"System options\" 14 70 7"

  msg="$dialog --clear --title \"Extended configuration\" --separate-output "
  msg="$msg --backtitle \"$backtitle\" --checklist \"System startup options\" 11 70 4"

	if [ $((divas_pci_e_adapter_present)) -eq $((0)) -a $((StartDivaSoftIP)) -eq $((0)) ]
	then
          msg="$msg \"1\" \"Line Interconnect PCI BUS2BUS override\" $sys_fix_pci_bus_on "
	fi

  msg="$msg \"2\" \"Automatic reboot after system error\" $sys_reboot_on_error_on "
  msg="$msg \"3\" \"Enable call to CAPI_SEND_MESSAGE from interrupt context\" $sys_capi_irq_on "
	if [ $((opendiva)) -eq 0 ]
	then
    msg="$msg \"4\" \"Enable Message Signalled Interrupt (MSI) handling\" $sys_msi_irq_on "
	fi

	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 1
	fi

	if [ $((divas_pci_e_adapter_present)) -eq $((0)) -a $((StartDivaSoftIP)) -eq $((0)) ]
	then
	grep "^1$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
    SysLIFixPCIBus=1
	else
    SysLIFixPCIBus=0
	fi
	fi

	grep "^2$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		SysRebootOnError=1
	else
		SysRebootOnError=0
	fi
	grep "^3$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		SysCAPIIrq=1
	else
		SysCAPIIrq=0
	fi
	grep "^4$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ] || [ $((opendiva)) -eq 1 ] # no_msi supported by only kernel 2.5 and above
	then
		SysMSIIrq=1
	else
		SysMSIIrq=0
	fi
}

extended_tty_configuration()
{
  local tty_wait_cause_on="on"
  local tty_ignore_number_type_on="on"
  local tty_no_carrier="on"

	if [ $((StartTTY)) -eq 0 ]
	then
		return
	fi

	if [ $((DivaTTYWaitCause)) -eq 0 ]
	then
		tty_wait_cause_on="off"
	fi

	if [ $((DivaTTYIgnoreNumberType)) -eq 0 ]
	then
		tty_ignore_number_type_on="off"
	fi

	if [ $((DivaTTYNoCarrier)) -eq 0 ]
	then
		tty_no_carrier="off"
	fi

  msg="$dialog --clear --title \"Extended configuration\" --separate-output "
  msg="$msg --backtitle \"$backtitle\" --checklist \"Diva TTY options\" 10 70 3"
  msg="$msg \"1\" \"Always provide disconnect cause using S253\" $tty_wait_cause_on "
  msg="$msg \"2\" \"Ignore number type (national/international)\" $tty_ignore_number_type_on "
  msg="$msg \"3\" \"NO CARRIER after RING message\" $tty_no_carrier "

	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 1
	fi

	grep "^1$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		DivaTTYWaitCause=1
	else
		DivaTTYWaitCause=0
	fi

	grep "^2$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		DivaTTYIgnoreNumberType=1
	else
		DivaTTYIgnoreNumberType=0
	fi

	grep "^3$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		DivaTTYNoCarrier=1
	else
		DivaTTYNoCarrier=0
	fi

}

extended_sdk_configuration()
{

	if [ $((StartHMPMode)) -ne 0 ]
	then
		set_system_hmp_debug_defaults
		return 0
	fi

	sdk_tmp=0

	if [ $((SDKLogLevel)) -lt 0 ]
	then
		SDKLogLevel=8
	fi
	if [ $((SDKLogLevel)) -gt 8 ]
	then
		SDKLogLevel=8
	fi

	if [ $((SDKLogFormat)) -lt 0 ]
	then
		SDKLogFormat=2
	fi
	if [ $((SDKLogFormat)) -gt 2 ]
	then
		SDKLogFormat=2
	fi

# ------------------------------

  msg="$dialog --clear --title \"Extended configuration\" "
  msg="$msg --backtitle \"$backtitle\" --radiolist \"Please select Diva SDK log level\" 16 70 9"
  msg="$msg \"0\" \"OFF\""
	if [ $((SDKLogLevel)) -eq 0 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"1\" \"Error messages (default)\""
	if [ $((SDKLogLevel)) -eq 1 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"2\" \"+ warning messages\""
	if [ $((SDKLogLevel)) -eq 2 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"3\" \" + info messages\""
	if [ $((SDKLogLevel)) -eq 3 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"4\" \"  + API trace messages\""
	if [ $((SDKLogLevel)) -eq 4 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"5\" \"   + debug messages\""
	if [ $((SDKLogLevel)) -eq 5 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"6\" \"    + all debug messages\""
	if [ $((SDKLogLevel)) -eq 6 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"7\" \"     + API data messages\""
	if [ $((SDKLogLevel)) -eq 7 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"8\" \"      + data messages\""
	if [ $((SDKLogLevel)) -eq 8 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 1
	fi

	sdk_tmp=$(cat $tmp)
	SDKLogLevel=$((sdk_tmp))

# ------------------------------

  msg="$dialog --clear --title \"Extended configuration\" "
  msg="$msg --backtitle \"$backtitle\" --radiolist \"Please select Diva SDK log format\" 10 70 3"
  msg="$msg \"0\" \"Text only\""
	if [ $((SDKLogFormat)) -eq 0 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"1\" \"Short\""
	if [ $((SDKLogFormat)) -eq 1 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

  msg="$msg \"2\" \"Date and Time\""
	if [ $((SDKLogFormat)) -eq 2 ]
	then
  	msg="$msg on "
	else
  	msg="$msg off "
	fi

	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return 1
	fi

	sdk_tmp=$(cat $tmp)
	SDKLogFormat=$((sdk_tmp))

# ------------------------------

	sdk_tmp=1
	while [ $((sdk_tmp)) -ne 0 ]
	do
		$dialog --clear --title "Please enter Diva SDK log file name" \
			  --backtitle "$backtitle" \
			  --inputbox "Default file name: '${diva_default_sdk_trace_file}'" 8 70 ${SDKLogFilename} 2>${tmp}
		if [ $(($?)) -ne 0 ]
		then
			sdk_tmp=0
			return 1
		fi
		SDKLogFilename=$(cat ${tmp})
		if [ -z "$SDKLogFilename" ]
		then
			SDKLogFilename="$diva_default_sdk_trace_file"
		else
			sdk_tmp=0
		fi
	done

# ------------------------------

	return 0
} # extended sdk configuration

diva_check_soft_ip_config()
{
	local i=65
	read_softip_config
	if [ $((StartDivaSoftIP)) -gt 0 ]
	then
		check_softip_adapters
		while [ $((CardSN[$i])) -eq $((0)) -a $((CCardSN[$i])) -eq $((0)) ]
		do
			Card_MADAPTER[$i]=$((CCard_MADAPTER[$i]))

			MTPX_CHANCAPI[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_EC[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_EC[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_RTP[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_RTP[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_FAX[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_FAX[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_FAXTIME[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_FAXTIME[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_CONTEXT[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_CONTEXT[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_HOLD[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_HOLD[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_GRP[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_GRP[$((Card_MADAPTER[$i]))]
			if [ $((${MTPX_CHANCAPI_GRP[$((Card_MADAPTER[$i]))]})) -eq 0 ]
			then
				MTPX_CHANCAPI_GRP[$((Card_MADAPTER[$i]))]="1"
			fi
			MTPX_CHANCAPI_CGRP[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_CGRP[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_PGRP[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_PGRP[$((Card_MADAPTER[$i]))]
			MTPX_CHANCAPI_TGRP[$((Card_MADAPTER[$i]))]=CMTPX_CHANCAPI_TGRP[$((Card_MADAPTER[$i]))]

			i=$(($i+1))
		done
		while [ $((CardSN[$i])) -eq $((0)) ]
		do
			Card_MADAPTER[$i]=-1
			i=$(($i+1))
		done
	fi
	CardSN[$i]=-1
	Card_POTS_CONFIG_BY_LINE[$i]=-1
	max_card=$((i))
}

diva_check_madapter_config()
{
	#
	# Now verify if the MTPX adapter configuration is consistent
	#

	local madapter_offset=0
	local current_madapter=101
	local i=1
	while [ $((${CardSN[$((i))]})) -gt $((0)) ]
	do
		if [ $((${Card_MADAPTER[$((i))]})) -lt $((101)) ]
		then
			Card_MADAPTER[$((i))]=$((current_madapter))

	# ECT Mode
			MTPX_ECT[Card_MADAPTER[$i]]=0
	# Hunt Group
			MTPX_HI[Card_MADAPTER[$i]]=0

			current_madapter=$(($current_madapter+1))
			madapter_offset=$(($madapter_offset+1))
		else
			Card_MADAPTER[$((i))]=$((${Card_MADAPTER[$((i))]}+madapter_offset))
			if [ $((${Card_MADAPTER[$((i))]})) -ge $((current_madapter)) ]
			then
				current_madapter=$((${Card_MADAPTER[$((i))]}+1))
			fi
		fi
		i=$(($i+1))
	done

	i=65
	while [ $((${CardSN[$((i))]})) -eq $((0)) ]
	do
		if [ $((${Card_MADAPTER[$((i))]})) -lt $((101)) ]
		then
			Card_MADAPTER[$((i))]=$((current_madapter))
			current_madapter=$(($current_madapter+1))
			madapter_offset=$(($madapter_offset+1))
		else
			Card_MADAPTER[$((i))]=$((${Card_MADAPTER[$((i))]}+madapter_offset))
			if [ $((${Card_MADAPTER[$((i))]})) -ge $((current_madapter)) ]
			then
				current_madapter=$((${Card_MADAPTER[$((i))]}+1))
			fi
		fi
		i=$(($i+1))
	done
}

#
# parameters
#		card number
#		ignore nt mode
#
check_hsi_card()
{
	if [ $((${Card_HSI_CLOCK[$(($1))]})) -ne 0 ]
	then
		if [ $(($2)) -ne 0 -o $((${CardNT[$(($1))]})) -eq 0 ]
		then
			return 0
		fi
	fi

	return 1
}

select_best_hsi_port()
{
	local hsi_card=1
	local hsi_adapter=0

#
# Select supported board in TE mode and clock master
#
	while [ $((${CardSN[$((hsi_card))]})) -gt $((0)) ]
	do
		if [ $((${Card_SYNC_CAPABLE[$hsi_card]})) -ne 0 -a $((${Card_SYNC_MODE[$hsi_card]})) -ne 0 ]
		then
			hsi_adapter=$(($hsi_card+${Card_SYNC_PORT[$hsi_card]}))
			check_hsi_card $((hsi_adapter)) 0
			if [ $(($?)) -eq 0 ]
			then
				HSIPORT=$((hsi_adapter))
				return 0
			fi
		fi
		if [ $((${CardADAPTERS[$hsi_card]})) -gt 1 ]
		then
			hsi_card=$(($hsi_card+$((${CardADAPTERS[$hsi_card]}))))
		else
			hsi_card=$(($hsi_card+1))
		fi
	done

#
# Select supported board in TE mode
#
	hsi_card=1
	while [ $((${CardSN[$((hsi_card))]})) -gt $((0)) ]
	do
		check_hsi_card $((hsi_card)) 0
		if [ $(($?)) -eq 0 ]
		then
			HSIPORT=$((hsi_card))
			return 0
		fi
		hsi_card=$(($hsi_card+1))
	done

#
# Supported board in TE mode is not available
# Select supported board in NT mode
#
	hsi_card=1
  while [ $((${CardSN[$((hsi_card))]})) -gt $((0)) ]
	do
    check_hsi_card $((hsi_card)) 1
    if [ $(($?)) -eq 0 ]
    then
      HSIPORT=$((hsi_card))
      return 0
    fi
    hsi_card=$(($hsi_card+1))
	done

	return 1
}

diva_check_hsi_port()
{

	if [ $((StartHMPMode)) -eq 0 ]
	then
		return
	fi

	if [ $((HSIPORT)) -lt 1 ]
	then
		select_best_hsi_port
		return
	fi

	check_hsi_card $((HSIPORT)) 0
	if [ $(($?)) -ne 0 ]
	then
		HSIPORT=0
		select_best_hsi_port
		return
	fi
}

#
# Main Entry
#
if [ ! -f $didd_file ]
then
	$host_driver_load ${diva_dir}divadidd${driver_suffix}
	if [ ! -f $didd_file ]
	then
		failed_driver="DIDD"
		fatal_exit
	fi
fi

if [ ! -f $xdi_file ]
then
	$host_driver_load ${diva_dir}divas${driver_suffix} ${xdi_load_options}
	if [ ! -f $xdi_file ]
	then
		no_server_cards=1
		fatal_exit
	fi
fi

if [ $((check_diva_device_nodes)) -ne $((0)) ]
then
  check_diva_device_node_file "DivasDIDD" "/dev/DivasDIDD"
	check_diva_device_node_file "Divas" "/dev/Divas"
fi


# -----------------------------------------------------------------
#
#  In case configuration is not changed this is no need to update
#  the system configuration file
#
# -----------------------------------------------------------------
if [ $((cmd_generate_config)) -ne 0 ]
then
	${diva_dir}diva_check_cfg_changes.sh > /dev/null 2>&1
	if [ $(($?)) -eq $((0)) ]
	then
		exit 0
	fi
else
	${diva_dir}diva_check_cfg_changes.sh > /dev/null 2>&1
	if [ $(($?)) -eq $((5)) ]
	then
		msg="$dialog --title \"Can not upgrade existing configuration\" --backtitle \"$backtitle\""
		msg="$msg --clear --yesno \"Due to important structural changes your existing diva configuration can"
		msg="$msg not be used in this new software suite. Your existing configuration will be saved and"
		msg="$msg a default configuration will be created instead."
		msg="$msg Do you want to continue?\" 10 70"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			exit 0
		fi
		cp ${diva_dir}divas_cfg.rc ${diva_dir}divas_cfg.rc.8.3
		echo "Your existing configuration has been saved as" > $tmp
		echo "${diva_dir}divas_cfg.rc.8.3." >> $tmp
		$dialog --title "Can not upgrade existing configuration" --backtitle "$backtitle" --clear --textbox $tmp 8 70
	fi
fi

#
# Check if CFGLib is available
#
if [ -e ${cfg_lib_device} ]
then
	available_cfg_lib_version=$(cat ${cfg_lib_device} 2>/dev/null | grep cfglib 2>/dev/null | sed -e "s/^.*://" -e "s/ //g;" - 2>/dev/null)

	if [ $((available_cfg_lib_version)) -ge $((cfg_lib_version)) ]
	then
		cfg_lib_available=1
	fi
fi

if [ $((sipcontrol_present)) -ne $((0)) ]
then
	read_sipcontrol_config
fi
#
# Now detect boards and read card parameters
#
logical_adapters=0
logical_adapter=0
adapter_sn=0
i=1
while [ true ]
do

  if [ -f ${diva_proc}adapter${i}/info ]
  then
    CardSN[$i]=$($divaload $((i)) -SerialNumber)
    CardVISUALNAME[$i]=$($divaload $((i)) -CardName)
    CardNAME[$i]=$($divaload $((i)) -CardOrdinal)
    CardNOTE[$i]=$(cat ${diva_proc}adapter${i}/info)
    current_card=$((i))
    set_card_defaults
  else
    if [ $((pci_device_detected)) -eq $((1)) ] || [ $((usb_device_detected)) -eq $((1)) ]
    then
      break
    fi

    if [ $((pci_device_detected)) -eq $((0)) ] && [ $((usb_device_detected)) -eq $((0)) ]
    then
      lspci -d 0x1133:0xe00d 2>/dev/null | grep -i "Diva ISDN Pro 3.0 PCI" > /dev/null 2>&1
      if [ $(($?)) -eq $((0)) ]
      then
        CardSN[$i]=1
        CardNAME[$i]="64"
        CardVISUALNAME[$i]="Dialogic Diva Pro 3.0 PCI"
        CardNOTE[$i]=$(lspci -v -d 0x1133:0xe00d 2>/dev/null)
        pci_device_detected=1
        current_card=$((i))
        set_card_defaults
      fi
    fi

    if [ $((pci_device_detected)) -eq $((0)) ] && [ $((usb_device_detected)) -eq $((0)) ]
    then
      lspci -d 0x1133:0xe00b 2>/dev/null | grep -i "Diva ISDN PCI 2.02" > /dev/null 2>&1
      if [ $(($?)) -eq $((0)) ]
      then
        CardSN[$i]=1
        CardNAME[$i]="58"
        CardVISUALNAME[$i]="Dialogic Diva ISDN PCI 2.02"
        CardNOTE[$i]=$(lspci -v -d 0x1133:0xe00b 2>/dev/null)
        pci_device_detected=1
        current_card=$((i))
        set_card_defaults
      fi
    fi

    if [ $((pci_device_detected)) -eq $((0)) ] && [ $((usb_device_detected)) -eq $((0)) ]
    then
      lsusb -v -d 0x071d:0x1005 2>/dev/null | grep -i "Eicon Diva USB" > /dev/null 2>&1
      if [ $(($?)) -eq $((0)) ]
      then
        CardSN[$i]=1
        CardNAME[$i]="91"
        CardVISUALNAME[$i]="Diva ISDN USB 4.0"
        CardNOTE[$i]=$(lsusb -v -d 0x071d:0x1005 2>/dev/null)
        usb_device_detected=1
        current_card=$((i))
        set_card_defaults
      fi
    fi

    if [ $((pci_device_detected)) -eq $((0)) ] && [ $((usb_device_detected)) -eq $((0)) ]
    then
      break
    fi

  fi

	#
	# Check for logical boards
	#
	if [ $((logical_adapters)) -eq 0 ]
	then
		if [ $((${CardADAPTERS[$i]})) -gt 1 ]
		then
			CardSUBADAPTER[$i]=1
			CardPORT[$i]=" - PORT 1"
			logical_adapter=2
			logical_adapters=$((${CardADAPTERS[$i]}-1))
			adapter_sn=${CardSN[$i]}
		else
			CardSUBADAPTER[$i]=1
			CardPORT[$i]=""
		fi
	else
		CardSN[$i]=$adapter_sn
		CardPORT[$i]=" - PORT $logical_adapter"
		CardSUBADAPTER[$i]=$logical_adapter
		logical_adapter=$(($logical_adapter+1))
		logical_adapters=$(($logical_adapters-1))
	fi

	if [ $((Card_ANALOG[$i])) -gt 0 ]
	then
	  j=$((1))
	  while [ $((j)) -le $((Card_ANALOG[$i])) ]
	  do
	  	set_analog_line_defaults $((128 + $j + $i * 8))
	  	j=$(($j+1))
	  done
	fi

	update_card_serial_number
	read_card_config

	i=$(($i+1))
done
CardSN[$i]=-1

diva_check_soft_ip_config
diva_check_madapter_config
diva_check_hsi_port

#
# Unload the drivers if necessary - we have already got
# all necessary information about the boards
#
current_card=1

# --------------------------------------------------------------
#  Re-create the configuration file in case of non-interactive
#  procedure
# --------------------------------------------------------------
if [ $((cmd_generate_config)) -ne 0 ]
then
	create_card_configuration_file
	store_card_configuration_to_file
  if [ $((StartOnBoot)) -ne 0 ]
  then
    /bin/bash ${diva_dir}cfg_util.sh 1  > /dev/null 2>&1
  else
    /bin/bash ${diva_dir}cfg_util.sh 2  > /dev/null 2>&1
  fi
	exit 0
fi
# --------------------------------------------------------------
#  End Re-create the configuration file in case of non-interactive
#  procedure
# --------------------------------------------------------------

#
# SELECT SYSTEM MODE
#
msg="\"T\" \" - TTY interface\""
if [ $((StartTTY)) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"P\" \" - PIAFS support for TTY\""
if [ $((StartTTY)) -ne 0 -a $((TTY_PIAFS)) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"F\" \" - fax/voice support for TTY\""
if [ $((StartTTY)) -ne 0 -a $((TTY_FAX)) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
height=3
hwnote=""
hw_adapters=$(lspci -d 0x1133:)
if [ $((max_softip_adapters)) -eq 0 -o $(($?)) -ne 0 -o "${hw_adapters}" != "" ]
then
	msg="$msg \"C\" \" - CAPI 2.0 interface\""
	if [ $((StartCAPI)) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	height=$((height+1))
fi

# ------------------------------------------
#  Deactivate HMP
# ------------------------------------------
# if [ "${hw_adapters}" != "" ]
# then
# 	msg="$msg \"H\" \" - HMP GC/R4/MM interface\""
# 	if [ $((StartHMPMode)) -ne 0 ]
# 	then
# 		msg="$msg on"
# 	else
# 		msg="$msg off"
# 	fi
# 	height=$((height+1))
# fi
# ------------------------------------------

set_help_id system_applications
msg="$dialog ${help} --title \"System interfaces to activate\" \
				--backtitle \"$backtitle\" \
				--clear --checklist \"Please select the required applications\" $((height+7)) 70 $((height)) $msg"

echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
#
# Abort Configuration ?
#
if [ $(($?)) -ne 0 ]
then
	configuration_aborted=1
	fatal_exit
fi
grep "T" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	StartTTY=1
else
	StartTTY=0
fi
grep "P" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	StartTTY=1
	TTY_PIAFS=1
else
	TTY_PIAFS=0
fi
grep "F" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	StartTTY=1
	TTY_FAX=1
else
	TTY_FAX=0
fi
grep "C" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	StartCAPI=1
else
	StartCAPI=0
fi
grep "S" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	StartCAPI=1
	StartDivaSIPcontrol=1
else
	StartDivaSIPcontrol=0
fi
grep "I" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 -o "${hw_adapters}" == "" ]
then
	StartCAPI=1
	StartDivaSoftIP=1
else
	StartDivaSoftIP=0
fi
grep "7" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	StartCAPI=1
	StartDivaSS7=1
	SS7_type="normal"
else
	StartDivaSS7=0
fi
grep "H" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	StartHMPMode=1
	StartCAPI=1
	StartDivaSIPcontrol=0
	StartDivaSoftIP=0
	StartTTY=0
	TTY_PIAFS=0
	TTY_FAX=0
	GlobalCapiGO=0

	set_system_hmp_debug_defaults


	set_help_id hmp_cpuspeed_warning
	if [ -s "${hlp}" ]
	then
		$dialog --title "CPU power management" --backtitle "$backtitle" --clear --textbox ${hlp} 18 70
		rm -f ${hlp}
	fi

else
	StartHMPMode=0
fi

#
# Set TTY interface initialiation command
#
if [ $((StartTTY)) -ne 0 ]
then
	$dialog --clear --title "Global TTY options" --backtitle "$backtitle" \
		--inputbox "Please enter TTY interface init string if required"  \
		10 70 ${GlobalTTYATInit} 2>$tmp
	if [ $(($?)) -ne 0 ]
	then
		GlobalTTYATInit=""
	else
		GlobalTTYATInit=$(cat $tmp)
	fi
fi

#
# Select System Interface Options
#
if [ $((StartTTY)) -ne 0 -a $((TTY_FAX)) -ne 0 ]
then
	msg="     \"0\"  \"- Enable ECM for FAX CLASS 2\""
	if [ $((GlobalFaxClass2Options)) -eq $((1)) -o $((GlobalFaxClass2Options)) -eq $((3)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\"  \"- Enable V.34 (33600) for FAX CLASS 2\""
	if [ $((GlobalFaxClass2Options)) -eq $((2)) -o $((GlobalFaxClass2Options)) -eq $((3)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\"  \"- Enable V.34 FAX CLASS 2 speed indication\""
	if [ $((GlobalFaxClass2OptionsV34Rate)) -eq $((1)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"3\"  \"- Enable Super Fine/Ultra Fine resolutions\""
	if [ $((GlobalFaxClass2OptionsHiRes)) -eq $((1)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"4\"  \"- Enable SEP/SUB/PWD for FAX CLASS 2\""
	if [ $((GlobalFaxClass2OptionsSEP)) -eq $((1)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id tty_cl2_opt
	msg="$dialog ${help} --clear \
			--title \"Global TTY options\" --backtitle \"$backtitle\" \
			--separate-output \
			--checklist \"Please configure FAX CLASS 2 options\" 12 70 5 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		configuration_aborted=1
		fatal_exit
	fi
	GlobalFaxClass2Options=0
	GlobalFaxClass2OptionsSEP=0
	GlobalFaxClass2OptionsV34Rate=0
	GlobalFaxClass2OptionsHiRes=0
	grep "^0$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		GlobalFaxClass2Options=1
	fi
	grep "^1$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		GlobalFaxClass2Options=$(($GlobalFaxClass2Options+2))
	fi
	grep "^2$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		GlobalFaxClass2OptionsV34Rate=1
	fi
	grep "^3$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		GlobalFaxClass2OptionsHiRes=1
	fi
	grep "^4$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		GlobalFaxClass2OptionsSEP=1
	fi
fi

if [ $((TTY_PIAFS)) -ne 0 ]
then
	$dialog --clear --title "Global options" --backtitle "$backtitle" \
			--inputbox "Please enter additional PIAFS link RTF in frames (0...64)" 10 70 $GlobalPiafsRTF 2>$tmp
	if [ $(($?)) -ne 0 ]
	then
		configuration_aborted=1
		fatal_exit
	fi
  GlobalPiafsRTF=$(cat $tmp)
  GlobalPiafsRTF=$((GlobalPiafsRTF))
  if [ $((GlobalPiafsRTF)) -gt 64 ]
  then
    GlobalPiafsRTF=64
  fi
fi

#
# Now inform customer if any board with frozen
# state of the software features was detected.
#
if [ $((cmd_generate_config)) -eq $((0)) ]
then

	i=1
	show_frozen_adapter_info=0
	show_frozen2_adapter_info=0

	while [ $((${CardSN[$((i))]})) -ge $((1)) ]
	do
		if [ $((${Card_FROZEN[$((i))]})) -eq $((1)) ]
		then
			show_frozen_adapter_info=1
		fi
		if [ $((${Card_FROZEN2[$((i))]})) -eq $((1)) ]
		then
			show_frozen2_adapter_info=1
		fi
		i=$(($i+1))
	done

	if [ $((show_frozen_adapter_info)) -gt $((0)) ]
	then
		sed -ne "/<frozen_adapter_info_header>/,/<frozen_adapter_info_header\/>/p" ${hlp_base} | sed -e "/<frozen_adapter_info_header>/d" -e "/<frozen_adapter_info_header\/>/d" - | sed -e "s/<\/p>/\n\n/g" - | sed -e "s/<cs id=\"128\">\xae<\/cs>/(R)/g" - | sed -e "s/<[a-zA-Z\/][^>]*>//g" - | ${fold} > ${hlp}
		echo "" >> ${hlp}

		i=1
		while [ $((${CardSN[$((i))]})) -ge $((1)) ]
		do
			if [ $((${Card_FROZEN[$((i))]})) -eq $((1)) ]
			then
				echo "Board $i ${CardVISUALNAME[$i]} SN:${CardSN[$i]}${CardPORT[$i]}" >> ${hlp}
			fi
			i=$(($i+1))
		done

		echo "" >> ${hlp}
		sed -ne "/<frozen_adapter_info_suffix>/,/<frozen_adapter_info_suffix\/>/p" ${hlp_base} | sed -e "/<frozen_adapter_info_suffix>/d" -e "/<frozen_adapter_info_suffix\/>/d" - | sed -e "s/<\/p>/\n\n/g" - | sed -e "s/<cs id=\"128\">\xae<\/cs>/(R)/g" - | sed -e "s/<[a-zA-Z\/][^>]*>//g" - | ${fold} >> ${hlp}

		echo "" >> ${hlp}
		sed -ne "/<frozen_adapter_info_console_suffix>/,/<frozen_adapter_info_console_suffix\/>/p" ${hlp_base} | sed -e "/<frozen_adapter_info_console_suffix>/d" -e "/<frozen_adapter_info_console_suffix\/>/d" - | sed -e "s/<\/p>/\n\n/g" - | sed -e "s/<cs id=\"128\">\xae<\/cs>/(R)/g" - | sed -e "s/<[a-zA-Z\/][^>]*>//g" - | ${fold} >> ${hlp}

		$dialog --title "Discontinued hardware has been detected" \
					--backtitle "$backtitle" \
					--clear --textbox ${hlp} 18 70
		rm -f ${hlp}
	fi

	if [ $((show_frozen2_adapter_info)) -gt $((0)) ]
	then
		sed -ne "/<frozen2_adapter_info_header>/,/<frozen2_adapter_info_header\/>/p" ${hlp_base} | sed -e "/<frozen2_adapter_info_header>/d" -e "/<frozen2_adapter_info_header\/>/d" - | sed -e "s/<\/p>/\n\n/g" - | sed -e "s/<cs id=\"128\">\xae<\/cs>/(R)/g" - | sed -e "s/<[a-zA-Z\/][^>]*>//g" - | ${fold} > ${hlp}
		echo "" >> ${hlp}

		i=1
		while [ $((${CardSN[$((i))]})) -ge $((1)) ]
		do
			if [ $((${Card_FROZEN2[$((i))]})) -eq $((1)) ]
			then
				echo "Board $i ${CardVISUALNAME[$i]} SN:${CardSN[$i]}${CardPORT[$i]}" >> ${hlp}
			fi
			i=$(($i+1))
		done

		echo "" >> ${hlp}
		sed -ne "/<frozen2_adapter_info_suffix>/,/<frozen2_adapter_info_suffix\/>/p" ${hlp_base} | sed -e "/<frozen2_adapter_info_suffix>/d" -e "/<frozen2_adapter_info_suffix\/>/d" - | sed -e "s/<\/p>/\n\n/g" - | sed -e "s/<cs id=\"128\">\xae<\/cs>/(R)/g" - | sed -e "s/<[a-zA-Z\/][^>]*>//g" - | ${fold} >> ${hlp}

		echo "" >> ${hlp}
		sed -ne "/<frozen2_adapter_info_console_suffix>/,/<frozen2_adapter_info_console_suffix\/>/p" ${hlp_base} | sed -e "/<frozen2_adapter_info_console_suffix>/d" -e "/<frozen2_adapter_info_console_suffix\/>/d" - | sed -e "s/<\/p>/\n\n/g" - | sed -e "s/<cs id=\"128\">\xae<\/cs>/(R)/g" - | sed -e "s/<[a-zA-Z\/][^>]*>//g" - | ${fold} >> ${hlp}

		$dialog --title "Discontinued hardware has been detected" \
					--backtitle "$backtitle" \
					--clear --textbox ${hlp} 18 70
		rm -f ${hlp}
	fi
fi

diva_configure_soft_ip_adapter()
{
	local i=0

	msg="\"1\" \"- A-Law (default for Europe)\""
	if [ $((${CardLAW[65]})) -eq 0 -o $((${CardLAW[65]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- u-Law\""
	if [ $((${CardLAW[65]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_companding_type
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select voice companding options\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	CardLAW[65]=$(cat $tmp)

	#
	# GLOBAL GAX OPTIONS - MAX FAX SPEED LIMIT
	#

	msg="\"0\"          \"- No fax speed limit (default)\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((0)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"31200\" \"- Limit to 31200 bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((31200)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"28800\" \"- Limit to 28800 bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((28800)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"26400\" \"- Limit to 26400 bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((26400)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"24000\" \"- Limit to 24000 bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((24000)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"21600\" \"- Limit to 21600 bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((21600)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"19200\" \"- Limit to 19200 bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((19200)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"14400\" \"- Limit to 14400 bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((14400)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"9600\"  \"- Limit to 9600  bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((9600)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"4800\"  \"- Limit to 4800  bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((4800)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2400\"  \"- Limit to 2400  bps\""
	if [ $((${CardFAX_SPEED[65]})) -eq $((2400)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_fax_speed_limit
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please configure global fax option - maximal fax speed limit\" 18 70 11 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	CardFAX_SPEED[65]=$(cat $tmp)

	#
	# GLOBAL GAX OPTIONS - MIN FAX SPEED LIMIT
	#
	msg="\"0\"          \"- No fax speed limit (default)\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((0)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"31200\" \"- Not less than 31200 bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((31200)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"28800\" \"- Not less than 28800 bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((28800)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"26400\" \"- Not less than 26400 bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((26400)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"24000\" \"- Not less than 24000 bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((24000)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"21600\" \"- Not less than 21600 bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((21600)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"19200\" \"- Not less than 19200 bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((19200)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"14400\" \"- Not less than 14400 bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((14400)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"9600\"  \"- Not less than 9600  bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((9600)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"4800\"  \"- Not less than 4800  bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((4800)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2400\"  \"- Not less than 2400  bps\""
	if [ $((${CardMIN_FAX_SPEED[65]})) -eq $((2400)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_fax_speed_limit
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please configure global fax option - minimal fax speed limit\" 18 70 11 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	CardMIN_FAX_SPEED[65]=$(cat $tmp)

	#
	# Max session overhead
	#
	i=30
	msg=""
	msg="$msg \"0\" \"Off (default)"
	msg="$msg\""
	if [ $((${Card_FAX_MAX_OVERHEAD[65]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	while [ $((i)) -le $((240)) ]
	do
		msg="$msg \"$((i))\" \"Sec"
		msg="$msg\""
		if [ $((${Card_FAX_MAX_OVERHEAD[65]})) -eq $((i)) ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		i=$(($i+30))
	done

	set_help_id max_fax_overhead
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select non productive fax session time limit\" 16 70 9 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	Card_FAX_MAX_OVERHEAD[65]=$(cat $tmp)

	#
	#  GLOBAL FAX OPTIONS - T.30
	#
	msg="     \"0\"  \"- Disable fine resolution\""
	if [ $((${CardFAX_FINE[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\"  \"- Disable error correction mode (ECM)\""
	if [ $((${CardFAX_ECM[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\"  \"- Use ECM frame length of 64 bytes\""
	if [ $((${CardFAX_E64B[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"3\"  \"- Disable 2D fax document compression\""
	if [ $((${CardFAX_C2D[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"4\"  \"- Disable T.6 fax document compression\""
	if [ $((${CardFAX_CT6[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"5\"  \"- Disable uncompressed T.6 fax document lines\""
	if [ $((${CardFAX_DUC[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"6\"  \"- Refuse incoming polling requests\""
	if [ $((${CardFAX_NPL[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"7\"  \"- Hide 'total pages' information in fax message\""
	if [ $((${CardFAX_HTL[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"8\"  \"- Hide 'head line' information in fax message\""
	if [ $((${CardFAX_HHL[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"9\"  \"- Hide 'page info' information in fax message\""
	if [ $((${CardFAX_HPI[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"10\" \"- Disable fallback to lower speed on failure\""
	if [ $((${CardFAX_DFB[65]})) -ne 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id adapter_fax_t30_options
	msg="$dialog ${help} --clear \
	    --title \"$card_title\" --backtitle \"$backtitle\" \
			--separate-output \
			--checklist \"Please configure global fax options - T.30 protocol\" 18 70 11 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi

	grep "^0$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_FINE[65]=0x0001
	else
		CardFAX_FINE[65]=0
	fi
	grep "^1$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_ECM[65]=0x0002
	else
		CardFAX_ECM[65]=0
	fi
	grep "^2$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_E64B[65]=0x0004
	else
		CardFAX_E64B[65]=0
	fi
	grep "^3$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_C2D[65]=0x0008
	else
		CardFAX_C2D[65]=0
	fi
	grep "^4$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_CT6[65]=0x0010
	else
		CardFAX_CT6[65]=0
	fi
	grep "^5$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_DUC[65]=0x0020
	else
		CardFAX_DUC[65]=0
	fi
	grep "^6$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_NPL[65]=0x0040
	else
		CardFAX_NPL[65]=0
	fi
	grep "^7$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_HTL[65]=0x0080
	else
		CardFAX_HTL[65]=0
	fi
	grep "^8$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_HHL[65]=0x0100
	else
		CardFAX_HHL[65]=0
	fi
	grep "^9$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_HPI[65]=0x0180
	else
		CardFAX_HPI[65]=0
	fi
	grep "^10$" $tmp > /dev/null 2>&1
	if [ $(($?)) -eq 0 ]
	then
		CardFAX_DFB[65]=0x0200
	else
		CardFAX_DFB[65]=0
	fi

	# -----------------------------------
	#  Part 68 Limiter options
	# -----------------------------------
	msg="\"0\" \"- Off\""
	if [ $((${Card_DISABLE_PART68[65]})) -eq 0 -o $((${Card_DISABLE_PART68[65]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- On\""
	if [ $((${Card_DISABLE_PART68[65]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id part68_limiter
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please configure Part 68 voice signal limiter\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	Card_DISABLE_PART68[65]=$(cat $tmp)

	# -----------------------------------
	#  DTMF supression optiions
	# -----------------------------------
	msg="\"0\" \"- Off (default)\""
	if [ $((${Card_DTMF_SUPRESSION[65]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- On\""
	if [ $((${Card_DTMF_SUPRESSION[65]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id dtmf_supression
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please configure DTMF clamping\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	Card_DTMF_SUPRESSION[65]=$(cat $tmp)

	# -----------------------------------
	#  Audio Recording AGC
	# -----------------------------------
	msg="\"0\" \"- Automatic Gain Control Off (default)\""
	if [ $((${Card_REC_AGC[65]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Automatic Gain Control On\""
	if [ $((${Card_REC_AGC[65]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id audio_rec_agc
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please configure Audio Recording AGC\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	Card_REC_AGC[65]=$(cat $tmp)

	# -----------------------------------
	#  Echo Canceller Tail Length
	# -----------------------------------
	msg="\"0\" \"- 128 ms (default)\""
	if [ $((${Card_EC_TAIL[65]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- 256 ms\""
	if [ $((${Card_EC_TAIL[65]})) -eq 256 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id ec_tail
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please configure Echo Canceller Tail Length\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		return
	fi
	Card_EC_TAIL[65]=$((256 * $(cat $tmp)))

}

#
# Start MAIN card configuration loop
#
while [ $((1)) -eq $((1)) ]
do
#
# START OF THE MAIN LOOP .{
#
# Generate card list used to display card selection dialog box
# or configure by line for analog cards
#

hw_adapters=$(lspci -d 0x1133:)
if [ $((StartDivaSoftIP)) -gt 0 -a "${hw_adapters}" == "" ]
then
	current_card=65
fi

if [ $((${Card_POTS_CONFIG_BY_LINE[$current_card]})) -lt 0 ]
then # {

i=1
msg=" \"0\" \"Save configuration and exit\" off "
msg="$msg \"X\" \"Discard changes and exit\" off "
while [ $((${CardSN[$((i))]})) -ge $((1)) ]
do
	msg="$msg\"$i\" \"${CardVISUALNAME[$i]} SN:${CardSN[$i]}${CardPORT[$i]}"
	if [ $((${Card_ResourceBoard[$((i))]})) -eq $((1)) ]
	then
		msg="$msg - (R)"
	fi
	if [ $((${CardNEW_CARD[$((i))]})) -eq $((1)) ]
	then
		msg="$msg - (NEW)"
	fi
	if [ $((${CardCFG_CHANGED[$((i))]})) -eq $((1)) ]
	then
		msg="$msg - (*)"
	fi
	msg="$msg\""
	if [ $((i)) -eq $((current_card)) ]
	then
		msg="$msg on "
	else
		msg="$msg off "
	fi
	i=$(($i+1))
done

if [ $((StartDivaSoftIP)) -gt 0 ]
then
	msg="$msg \"S\" \"Diva softIP Configuration\""
	if [ $((65)) -eq $((current_card)) ]
	then
		msg="$msg on "
	else
		msg="$msg off "
	fi
	i=$(($i+1))
fi

if [ $(($i-1)) -ge 9 ]
then
i=9
fi
high=$(($i+9))
set_help_id select_diva_adapter
msg="$dialog ${help} --clear \
			--title \"Diva Board selection\" --backtitle \"$backtitle\" \
			--radiolist \"Please select available Diva Board or exit configuration\" $high 75 $(($i+2)) $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
#
# Abort Configuration ?
#
if [ $(($?)) -ne 0 ]
then
	configuration_aborted=1
	exit_configuration=0
	fatal_exit
	continue
fi
current_card=$(cat $tmp)

if [ "$current_card" = "X" ]
then
	current_card=1
	exit_configuration=0
	configuration_aborted=1
	fatal_exit
	continue
fi

if [ "$current_card" = "L" ]
then
	manage_adapter_license
	current_card=1
	continue
fi


if [ "$current_card" = "S" ]
then
	card_title="softIP Configuration"
	while [ $((1)) -eq $((1)) ]
	do
		current_card=65
		diva_configure_soft_ip_adapter
		if [ $(($?)) -le 0 ]
		then
			break
		fi
	done
	current_card=65
	continue
fi

if [ $((current_card)) -eq  $((0)) ]
then
	current_card=1

	if [ $((start_extended_configuration)) -eq 1 ]
	then
		extended_tty_configuration
		extended_sdk_configuration
		extended_system_configuration
	fi

	exit_configuration=1
	configuration_aborted=0
	fatal_exit
	continue
fi

#
# OK, user has selected a card.
# View information about this card
# Prepare all variables associated with this card
#
card_title="Board $current_card - ${CardVISUALNAME[$current_card]} SN:${CardSN[current_card]}${CardPORT[$current_card]}"

echo "${CardNOTE[$current_card]}" > $tmp
$dialog --title "$card_title" --backtitle "$backtitle" \
	--clear --textbox $tmp 18 70

#
# Mark card as one with changed configuration
#
CardNEW_CARD[$current_card]=0
CardCFG_CHANGED[$current_card]=1

if [ $((${Card_ANALOG[$current_card]})) -gt 0 ]
then
  Card_POTS_CONFIG_BY_LINE[$current_card]=0
  continue
fi

else # } {
	#
  # select analog line to configure
	# Card_POTS_CONFIG_BY_LINE contains the physical linenumber, 0 for global, or -1 to jump back
  # current_line contains the mapped cardindex (128 + line + card * 8: card1=137-144, card2=145-152,...)

	i=1
	msg=" \"X\" \"Back to Board selection\" off "
	while [ $((${Card_ANALOG[$current_card]})) -ge $((i)) ]
	do
		msg="$msg\"$i\" \"${CardVISUALNAME[$current_card]} Line-$i\""
		if [ $((i)) -eq $((Card_POTS_CONFIG_BY_LINE[$current_card])) ]
		then
			msg="$msg on "
		else
			msg="$msg off "
		fi
		i=$(($i+1))
	done
	msg="$msg\"G\" \"${CardVISUALNAME[$current_card]} Global Settings\""
	if [ $((Card_POTS_CONFIG_BY_LINE[$current_card])) -eq 0 ]
	then
		msg="$msg on "
	else
		msg="$msg off "
	fi

	high=$((${Card_ANALOG[$current_card]}+9))
	set_help_id select_diva_line
	msg="$dialog ${help} --clear \
				--title \"Diva analog Board line selection\" --backtitle \"$backtitle\" \
				--radiolist \"Please select analog line to configure or exit\" $high 70 $(($high-7)) $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		Card_POTS_CONFIG_BY_LINE[$current_card]=-1
		current_line=0
		continue
	fi
	current_line=$(cat $tmp)

	if [ "$current_line" = "X" ]
	then
		Card_POTS_CONFIG_BY_LINE[$current_card]=-1
		current_line=0
		continue
	fi
	if [ "$current_line" = "G" ]
	then
		current_line=0
	fi
 	Card_POTS_CONFIG_BY_LINE[$current_card]=$((current_line))
	if [ $((current_line)) -gt 0 ]
	then
		current_line=$((128 + $current_line + $current_card * 8))
	fi
fi # }

#
#  TE/NT MODE SELECTION
#
if [ $((${CardNT_CAPABLE[$current_card]})) -eq 1 ]
then
	msg="\"0\" \"Terminal Equipment (TE) mode, default\""
	if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 -a $((${CardNT[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"Network Terminator (NT) mode\""
	if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 -a  $((${CardNT[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	high=2
	if [ $((${Card_FROZEN2[$current_card]})) -eq 0 ]
	then
		get_resourceboard_channels
		i=$(($?))
		get_adapter_channel_count $current_card
		i=$(($i+$?))
		if [ $((${Card_ResourceBoard[$current_card]})) -eq 1 -o $(($i)) -le $(($max_softip_links)) ]
		then
			msg="$msg \"R\" \"IP Resource board mode\""
			if [ $((${Card_ResourceBoard[$current_card]})) -eq 1 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			high=3
		fi
	fi

	set_help_id adapter_te_nt_mode
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select interface mode (TE/NT/Resource board)\" $(($high+7)) 70 $high $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	i=${CardNT[$current_card]}
	ret=$(cat $tmp)
	if [ "${ret}" == "R" ]
	then
		Card_ResourceBoard[$current_card]=1
		check_softip_adapters
		card_title="Resource Board Configuration"
	else
		Card_ResourceBoard[$current_card]=0
		check_softip_adapters

		CardNT[$current_card]=$(cat $tmp)

		if [ $((i)) -ne $((${CardNT[$current_card]})) ]
		then
			if [ $((${CardNT[$current_card]})) -eq 1 ]
			then
				CardRBS_RXTO[$current_card]=15
				CardRBS_GLARE[$current_card]=0
			else
				CardRBS_RXTO[$current_card]=10
				CardRBS_GLARE[$current_card]=1
			fi
		fi
	fi
fi

#
#  CLOCK SYNC Mode
#
if [ $((${Card_SYNC_CAPABLE[$current_card]})) -eq 1 -a $((${CardSUBADAPTER[$current_card]})) -eq 1 ]
then
  found_nt=0
  found_te=0
  j=0
  while [ $((j)) -le $((3)) ]
  do
    if [ $((${CardNT[$(($current_card+$j))]})) -eq $((0)) ]
    then
      found_te=1
    else
      found_nt=1
    fi
    j=$((j+1))
  done
  if [ $(($found_te)) -eq $((1)) -a $((found_nt)) -eq $((1)) ]
  then
		msg="\"0\" \"Standard mode, default\""
		if [ $((${Card_SYNC_MODE[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"Synchronising mode\""
		if [ $((${Card_SYNC_MODE[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		high=2

		set_help_id adapter_sync_mode
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please select clock synchronising mode\" $(($high+7)) 70 $high $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		Card_SYNC_MODE[$current_card]=$(cat $tmp)
	else
	  Card_SYNC_MODE[$current_card]=0
	fi
fi

#
#  CLOCK SYNC Port
#
if [ $((${Card_SYNC_CAPABLE[$current_card]})) -eq 1 -a $((${CardSUBADAPTER[$current_card]})) -eq 1 -a $((${Card_SYNC_MODE[$current_card]})) -eq 1 ]
then
  msg=""
  j=0
  high=0
  while [ $((j)) -lt $((${CardADAPTERS[$current_card]})) ]
  do
    if [ $((${CardNT[$(($current_card+$j))]})) -eq $((0)) ]
    then
      msg="$msg \"$((j+1))\" \"Port $((j+1))\""
    	if [ $((${Card_SYNC_PORT[$current_card]})) -eq $((j)) ]
	    then
    		msg="$msg on"
    	else
    		msg="$msg off"
    	fi
      high=$(($high+1))
    fi
    j=$((j+1))
  done

	set_help_id adapter_sync_port
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select clock synchronising port\" $(($high+7)) 70 $high $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	Card_SYNC_PORT[$current_card]=$(($(cat $tmp)-1))
fi

# ----------------------------------------------------------------
# Protocol Code Revision Selection
# ----------------------------------------------------------------
if [ $((Card2M[$current_card])) -eq $((1)) ]
then
	msg="\"0\" \"- No optimization (default)\""
	if [ $((${CardBRI_REV[$current_card]})) -eq $((0)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Optimized for fax/voice/unified messaging\""
	if [ $((${CardBRI_REV[$current_card]})) -eq $((1)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- Optimized for RAS\""
	if [ $((${CardBRI_REV[$current_card]})) -eq $((2)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_bri_rev_1_optimization
	msg="$dialog ${help} \
		--clear --title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select Board profile\" 11 70 3 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardBRI_REV[$current_card]=$(cat $tmp)
fi

if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
then #{

#
# PROTOCOL SELECTION
#
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then # {
	i=1
	msg=" "
	while [ ${PriProtPROT[$i]} != "none" ]
	do
			show_pri_protocol=1
			if [ $((${PriProtSS7[$i]})) -ne 0 -a $((ss7_found)) -eq 0 ]
			then
				show_pri_protocol=0
			fi

    if [ $((show_pri_protocol)) -ne 0 ]
		then
			msg="$msg \"$i\" \"${PriProtPROT[$i]} - ${PriProtNOTE[$i]}\""
			if [ $((${CardPROT[$current_card]})) -eq $((i)) ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
		fi

		i=$(($i+1))
	done
else # }{
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		i=1
		msg=" "
		while [ ${BriProtPROT[$i]} != "none" ]
		do
			show_bri_protocol=1
			if [ $((${BriProtNOSIG[$i]})) -ne 0 -o $((${BriProtQSIG[$i]})) -ne 0 ]
			then
				show_bri_protocol=0
			fi

			if [ $((show_bri_protocol)) -ne 0 -o $((${Card_SOFTWARE[$current_card]})) -eq 0 ]
			then
				msg="$msg \"$i\" \"${BriProtPROT[$i]} - ${BriProtNOTE[$i]}\""
				if [ $((${CardPROT[$current_card]})) -eq $((i)) ]
				then
					msg="$msg on"
				else
					msg="$msg off"
				fi
			fi
			i=$(($i+1))
		done

# --------------------------------------
	else
# --------------------------------------
#   Analog Board
# --------------------------------------
		i=1
		if [ $((current_line)) -eq 0 ]
		then
		msg=" "
			j=$(($current_card))
		else
			msg=" \"G\" \"Use global setting\""
			j=$(($current_line))
			if [ $((${CardPROT[$j]})) -lt 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
		fi
		while [ ${AnalogProtPROT[$i]} != "none" ]
		do
			msg="$msg \"$i\" \"${AnalogProtPROT[$i]} - ${AnalogProtNOTE[$i]}\""
			if [ $((${CardPROT[$j]})) -eq $((i)) ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			i=$(($i+1))
		done

# --------------------------------------
	fi
fi #}

if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
then
# --------------------------------------
#   Other Board
# --------------------------------------
	set_help_id adapter_switch_type
	msg="$dialog ${help} --clear --title \"$card_title\" \
		--backtitle \"$backtitle\" \
		--radiolist \"Please select D-channel protocol\" 21 70 14 $msg"
# --------------------------------------
else
# --------------------------------------
#   Analog Board
# --------------------------------------

	set_help_id adapter_trunk_type
	msg="$dialog ${help} --clear --title \"$card_title\" \
		--backtitle \"$backtitle\" \
		--radiolist \"Please select trunk type\" 14 70 6 $msg"

# --------------------------------------
fi

echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi

i=${CardPROT[$current_card]}

if [ $((current_line)) -eq 0 ]
then
CardPROT[$current_card]=$(cat $tmp)
else
	CardPROT[$current_line]=$(cat $tmp)
	if [ "${CardPROT[$current_line]}" = "G" ]
	then
	  CardPROT[$current_line]=-1
	fi
fi

else # } {

#
# Resource Board
#
i=${CardPROT[$current_card]}
CardPROT[$current_card]=$((resource_board_protocol))

fi #}

#
# Protocol was changed, set new defaults
if [ $((i)) -ne $((${CardPROT[$current_card]})) ]
then #{
	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then # {
		if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
		then
			CardLTONE[$current_card]=0
			if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -eq 3 ]
			then
				MTPX_HI[Card_MADAPTER[$current_card]]=0
			fi
		fi
		if [ $((${PriProtNT2NO[${CardPROT[$current_card]}]})) -eq 1 ]
		then
			CardNT2[$current_card]=0
		else
			if [ $((${PriProtNT2[${CardPROT[$current_card]}]})) -eq 1 ]
			then
				CardNT2[$current_card]=1
			else
				CardNT2[$current_card]=0
			fi
		fi
		if [ $((${PriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
    then
			CardSTEI[$current_card]=0
			CardNTEI[$current_card]=0
		  CardP2P[$current_card]=0
    fi
		if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 1 ]
    then
			CardSTEI[$current_card]=0
			CardNTEI[$current_card]=0
		  CardP2P[$current_card]=0
    fi
		if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -eq 1 ]
    then
			CardSTEI[$current_card]=0
			CardNTEI[$current_card]=0
		  CardP2P[$current_card]=0
      CardR2_AUTOALERT[$current_card]=1
      if [ $((${CardDIDLEN[$current_card]})) -eq 0 ]
			then
        CardDIDLEN[$current_card]=4
			fi
		  if [ $((${PriProtR2Dialect[${CardPROT[$current_card]}]})) -gt 0 ]
			then
				CardR2_CTRYLEN[$current_card]=2
				CardR2_NOCLI[$current_card]=0
			else
				CardR2_CTRYLEN[$current_card]=0
				CardR2_NOCLI[$current_card]=0
			fi
    fi
	else # }{
		if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
		then #{
# --------------------------------------
#   BRI Board
# --------------------------------------
			if [ $((${BriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
			then #{
				CardLTONE[$current_card]=0
			fi   #}

			if [ $((${BriProtNT2NO[${CardPROT[$current_card]}]})) -eq 1 ]
			then #{
				CardNT2[$current_card]=0
			fi   #}

			CardAUTO_SPID_DISABLE[$current_card]=0
			CardALWAYS_RING_VOICE[$current_card]=0

			CardUS_EKTS_N_CACH_HANDLES[$current_card]=0
			CardUS_EKTS_BEGIN_CONF[$current_card]=61
			CardUS_EKTS_DROP_CONF[$current_card]=63
			CardUS_EKTS_CALL_TRANSFER[$current_card]=62
			CardUS_EKTS_MWI[$current_card]=0

			CardSPID1[$current_card]=""
			CardSPID1MSN[$current_card]=""
			CardSPID2[$current_card]=""
			CardSPID2MSN[$current_card]=""

			CardBRI_LK[$current_card]=0

			case ${BriProtPROT[${CardPROT[$current_card]}]} in
				'5ESS') CardUS_EKTS_BEGIN_CONF[$current_card]=0
								CardUS_EKTS_DROP_CONF[$current_card]=0
								CardUS_EKTS_CALL_TRANSFER[$current_card]=0
								CardUS_EKTS_MWI[$current_card]=63
							;;

				'NI') CardUS_EKTS_BEGIN_CONF[$current_card]=61
							CardUS_EKTS_DROP_CONF[$current_card]=63
							CardUS_EKTS_CALL_TRANSFER[$current_card]=62
							CardUS_EKTS_MWI[$current_card]=50
						;;

				'EWSD') CardUS_EKTS_BEGIN_CONF[$current_card]=0
								CardUS_EKTS_DROP_CONF[$current_card]=0
								CardUS_EKTS_CALL_TRANSFER[$current_card]=0
							;;

				'5ESS_NI') CardUS_EKTS_BEGIN_CONF[$current_card]=60
									 CardUS_EKTS_DROP_CONF[$current_card]=62
									 CardUS_EKTS_CALL_TRANSFER[$current_card]=61
									 CardUS_EKTS_MWI[$current_card]=50
							;;
			esac

			if [ $((${BriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
			then #{
				CardSTEI[$current_card]=0
				CardNTEI[$current_card]=0
			  CardP2P[$current_card]=0
			fi   #}
# --------------------------------------
		else #}{
# --------------------------------------
#   Analog Board
# --------------------------------------

			v_tmp=0

# --------------------------------------
		fi #}
	fi #}
fi #}


# --------------------------------------
#  Select signaling timeslot
# --------------------------------------
if [ $((StartHMPMode)) -ne 0 -a $((${CardPRI[$current_card]})) -eq 1 -a $((StartDivaSS7)) -ne 0 ]
then #{
	if [ $((${PriProtSS7[${CardPROT[$current_card]}]})) -ne 0 -o \
       $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -eq 2 ]
	then #{

		i=1

		msg="$dialog --clear --title \"Select signaling timeslots\" --separate-output "
		msg="$msg --backtitle \"$backtitle\" --checklist \"Timeslots\" 16 70 8"

		while [ $((i)) -le 31 ]
		do

			timeslot_on_off="off"
			timeslot_add=""

			if [ $((${Card_SIGNALING_TIMESLOTS[$current_card]}&$((1<<$(($i-1)))))) -ne 0 ]
			then
				timeslot_on_off="on"
			fi

			if [ $((i)) -eq 16 ]
			then
				timeslot_add=" default E.1"
			fi
			if [ $((i)) -eq 24 ]
			then
				timeslot_add=" default T.1"
			fi

			msg="$msg \"$((i))\" \"Timeslot $((i))${timeslot_add}\" ${timeslot_on_off} "

			i=$(($i+1))
		done

		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi

		Card_SIGNALING_TIMESLOTS[$current_card]=0
		i=1
		while [ $((i)) -le 31 ]
		do
			grep "^$((i))$" $tmp > /dev/null 2>&1
			if [ $(($?)) -eq 0 ]
			then
				Card_SIGNALING_TIMESLOTS[$current_card]=$((${Card_SIGNALING_TIMESLOTS[$current_card]}|$((1<<$(($i-1))))))
			fi
			i=$(($i+1))
		done


	fi #}
fi #}

# ------------------------------------
#  QSIG OPTIONS
# ------------------------------------
i=0
if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
then

	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then
		i=$((${PriProtQSIG[${CardPROT[$current_card]}]}))
	else
		if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
		then
# --------------------------------------
#   BRI Board
# --------------------------------------
			i=$((${BriProtQSIG[${CardPROT[$current_card]}]}))
		fi
	fi
fi

# -------------------------------------------------
# First ask about known switch types, and do set all
# parameters one per one only if one generic PABX was
# selected
# -------------------------------------------------
if [ $((i)) -eq 1 ]
then #{
	original_qsig_pbx=$((${CardQSIG_PBX[$current_card]}))

	msg="\"0\" \"- Generic PABX\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Siemens HICOM 300, HIPATH 4000\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- Siemens HICOM 150, HIPATH 3000\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"3\" \"- Alcatel 4400, 4410, 4200\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 3 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"4\" \"- Ericsson MD110\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 4 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"5\" \"- Ericsson BP250\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 5 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"6\" \"- Lucent Definity\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 6 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"7\" \"- Matracom 6500\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 7 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"8\" \"- Nortel\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 8 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"9\" \"- DeTeWe OpenCom 1000/1010\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 9 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"10\" \"- Tenovis\""
	if [ $((${CardQSIG_PBX[$current_card]})) -eq 10 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select PABX type\" 18 70 11 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardQSIG_PBX[$current_card]=$(cat $tmp)

	qsig_pbx_changed=0
	if [ $((original_qsig_pbx)) -ne $((${CardQSIG_PBX[$current_card]})) ]
	then
		qsig_pbx_changed=1
	fi

	choose_chfmt=1
	choose_cr=1
	choose_dialect=1
	chfmt_default=0
	cr_default=0

	case $((${CardQSIG_PBX[$current_card]})) in

# HICOM 300
				 1) choose_chfmt=1
						choose_cr=1
						choose_dialect=0

						original_dialect=$((${CardQSIG_DIALECT[$current_card]}))

						case $((${CardQSIG_DIALECT[$current_card]})) in
							1) CardQSIG_DIALECT[$current_card]=1
								;;
							*) CardQSIG_DIALECT[$current_card]=3
								;;
						esac

						msg="\"0\" \"- ECMAV2 (default)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 3 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$msg \"1\" \"- ECMAV1\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 1 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
							--radiolist \"Please select QSIG protocol dialect\" 9 70 2 $msg"
						echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
						sh ${diva_dir}/cards.dlg
						if [ $(($?)) -ne 0 ]
						then
							CardQSIG_DIALECT[$current_card]=$((original_dialect))
							continue
						fi
						CardQSIG_DIALECT[$current_card]=$(cat $tmp)
						case $((${CardQSIG_DIALECT[$current_card]})) in
							0) CardQSIG_DIALECT[$current_card]=3
								 chfmt_default=1
								;;
							1) CardQSIG_DIALECT[$current_card]=1
								 chfmt_default=0
								;;
						esac
						if [ $((original_dialect)) -eq $((${CardQSIG_DIALECT[$current_card]})) ]
						then
							original_dialect=0
						else
							original_dialect=1
						fi
						qsig_pbx_changed=$(($qsig_pbx_changed+$original_dialect))
						if [ $((qsig_pbx_changed)) -ne 0 ]
						then
							case $((${CardQSIG_DIALECT[$current_card]})) in
								1) CardQSIG_CHI[$current_card]=0
									 CardQSIG_CHFMT[$current_card]=0
									;;
								3) CardQSIG_CHI[$current_card]=0
									 CardQSIG_CHFMT[$current_card]=1
									;;
							esac
						fi
						if [ $((${CardPRI[$current_card]})) -eq 0 ]
						then
							CardQSIG_CHFMT[$current_card]=0
						  chfmt_default=0
						fi
					;;

# HICOM 150
				 2) choose_chfmt=1
						choose_cr=1
						choose_dialect=1

						case $((${CardQSIG_DIALECT[$current_card]})) in
							1) CardQSIG_DIALECT[$current_card]=1
								;;
							3) CardQSIG_DIALECT[$current_card]=3
								;;
							*) CardQSIG_DIALECT[$current_card]=0
								;;
						esac

						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_DIALECT[$current_card]=0
							CardQSIG_CHI[$current_card]=0
							CardQSIG_CHFMT[$current_card]=0
						fi
					;;

# Alcatel 4400, 4410, 4200
				 3) choose_chfmt=1
						choose_cr=1
						choose_dialect=0

						original_dialect=$((${CardQSIG_DIALECT[$current_card]}))

						case $((${CardQSIG_DIALECT[$current_card]})) in
							8) CardQSIG_DIALECT[$current_card]=8
								;;
							9) CardQSIG_DIALECT[$current_card]=9
								;;
							*) CardQSIG_DIALECT[$current_card]=0
								;;
						esac
						msg="\"0\" \"- Autodetect (default)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 0 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$msg \"1\" \"- ECMA-QSIG  (older QSIG dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 8 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$msg \"2\" \"- ISO-QSIG (currently used QSIG-dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 9 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
							--radiolist \"Please select QSIG protocol dialect\" 10 70 3 $msg"
						echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
						sh ${diva_dir}/cards.dlg
						if [ $(($?)) -ne 0 ]
						then
							CardQSIG_DIALECT[$current_card]=$((original_dialect))
							continue
						fi
						CardQSIG_DIALECT[$current_card]=$(cat $tmp)
						case $((${CardQSIG_DIALECT[$current_card]})) in
							0) CardQSIG_DIALECT[$current_card]=0
								;;
							1) CardQSIG_DIALECT[$current_card]=8
								;;
							2) CardQSIG_DIALECT[$current_card]=9
								;;
						esac
						if [ $((original_dialect)) -eq $((${CardQSIG_DIALECT[$current_card]})) ]
						then
							original_dialect=0
						else
							original_dialect=1
						fi
						qsig_pbx_changed=$(($qsig_pbx_changed+$original_dialect))
						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_CHI[$current_card]=0
							CardQSIG_CHFMT[$current_card]=0
						fi
					;;

# Ericsson MD110
				 4) choose_chfmt=1
						choose_cr=1
						choose_dialect=0

						original_dialect=$((${CardQSIG_DIALECT[$current_card]}))

						case $((${CardQSIG_DIALECT[$current_card]})) in
							6) CardQSIG_DIALECT[$current_card]=6
								;;
							*) CardQSIG_DIALECT[$current_card]=7
								;;
						esac
						msg="\"0\" \"- ISO-QSIG (currently used QSIG-dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 7 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$msg \"1\" \"- ECMA-QSIG  (older QSIG dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 6 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
							--radiolist \"Please select QSIG protocol dialect\" 9 70 2 $msg"
						echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
						sh ${diva_dir}/cards.dlg
						if [ $(($?)) -ne 0 ]
						then
							CardQSIG_DIALECT[$current_card]=$((original_dialect))
							continue
						fi
						CardQSIG_DIALECT[$current_card]=$(cat $tmp)
						case $((${CardQSIG_DIALECT[$current_card]})) in
							0) CardQSIG_DIALECT[$current_card]=7
								;;
							1) CardQSIG_DIALECT[$current_card]=6
								;;
						esac
						if [ $((original_dialect)) -eq $((${CardQSIG_DIALECT[$current_card]})) ]
						then
							original_dialect=0
						else
							original_dialect=1
						fi
						qsig_pbx_changed=$(($qsig_pbx_changed+$original_dialect))
						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_CHI[$current_card]=0
							CardQSIG_CHFMT[$current_card]=0
						fi
					;;

# Ericsson BP250
				 5) choose_chfmt=1
						choose_cr=1
						choose_dialect=0
						if [ $((${CardQSIG_DIALECT[$current_card]})) -ne 6 ]
						then
							CardQSIG_DIALECT[$current_card]=6
							qsig_pbx_changed=1
						fi
						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_CHI[$current_card]=3
							CardQSIG_CHFMT[$current_card]=0
						fi
						cr_default=3
						if [ $((${CardPRI[$current_card]})) -eq 1 ]
						then
							cr_default=0
							CardQSIG_CHI[$current_card]=0
						fi
					;;

# Lucent Definity
				 6) choose_chfmt=1
						choose_cr=1
						choose_dialect=1

						case $((${CardQSIG_DIALECT[$current_card]})) in
							1) CardQSIG_DIALECT[$current_card]=1
								;;
							3) CardQSIG_DIALECT[$current_card]=3
								;;
							*) CardQSIG_DIALECT[$current_card]=0
								;;
						esac

						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_DIALECT[$current_card]=0
							CardQSIG_CHI[$current_card]=0
							CardQSIG_CHFMT[$current_card]=0
						fi
					;;

# Matra 6500
# 10 - ECMA with MWI extensions
# 11 - ISO  with MWI extensions (default)
#
				 7) choose_chfmt=1
						choose_cr=1
						choose_dialect=0

						original_dialect=$((${CardQSIG_DIALECT[$current_card]}))

						case $((${CardQSIG_DIALECT[$current_card]})) in
							10) CardQSIG_DIALECT[$current_card]=10
								;;
							*) CardQSIG_DIALECT[$current_card]=11
								;;
						esac

						msg="\"0\" \"- ISO-QSIG (currently used QSIG-dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 11 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$msg \"1\" \"- ECMA-QSIG  (older QSIG dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 10 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
							--radiolist \"Please select QSIG protocol dialect\" 9 70 2 $msg"
						echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
						sh ${diva_dir}/cards.dlg
						if [ $(($?)) -ne 0 ]
						then
							CardQSIG_DIALECT[$current_card]=$((original_dialect))
							continue
						fi
						CardQSIG_DIALECT[$current_card]=$(cat $tmp)
						case $((${CardQSIG_DIALECT[$current_card]})) in
							0) CardQSIG_DIALECT[$current_card]=11
								;;
							1) CardQSIG_DIALECT[$current_card]=10
								;;
						esac
						if [ $((original_dialect)) -eq $((${CardQSIG_DIALECT[$current_card]})) ]
						then
							original_dialect=0
						else
							original_dialect=1
						fi
						qsig_pbx_changed=$(($qsig_pbx_changed+$original_dialect))
						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_CHI[$current_card]=0
							CardQSIG_CHFMT[$current_card]=0
						fi
					;;

# Nortel
# 10 - ECMA with MWI extensions
# 11 - ISO  with MWI extensions (default)
				 8) choose_chfmt=1
						choose_cr=1
						choose_dialect=0

						original_dialect=$((${CardQSIG_DIALECT[$current_card]}))

						case $((${CardQSIG_DIALECT[$current_card]})) in
							10) CardQSIG_DIALECT[$current_card]=10
								;;
							*) CardQSIG_DIALECT[$current_card]=11
								;;
						esac

						msg="\"0\" \"- ISO-QSIG (currently used QSIG-dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 11 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$msg \"1\" \"- ECMA-QSIG  (older QSIG dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 10 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
							--radiolist \"Please select QSIG protocol dialect\" 9 70 2 $msg"
						echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
						sh ${diva_dir}/cards.dlg
						if [ $(($?)) -ne 0 ]
						then
							CardQSIG_DIALECT[$current_card]=$((original_dialect))
							continue
						fi
						CardQSIG_DIALECT[$current_card]=$(cat $tmp)
						case $((${CardQSIG_DIALECT[$current_card]})) in
							0) CardQSIG_DIALECT[$current_card]=11
								;;
							1) CardQSIG_DIALECT[$current_card]=10
								;;
						esac
						if [ $((original_dialect)) -eq $((${CardQSIG_DIALECT[$current_card]})) ]
						then
							original_dialect=0
						else
							original_dialect=1
						fi
						qsig_pbx_changed=$(($qsig_pbx_changed+$original_dialect))
						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_CHI[$current_card]=0
							CardQSIG_CHFMT[$current_card]=0
						fi
					;;

#
# DeTeWe
# OpenCom 1000
# OpenCom 1010
#
# DIALECT - ECMA
# CR      - Lang   (BRI)
# CI      - Short  (BRI)
# ChFmt   - Timeslots (PRI)
#
				 9) choose_dialect=0
            choose_chfmt=1
						choose_cr=1
						original_dialect=$((${CardQSIG_DIALECT[$current_card]}))
						if [ $((original_dialect)) -ne $((1)) ]
 						then
							qsig_pbx_changed=1
						fi
						CardQSIG_DIALECT[$current_card]=1
						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_CHI[$current_card]=2
							CardQSIG_CHFMT[$current_card]=0
						fi
						chfmt_default=0
						cr_default=2
          ;;

# Tenovis
				10) choose_chfmt=1
						choose_cr=1
						choose_dialect=0

						original_dialect=$((${CardQSIG_DIALECT[$current_card]}))

						case $((${CardQSIG_DIALECT[$current_card]})) in
							1) CardQSIG_DIALECT[$current_card]=1
								;;
							*) CardQSIG_DIALECT[$current_card]=3
								;;
						esac
						msg="\"0\" \"- ISO-QSIG (currently used QSIG-dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 3 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$msg \"1\" \"- ECMA-QSIG  (older QSIG dialect)\""
						if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 1 ]
						then
							msg="$msg on"
						else
							msg="$msg off"
						fi
						msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
							--radiolist \"Please select QSIG protocol dialect\" 9 70 2 $msg"
						echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
						sh ${diva_dir}/cards.dlg
						if [ $(($?)) -ne 0 ]
						then
							CardQSIG_DIALECT[$current_card]=$((original_dialect))
							continue
						fi
						CardQSIG_DIALECT[$current_card]=$(cat $tmp)
						case $((${CardQSIG_DIALECT[$current_card]})) in
							0) CardQSIG_DIALECT[$current_card]=3
								;;
							1) CardQSIG_DIALECT[$current_card]=1
								;;
						esac
						if [ $((original_dialect)) -eq $((${CardQSIG_DIALECT[$current_card]})) ]
						then
							original_dialect=0
						else
							original_dialect=1
						fi
						qsig_pbx_changed=$(($qsig_pbx_changed+$original_dialect))
						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_CHI[$current_card]=0
							CardQSIG_CHFMT[$current_card]=0
						fi
					;;

# Generic
				 *) choose_chfmt=1
						choose_cr=1
						choose_dialect=1

						case $((${CardQSIG_DIALECT[$current_card]})) in
							1) CardQSIG_DIALECT[$current_card]=1
								;;
							3) CardQSIG_DIALECT[$current_card]=3
								;;
							*) CardQSIG_DIALECT[$current_card]=0
								;;
						esac

						CardQSIG_PBX[$current_card]=0
						if [ $((qsig_pbx_changed)) -eq 1 ]
						then
							CardQSIG_DIALECT[$current_card]=0
							CardQSIG_CHI[$current_card]=0
							CardQSIG_CHFMT[$current_card]=0
						fi
					;;
  esac

	if [ $((choose_dialect)) -eq 1 ]
	then

		case $((${CardQSIG_DIALECT[$current_card]})) in
			0) CardQSIG_DIALECT[$current_card]=0
				;;

			1) CardQSIG_DIALECT[$current_card]=1
				;;

			*) CardQSIG_DIALECT[$current_card]=3
				;;

		esac

		msg="\"0\" \"- Autodetect (default)\""
		if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- ECMA-QSIG  (older QSIG dialect)\""
		if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"2\" \"- ISO-QSIG (currently used QSIG-dialect)\""
		if [ $((${CardQSIG_DIALECT[$current_card]})) -eq 3 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please select QSIG protocol dialect\" 10 70 3 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardQSIG_DIALECT[$current_card]=$(cat $tmp)

		case $((${CardQSIG_DIALECT[$current_card]})) in
			0) CardQSIG_DIALECT[$current_card]=0
				;;

			1) CardQSIG_DIALECT[$current_card]=1
				;;

			*) CardQSIG_DIALECT[$current_card]=3
				;;

		esac

	fi

	if [ $((${CardPRI[$current_card]})) -eq 0 ]
	then
		msg="\"0\" \"- CR 2 and CHI 3 bytes long"
		if [ $((cr_default)) -eq 0 ]
    then
			msg="$msg (default)\""
		else
			msg="$msg\""
    fi
		if [ $((${CardQSIG_CHI[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- CR 1 and CHI 3 bytes long"
		if [ $((cr_default)) -eq 1 ]
    then
			msg="$msg (default)\""
		else
			msg="$msg\""
    fi
		if [ $((${CardQSIG_CHI[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"2\" \"- CR 2 and CHI 1 bytes long"
		if [ $((cr_default)) -eq 2 ]
    then
			msg="$msg (default)\""
		else
			msg="$msg\""
    fi
		if [ $((${CardQSIG_CHI[$current_card]})) -eq 2 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"3\" \"- CR   and CHI 1 byte  long"
		if [ $((cr_default)) -eq 3 ]
    then
			msg="$msg (default)\""
		else
			msg="$msg\""
    fi
		if [ $((${CardQSIG_CHI[$current_card]})) -eq 3 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please select QSIG protocol Call Reference (CR) and Channel Identifier (CHI) Length\" 12 70 4 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardQSIG_CHI[$current_card]=$(cat $tmp)
	else
		if [ $((${PriProtCH[${CardPROT[$current_card]}]})) -gt 24 ]
		then
			msg="\"0\" \"- Timeslots"
			if [ $((chfmt_default)) -eq 0 ]
			then
				msg="$msg (default)\""
			else
				msg="$msg\""
 			fi
			if [ $((${CardQSIG_CHFMT[$current_card]})) -eq 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"1\" \"- Logical channels"
			if [ $((chfmt_default)) -eq 1 ]
			then
				msg="$msg (default)\""
			else
				msg="$msg\""
			fi
			if [ $((${CardQSIG_CHFMT[$current_card]})) -eq 1 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please select QSIG protocol Channel Assignment (CHI)\" 9 70 2 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardQSIG_CHFMT[$current_card]=$(cat $tmp)
		fi
	fi

# --------------------------------------------
# Call Transfer Mode
# --------------------------------------------

		msg="\"0\" \"- Join (default)\""
		if [ $((${CardQSIG_REROUTING[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- Rerouting\""
		if [ $((${CardQSIG_REROUTING[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id qsig_rerouting
		msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please select QSIG Call Transfer Mode\" 9 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardQSIG_REROUTING[$current_card]=$(cat $tmp)

# --------------------------------------------
# Charge Request
# --------------------------------------------
		msg="\"0\" \"- Charge request enabled (default)\""
		if [ $((${CardQSIG_CHARGE_DISABLED[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- Charge request disabled\""
		if [ $((${CardQSIG_CHARGE_DISABLED[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id qsig_charge_disabled
		msg="$dialog ${help} --clear --title \"$card_title\" \
			--backtitle \"$backtitle\" \
			--radiolist \"Please configure QSIG protocol charge request\" 9 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardQSIG_CHARGE_DISABLED[$current_card]=$(cat $tmp)

		if [ $((${CardQSIG_CHARGE_DISABLED[$current_card]})) -eq 0 ]
		then
			msg="\"0\" \"- Charge request after CONNECT (default)\""
			if [ $((${CardQSIG_CHARGE_INSETUP[$current_card]})) -eq 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"1\" \"- Charge request in SETUP\""
			if [ $((${CardQSIG_CHARGE_INSETUP[$current_card]})) -eq 1 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			set_help_id qsig_charge_location
			msg="$dialog ${help} --clear --title \"$card_title\" \
				--backtitle \"$backtitle\" \
				--radiolist \"Please select QSIG protocol charge request location\" 9 70 2 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardQSIG_CHARGE_INSETUP[$current_card]=$(cat $tmp)

			msg="     \"0\"  \"- Disable 'per call' charge generation\""
			if [ $((${CardQSIG_CHARGE_NORATE[$current_card]})) -ne 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"1\"  \"- Disable 'during a call' charge generation\""
			if [ $((${CardQSIG_CHARGE_NOINTERIM[$current_card]})) -ne 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"2\"  \"- Disable 'at end of call' charge generation\""
			if [ $((${CardQSIG_CHARGE_NOFINAL[$current_card]})) -ne 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			set_help_id qsig_charge_type
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--separate-output \
				--checklist \"Please configure QSIG protocol charge request type\" 10 70 3 $msg"
			 echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			 sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi

			grep "^0$" $tmp > /dev/null 2>&1
			if [ $(($?)) -eq 0 ]
			then
				CardQSIG_CHARGE_NORATE[$current_card]=1
			else
				CardQSIG_CHARGE_NORATE[$current_card]=0
			fi
			grep "^1$" $tmp > /dev/null 2>&1
			if [ $(($?)) -eq 0 ]
			then
				CardQSIG_CHARGE_NOINTERIM[$current_card]=1
			else
				CardQSIG_CHARGE_NOINTERIM[$current_card]=0
			fi
			grep "^2$" $tmp > /dev/null 2>&1
			if [ $(($?)) -eq 0 ]
			then
				CardQSIG_CHARGE_NOFINAL[$current_card]=1
			else
				CardQSIG_CHARGE_NOFINAL[$current_card]=0
			fi
		fi
# additional qsig parameters

# PR_INVITE
		msg="\"0\" \"- No PathReplaceInvite (default)\""
		if [ $((${CardQSIG_PR_INVITE[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- Send PathReplaceInvite\""
		if [ $((${CardQSIG_PR_INVITE[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id qsig_pr_invite
		msg="$dialog ${help} --clear --title \"$card_title\" \
			--backtitle \"$backtitle\" \
			--radiolist \"Please select QSIG PathReplaceInvite mode\" 9 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardQSIG_PR_INVITE[$current_card]=$(cat $tmp)

# NO_REROUTING
		msg="\"0\" \"- Accept rerouting request (default)\""
		if [ $((${CardQSIG_NO_REROUTING[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- Ignore incoming rerouting requests\""
		if [ $((${CardQSIG_NO_REROUTING[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id qsig_no_rerouting
		msg="$dialog ${help} --clear --title \"$card_title\" \
			--backtitle \"$backtitle\" \
			--radiolist \"Please select QSIG rerouting request mode\" 9 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardQSIG_NO_REROUTING[$current_card]=$(cat $tmp)


# TRANSPARENT_FACILITIES
		msg="\"0\" \"- Use facilities (default)\""
		if [ $((${CardQSIG_TRANSPARENT_FAC[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- Pass facilities untouched\""
		if [ $((${CardQSIG_TRANSPARENT_FAC[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id qsig_transparent_facilities
		msg="$dialog ${help} --clear --title \"$card_title\" \
			--backtitle \"$backtitle\" \
			--radiolist \"Please select QSIG transparent facilities mode\" 9 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardQSIG_TRANSPARENT_FAC[$current_card]=$(cat $tmp)


# TSC CONN
		msg="\"0\" \"- Send REL on incoming TSC (default)\""
		if [ $((${CardQSIG_TSC_CONN[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- Send CONN on incoming TSC\""
		if [ $((${CardQSIG_TSC_CONN[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id qsig_tsc_conn
		msg="$dialog ${help} --clear --title \"$card_title\" \
			--backtitle \"$backtitle\" \
			--radiolist \"Please select QSIG answer on incoming TSC request\" 9 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardQSIG_TSC_CONN[$current_card]=$(cat $tmp)


# end of qsig parameters
fi #}


# ------------------------------------
#  SPID SELECTION
# ------------------------------------
if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 ]
then #{
	if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		manual_spid=1

		if [ $((${BriProtNI[${CardPROT[$current_card]}]})) -eq 0 ]
		then
			$dialog --clear --title "$card_title" --backtitle "$backtitle" \
				--yesno "Use AUTO-SPID procedure ?" 5 70 2>$tmp
			if [ $(($?)) -eq 0 ]
			then
				manual_spid=0
			else
				manual_spid=1
			fi
		else
			$dialog --clear --title "$card_title" --backtitle "$backtitle" \
				--yesno "Setup SPID(s) manually (or use AUTO-SPID) ?" 5 70 2>$tmp
			if [ $(($?)) -eq 0 ]
			then
				manual_spid=1
			else
				manual_spid=0
			fi
		fi

		if [ $((manual_spid)) -eq 1 ]
		then
			$dialog --clear --title "$card_title" --backtitle "$backtitle" \
				--inputbox "Please enter SPID-1" 10 70 ${CardSPID1[$current_card]} 2>$tmp
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardSPID1[$current_card]=$(cat $tmp)
			$dialog --clear --title "$card_title" --backtitle "$backtitle" \
				--inputbox "Please enter MSN for SPID-1" 10 70 ${CardSPID1MSN[$current_card]} 2>$tmp
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardSPID1MSN[$current_card]=$(cat $tmp)
			$dialog --clear --title "$card_title" --backtitle "$backtitle" \
				--inputbox "Please enter SPID-2" 10 70 ${CardSPID2[$current_card]} 2>$tmp
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardSPID2[$current_card]=$(cat $tmp)
			$dialog --clear --title "$card_title" --backtitle "$backtitle" \
				--inputbox "Please enter MSN for SPID-2" 10 70 ${CardSPID2MSN[$current_card]} 2>$tmp
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardSPID2MSN[$current_card]=$(cat $tmp)

			if [ $((${BriProtNI[${CardPROT[$current_card]}]})) -eq 1 ]
			then
				msg="\"0\" \"- Allow fallback to AUTO-SPID (default)\""
				if [ $((${CardAUTO_SPID_DISABLE[$current_card]})) -eq 0 ]
				then
					msg="$msg on"
				else
					msg="$msg off"
				fi
				msg="$msg \"1\" \"- Disable fallback to AUTO-SPID\""
				if [ $((${CardAUTO_SPID_DISABLE[$current_card]})) -eq 1 ]
				then
					msg="$msg on"
				else
					msg="$msg off"
				fi
				msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
					--radiolist \"Please select AUTO-SPID fallback options\" 9 70 2 $msg"
				echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
				sh ${diva_dir}/cards.dlg
				if [ $(($?)) -ne 0 ]
				then
					continue
				fi
				CardAUTO_SPID_DISABLE[$current_card]=$(cat $tmp)
			fi
		else
			CardSPID1[$current_card]=""
			CardSPID1MSN[$current_card]=""
			CardSPID2[$current_card]=""
			CardSPID2MSN[$current_card]=""
			CardAUTO_SPID_DISABLE[$current_card]=0
		fi

		CardALWAYS_RING_VOICE[$current_card]=0
		if [ $((${BriProtNI[${CardPROT[$current_card]}]})) -eq 1 ]
		then
			msg="\"0\" \"- Controlled by application (default)\""
			if [ $((${CardALWAYS_RING_VOICE[$current_card]})) -eq 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"1\" \"- Always ring on incoming voice calls\""
			if [ $((${CardALWAYS_RING_VOICE[$current_card]})) -eq 1 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please select voice call processing options\" 9 70 2 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardALWAYS_RING_VOICE[$current_card]=$(cat $tmp)
		fi

	fi
fi #}

# ------------------------------------
#  NT2 mode selection
# ------------------------------------
if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
then
	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then
		i=$((${PriProtNT2[${CardPROT[$current_card]}]}))
	else
		if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
		then
# --------------------------------------
#   BRI Board
# --------------------------------------
			if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 1 ]
			then
				i=0
			else
				i=1
			fi
			if [ $((${BriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
			then
				i=0
			fi
# --------------------------------------
		else
# --------------------------------------
#   Analog Board
# --------------------------------------
			i=1
# --------------------------------------
		fi
	fi
else
	i=0
fi

if [ $((i)) -eq 1 ]
then #{

	if [ $current_line -eq 0 ]
	then
		msg=" "
		j=$(($current_card))
		high=2
	else
		msg=" \"G\" \"Use global setting\""
		j=$(($current_line))
		if [ $((${CardNT2[$j]})) -lt 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		high=3
	fi
	msg="$msg \"0\" \"- No\""
	if [ $((${CardNT2[$j]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Yes\""
	if [ $((${CardNT2[$j]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi


	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   Other Board
# --------------------------------------
		set_help_id adapter_nt2
		msg="$dialog ${help} --clear --title \"$card_title\" \
			--backtitle \"$backtitle\" \
			--radiolist \"Please select NT-2 (Direct Dial In, Direct Inward Dialing) mode\" 9 70 2 $msg"
# --------------------------------------
	else
# --------------------------------------
#   Analog Board
# --------------------------------------

		set_help_id adapter_cid
		msg="$dialog ${help} --clear --title \"$card_title\" \
			--backtitle \"$backtitle\" \
			--radiolist \"Please specify whether you use Caller ID (CID)\" $(($high+7)) 70 $high $msg"

# --------------------------------------
	fi


	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	v_tmp=$(cat $tmp)
	if [ "${v_tmp}" = "G" ]
	then
		CardNT2[$j]=-1
	else
		if [ $((StartCtransferOn)) -eq 1 -a $((${CardNT2[$j]})) -ne $((v_tmp)) ]
  		then
		  	$dialog --title "Note" \
  				--backtitle "$backtitle" \
  				--clear --msgbox "You changed the NT-2 mode while the Advanced Routing method is activated. Please check the Call Routing configuration in the Webserver." 10 70
		fi

		CardNT2[$j]=$((v_tmp))
	fi

fi # }

#
# Analog board
#
if [ $((${Card_ANALOG[$current_card]})) -ne 0 ]
then #{

#
# Analog board - Wait for Dial Tone
#
	if [ $((current_line)) -eq 0 ]
	then
		msg=" "
		j=$(($current_card))
		high=2
	else
		msg=" \"G\" \"Use global setting\""
		j=$(($current_line))
		if [ $((${CardDIAL_DONTWAITTONE_CHAR[$j]})) -lt 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		high=3
	fi
	msg="$msg \"0\" \"- No\""
	if [ "${CardDIAL_DONTWAITTONE_CHAR[$j]}" = "0" ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Yes\""
	if [ "${CardDIAL_DONTWAITTONE_CHAR[$j]}" = "x" ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id adapter_waittone
	msg="$dialog ${help} --clear --title \"$card_title\" \
		--backtitle \"$backtitle\" \
		--radiolist \"Wait for dial tone\" $(($high+7)) 70 $high $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	v_tmp=$(cat $tmp)
	if [ "${v_tmp}" = "G" ]
	then
		CardDIAL_DONTWAITTONE_CHAR[$j]=-1
	else
	if [ $((v_tmp)) -eq 0 ]
	then
			CardDIAL_DONTWAITTONE_CHAR[$j]="0"
	else
			CardDIAL_DONTWAITTONE_CHAR[$j]="x"
		fi
	fi

#
# Analog board - Dial type
#
	if [ $((current_line)) -eq 0 ]
	then
		msg=" "
		j=$(($current_card))
		high=3
	else
		msg=" \"G\" \"Use global setting\""
		j=$(($current_line))
		if [ $((${CardRBS_DIAL[$j]})) -lt 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		high=4
	fi
	msg="$msg \"0\" \"- DTMF dialing (default)\""
	if [ $((${CardRBS_DIAL[$j]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Pulse dialing\""
	if [ $((${CardRBS_DIAL[$j]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- MF dialing\""
	if [ $((${CardRBS_DIAL[$j]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id adapter_dialtype
	msg="$dialog ${help} --clear --title \"$card_title\" \
		--backtitle \"$backtitle\" \
		--radiolist \"Please select trunk dialing mode\" $(($high+7)) 70 $high $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	v_tmp=$(cat $tmp)
	if [ "${v_tmp}" = "G" ]
	then
		CardRBS_DIAL[$j]=-1
	else
		CardRBS_DIAL[$j]=$((v_tmp))
	fi
#
# Analog board - Dialing procedure timeout (only global)
#
	if [ $((current_line)) -eq 0 ]
	then
	i=1
	msg=" "
	while [ $((i)) -le 255 ]
	do
		msg="$msg \"$((i))\" \"Sec"
		if [ $((i)) -eq 120 ]
		then
			msg="$msg (default)\""
		else
			msg="$msg\""
		fi
		if [ $((${CardRBS_ANSWTO[$current_card]})) -eq $((i)) ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		i=$(($i+1))
	done
	set_help_id adapter_dial_timeout
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select dialing procedure timeout\" 19 70 12 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardRBS_ANSWTO[$current_card]=$(cat $tmp)
	fi


#
# Analog board - Rings until answer
#
	if [ $((current_line)) -eq 0 ]
	then
		j=$(($current_card))
		msg=" "
		high=12
	else
		j=$(($current_line))
		msg=" \"G\" \"Use global setting\""
		if [ $((${Card_RINGSTILANSWER[$j]})) -lt 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		high=13
	fi
	i=0
	while [ $((i)) -le 255 ]
	do
		msg="$msg \"$((i))\" \"\""
		if [ $((${Card_RINGSTILANSWER[$j]})) -eq $((i)) ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		i=$(($i+1))
	done
	set_help_id adapter_ringstilanswer
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select the number of rings to wait before answering\" $(($high+7)) 70 $high $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	v_tmp=$(cat $tmp)
	if [ "${v_tmp}" = "G" ]
	then
		Card_RINGSTILANSWER[$j]=-1
	else
		Card_RINGSTILANSWER[$j]=$((v_tmp))
	fi

#
# Analog board - BC (only global)
#
	if [ $((current_line)) -eq 0 ]
	then
	msg="\"0\" \"- Speech (default)\""
	if [ $((${CardRBS_BC[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- 3.1 KHz Audio\""
	if [ $((${CardRBS_BC[$current_card]})) -eq 4 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_bc
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Signal incoming calls to application as\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	v_tmp=$(cat $tmp)

	if [ $((v_tmp)) -eq 0 ]
	then
		CardRBS_BC[$current_card]=1
	else
		CardRBS_BC[$current_card]=4
	fi
	fi

#
# Analog board - Show pbx parameters
#

	if [ $((current_line)) -eq 0 ]
	then
		j=$(($current_card))
	else
		j=$(($current_line))
	fi
	msg="\"0\" \"- No (default)\""
	if [ $((${Card_POTS_PBXPARAMS[$j]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Yes\""
	if [ $((${Card_POTS_PBXPARAMS[$j]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_pots_pbxparams
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Show PBX parameters?\" 8 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	Card_POTS_PBXPARAMS[$j]=$(cat $tmp)

	if [ $((${Card_POTS_PBXPARAMS[$j]})) -eq 1 ]
	then # {

	#
# Analog board - Flash Length
#
		if [ $((current_line)) -eq 0 ]
		then
			msg=" "
			high=12
		else
			msg=" \"G\" \"Use global setting\""
			if [ $((${Card_POTS_FLASHLEN[$j]})) -lt 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			high=13
		fi
	i=0
	while [ $((i)) -le 999 ]
	do
		msg="$msg \"$((i))\" \"mSec"
		if [ $((i)) -eq 0 ]
		then
			msg="$msg (use country default)\""
		else
			msg="$msg\""
		fi
			if [ $((${Card_POTS_FLASHLEN[$j]})) -eq $((i)) ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		i=$(($i+10))
	done
	set_help_id adapter_flash_length
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select the flash signal length\" 19 70 12 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
		v_tmp=$(cat $tmp)
		if [ "${v_tmp}" = "G" ]
		then
			Card_POTS_FLASHLEN[$j]=-1
		else
			Card_POTS_FLASHLEN[$j]=$((v_tmp))
		fi

#
# Analog board - Consultation Call String
#

		msg="${Card_POTS_CONSULT[$j]}"
		if [ $((current_line)) -eq 0 ]
		then
			hlpmsg=""
			high=9
		else
			hlpmsg="\nEnter G to use global setting."
			high=10
			if [ $((${Card_POTS_CONSULT[$j]})) -lt 0 ]
			then
				msg="G"
			fi
		fi
	i=0
	while [ $((i)) -eq 0 ]
	do
		set_help_id adapter_config_consult
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Please enter string to initiate Consultation Call\n(max length=10) $hlpmsg\" $high 60 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue 2
		fi
			v_tmp=$(cat $tmp)
			if [ "${v_tmp}" = "G" ]
			then
				i=1
				Card_POTS_CONSULT[$j]=-1
			else
		i=$(diva_validate_keypad_str $tmp 10)
				Card_POTS_CONSULT[$j]=${v_tmp}
			fi
	done

#
# Analog board - Swap Hold
#

		msg="${Card_POTS_SWAPHOLD[$j]}"
		if [ $((current_line)) -eq 0 ]
		then
			hlpmsg=""
			high=9
		else
			hlpmsg="\nEnter G to use global setting."
			high=10
			if [ $((${Card_POTS_SWAPHOLD[$j]})) -lt 0 ]
			then
				msg="G"
			fi
		fi
	i=0
	while [ $((i)) -eq 0 ]
	do
		set_help_id adapter_config_swaphold
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Please enter string to initiate Swap Hold\n(max length=10) $hlpmsg\" $high 60 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue 2
		fi
			v_tmp=$(cat $tmp)
			if [ "${v_tmp}" = "G" ]
			then
				i=1
				Card_POTS_SWAPHOLD[$j]=-1
			else
		i=$(diva_validate_keypad_str $tmp 10)
				Card_POTS_SWAPHOLD[$j]=${v_tmp}
			fi
	done

#
# Analog board - Call Transfer String
#

		msg="${Card_POTS_TRANSFER[$j]}"
		if [ $((current_line)) -eq 0 ]
		then
			hlpmsg=""
			high=9
		else
			hlpmsg="\nEnter G to use global setting."
			high=10
			if [ $((${Card_POTS_TRANSFER[$j]})) -lt 0 ]
			then
				msg="G"
			fi
		fi
	i=0
	while [ $((i)) -eq 0 ]
	do
		set_help_id adapter_config_transfer
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Please enter string to transfer a call\n(max length=10) $hlpmsg\" $high 60 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue 2
		fi
			v_tmp=$(cat $tmp)
			if [ "${v_tmp}" = "G" ]
			then
				i=1
				Card_POTS_TRANSFER[$j]=-1
			else
		i=$(diva_validate_keypad_str $tmp 10)
				Card_POTS_TRANSFER[$j]=${v_tmp}
			fi
	done

#
# Analog board - Disc Active Call
#

		msg="${Card_POTS_DISCACTIVCALL[$j]}"
		if [ $((current_line)) -eq 0 ]
		then
			hlpmsg=""
			high=9
		else
		hlpmsg="\nEnter G to use global setting."
			high=10
			if [ $((${Card_POTS_DISCACTIVCALL[$j]})) -lt 0 ]
			then
				msg="G"
			fi
		fi
	i=0
	while [ $((i)) -eq 0 ]
	do
		set_help_id adapter_config_disccall
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Please enter string to disconnect active calls\n(max length=10) $hlpmsg\" $high 60 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue 2
		fi
			v_tmp=$(cat $tmp)
			if [ "${v_tmp}" = "G" ]
			then
				i=1
				Card_POTS_DISCACTIVCALL[$j]=-1
			else
		i=$(diva_validate_keypad_str $tmp 10)
				Card_POTS_DISCACTIVCALL[$j]=${v_tmp}
			fi
	done

#
# Analog board - Disc Passive Call
#

		msg="${Card_POTS_DISCPASSIVCALL[$j]}"
		if [ $((current_line)) -eq 0 ]
		then
			hlpmsg=""
			high=9
		else
		hlpmsg="\nEnter G to use global setting."
			high=10
			if [ $((${Card_POTS_DISCPASSIVCALL[$j]})) -lt 0 ]
			then
				msg="G"
			fi
		fi
	i=0
	while [ $((i)) -eq 0 ]
	do
		set_help_id adapter_config_disccall
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Please enter string to disconnect passive calls\n(max length=10) $hlpmsg\" $high 60 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue 2
		fi
			v_tmp=$(cat $tmp)
			if [ "${v_tmp}" = "G" ]
			then
				i=1
				Card_POTS_DISCPASSIVCALL[$j]=-1
			else
		i=$(diva_validate_keypad_str $tmp 10)
				Card_POTS_DISCPASSIVCALL[$j]=${v_tmp}
			fi
	done


#
# Analog board - Retrieve Mode
#

		if [ $((current_line)) -eq 0 ]
		then
			msg=" "
			high=3
		else
			msg=" \"G\" \"Use global setting\""
			if [ $((${Card_POTS_RETRIEVE_MODE[$j]})) -lt 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			high=4
		fi
		msg="$msg \"0\" \"- Send Active Disconnect (default)\""
		if [ $((${Card_POTS_RETRIEVE_MODE[$j]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Disconnect and Callback by PBX\""
		if [ $((${Card_POTS_RETRIEVE_MODE[$j]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- Disconnect and hook off\""
		if [ $((${Card_POTS_RETRIEVE_MODE[$j]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id adapter_pots_retrievemode
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please select call retrieve method\" $(($high+7)) 70 $high $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
		v_tmp=$(cat $tmp)
		if [ "${v_tmp}" = "G" ]
		then
			Card_POTS_RETRIEVE_MODE[$j]=-1
		else
			Card_POTS_RETRIEVE_MODE[$j]=$((v_tmp))
		fi

		case $((${Card_POTS_RETRIEVE_MODE[$j]})) in

			-1)
				Card_POTS_CALLBACKTIMER[$j]=-1
				Card_POTS_RETRIEVEHOOKOFFTIMER[$j]=-1
				;;

		1)

		#
		# Analog board - Retrieve Callback Timer
		#
				if [ $((current_line)) -eq 0 ]
				then
					msg=" "
					high=12
				else
					msg=" \"G\" \"Use global setting\""
					if [ $((${Card_POTS_CALLBACKTIMER[$j]})) -lt 0 ]
					then
						msg="$msg on"
					else
						msg="$msg off"
					fi
					high=13
				fi
			i=0
			while [ $((i)) -le 255 ]
			do
				msg="$msg \"$((i))\" \"Sec"
				if [ $((i)) -eq 5 ]
				then
					msg="$msg (default)\""
				else
					msg="$msg\""
				fi
					if [ $((${Card_POTS_CALLBACKTIMER[$j]})) -eq $((i)) ]
				then
					msg="$msg on"
				else
					msg="$msg off"
				fi
				i=$(($i+1))
			done
			set_help_id adapter_pots_callbacktimer
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
					--radiolist \"Please select time to wait for callback\" $(($high+7)) 70 $high $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
				v_tmp=$(cat $tmp)
				if [ "${v_tmp}" = "G" ]
				then
					Card_POTS_CALLBACKTIMER[$j]=-1
				else
					Card_POTS_CALLBACKTIMER[$j]=$((v_tmp))
				fi

			;;

		2)

		#
		# Analog board - Retrieve Hookoff Timer
		#
				if [ $((current_line)) -eq 0 ]
				then
					msg=" "
					high=12
				else
					msg=" \"G\" \"Use global setting\""
					if [ $((${Card_POTS_RETRIEVEHOOKOFFTIMER[$j]})) -lt 0 ]
					then
						msg="$msg on"
					else
						msg="$msg off"
					fi
					high=13
				fi
			i=0
			while [ $((i)) -le 255 ]
			do
				msg="$msg \"$((i))\" \"Sec"
				if [ $((i)) -eq 0 ]
				then
					msg="$msg (default)\""
				else
					msg="$msg\""
				fi
					if [ $((${Card_POTS_RETRIEVEHOOKOFFTIMER[$j]})) -eq $((i)) ]
				then
					msg="$msg on"
				else
					msg="$msg off"
				fi
				i=$(($i+1))
			done
			set_help_id adapter_pots_retrievehookofftimer
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
					--radiolist \"Please select time to wait for hook off\" $(($high+7)) 70 $high $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
				v_tmp=$(cat $tmp)
				if [ "${v_tmp}" = "G" ]
				then
					Card_POTS_RETRIEVEHOOKOFFTIMER[$j]=-1
				else
					Card_POTS_RETRIEVEHOOKOFFTIMER[$j]=$((v_tmp))
				fi

			;;

		*)
			;;

	esac

	fi # }

#
# Analog board - Use flexible DMTF detection (only global)
#

	if [ $((current_line)) -eq 0 ]
	then # {
	msg="\"0\" \"- No (default)\""
	if [ $((${Card_POTS_FLEXDTMF[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Yes\""
	if [ $((${Card_POTS_FLEXDTMF[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_pots_flexdtmf
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Use flexible DMTF collection?\" 8 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	Card_POTS_FLEXDTMF[$current_card]=$(cat $tmp)

	if [ $((${Card_POTS_FLEXDTMF[$current_card]})) -eq 1 ]
	then # {

	# Analog board - Flex direct int call
		i=0
		while [ $((i)) -eq 0 ]
		do
			msg="${Card_POTS_FLEXDIRINT[$current_card]}"
			set_help_id adapter_pots_flexdtmf_params
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Flexible DTMF sequence for Direct Internal Call\" 8 70 \"$msg\""
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue 2
			fi
			v_tmp=$(cat $tmp)
			if [ ${#v_tmp} -lt 249 ]
			then
			  i=1
			fi
		done
		Card_POTS_FLEXDIRINT[$current_card]=$(cat $tmp)

	# Analog board - Flex direct ext call
		i=0
		while [ $((i)) -eq 0 ]
		do
			msg="${Card_POTS_FLEXDIREXT[$current_card]}"
			set_help_id adapter_pots_flexdtmf_params
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Flexible DTMF sequence for Direct External Call\" 8 70 \"$msg\""
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue 2
			fi
			v_tmp=$(cat $tmp)
			if [ ${#v_tmp} -lt 249 ]
			then
			  i=1
			fi
		done
		Card_POTS_FLEXDIREXT[$current_card]=$(cat $tmp)

	# Analog board - Flex diverted int call
		i=0
		while [ $((i)) -eq 0 ]
		do
			msg="${Card_POTS_FLEXDIVINT[$current_card]}"
			set_help_id adapter_pots_flexdtmf_params
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Flexible DTMF sequence for Diverted Internal Call\" 8 70 \"$msg\""
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue 2
			fi
			v_tmp=$(cat $tmp)
			if [ ${#v_tmp} -lt 249 ]
			then
			  i=1
			fi
		done
		Card_POTS_FLEXDIVINT[$current_card]=$(cat $tmp)

	# Analog board - Flex diverted ext call
		i=0
		while [ $((i)) -eq 0 ]
		do
			msg="${Card_POTS_FLEXDIVEXT[$current_card]}"
			set_help_id adapter_pots_flexdtmf_params
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Flexible DTMF sequence for Diverted External Call\" 8 70 \"$msg\""
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue 2
			fi
			v_tmp=$(cat $tmp)
			if [ ${#v_tmp} -lt 249 ]
			then
			  i=1
			fi
		done
		Card_POTS_FLEXDIVEXT[$current_card]=$(cat $tmp)

	# Analog board - Flex direct call
		i=0
		while [ $((i)) -eq 0 ]
		do
			msg="${Card_POTS_FLEXDIRECT[$current_card]}"
			set_help_id adapter_pots_flexdtmf_params
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Flexible DTMF sequence for Direct Call\" 8 70 \"$msg\""
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue 2
			fi
			v_tmp=$(cat $tmp)
			if [ ${#v_tmp} -lt 249 ]
			then
			  i=1
			fi
		done
		Card_POTS_FLEXDIRECT[$current_card]=$(cat $tmp)

	# Analog board - Flex diverted call
		i=0
		while [ $((i)) -eq 0 ]
		do
			msg="${Card_POTS_FLEXDIVERT[$current_card]}"
			set_help_id adapter_pots_flexdtmf_params
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--inputbox \"Flexible DTMF sequence for Diverted Call\" 8 70 \"$msg\""
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue 2
			fi
			v_tmp=$(cat $tmp)
			if [ ${#v_tmp} -lt 249 ]
			then
			  i=1
			fi
		done
		Card_POTS_FLEXDIVERT[$current_card]=$(cat $tmp)

	fi # } Flexible DTMF section
	fi # }

#
# Analog board - Call Direction
#

	if [ $((current_line)) -eq 0 ]
	then
		msg=" "
		high=4
	else
		msg=" \"G\" \"Use global setting\""
		if [ $((${Card_POTS_DIRECTION[$j]})) -lt 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		high=5
	fi
	msg="$msg \"0\" \"- in- and outbound (default)\""
	if [ $((${Card_POTS_DIRECTION[$j]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- only inbound\""
	if [ $((${Card_POTS_DIRECTION[$j]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- only outbound (hook off/on)\""
	if [ $((${Card_POTS_DIRECTION[$j]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	msg="$msg \"3\" \"- only outbound (ignore)\""
	if [ $((${Card_POTS_DIRECTION[$j]})) -eq 3 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id adapter_call_direction
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select allowed call direction\" $(($high+7)) 70 $high $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	v_tmp=$(cat $tmp)
	if [ "${v_tmp}" = "G" ]
	then
		Card_POTS_DIRECTION[$j]=-1
	else
		Card_POTS_DIRECTION[$j]=$((v_tmp))
	fi

#
# Analog board - Called Party Number
#

	msg="${Card_POTS_CONFIGCPN[$j]}"
	if [ $((current_line)) -eq 0 ]
	then
		hlpmsg=""
		high=7
	else
		hlpmsg="\nEnter G to use global setting"
		high=8
		if [ $((${Card_POTS_CONFIGCPN[$j]})) -lt 0 ]
		then
			msg="G"
		fi
	fi
	i=0
	while [ $((i)) -eq 0 ]
	do
		set_help_id adapter_config_cpn
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
			--inputbox \"Please enter Called Party Number (max length=24) $hlpmsg\" $high 58 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue 2
		fi
		v_tmp=$(cat $tmp)
		if [ ${#v_tmp} -lt 25 ]
		then
		  i=1
		fi
	done
	v_tmp=$(cat $tmp)
	if [ "${v_tmp}" = "G" ]
	then
		Card_POTS_CONFIGCPN[$j]=-1
	else
		if [ "X${v_tmp}X" = "XX" ]
		then
			Card_POTS_CONFIGCPN[$j]=""
		else
			Card_POTS_CONFIGCPN[$j]=$((v_tmp))
		fi
	fi

#
# Analog board - Calibration Mode
#

	msg="${Card_POTS_CALIBRATION[$j]}"
	if [ $((current_line)) -eq 0 ]
	then
		msg=" "
		high=3
	else
		msg=" \"G\" \"Use global setting\""
		if [ $((${Card_POTS_CALIBRATION[$j]})) -lt 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		high=4
	fi
	msg="$msg \"0\" \"- off (default)\""
	if [ $((${Card_POTS_CALIBRATION[$j]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Calibration on line up\""
	if [ $((${Card_POTS_CALIBRATION[$j]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- Calibration on outgoing calls\""
	if [ $((${Card_POTS_CALIBRATION[$j]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"4\" \"- Fast off-hook, adjust on line up\""
	if [ $((${Card_POTS_CALIBRATION[$j]})) -eq 4 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"8\" \"- Fast off-hook, adjust on outgoing calls\""
	if [ $((${Card_POTS_CALIBRATION[$j]})) -eq 8 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"5\" \"- Calibration on line up, fast off-hook\""
	if [ $((${Card_POTS_CALIBRATION[$j]})) -eq 5 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"a\" \"- Calibration on outgoing calls, fast off-hook\""
	if [ $((${Card_POTS_CALIBRATION[$j]})) -eq 0x0a ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi

	set_help_id adapter_calibration_mode
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select calibration mode\" $(($high+7)) 70 $high $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	v_tmp=$(cat $tmp)
	if [ "${v_tmp}" = "G" ]
	then
		Card_POTS_CALIBRATION[$j]=-1
	elif [ "${v_tmp}" = "a" ]
	then
		Card_POTS_CALIBRATION[$j]=0x0a
  else
		Card_POTS_CALIBRATION[$j]=$((v_tmp))
	fi


fi #}

#
# RBS configuration
#
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then #{
if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 1 ]
then
	msg="\"0\" \"- Wink start (default)\""
	if [ $((${CardRBS_TRUNK[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Loop start\""
	if [ $((${CardRBS_TRUNK[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- Ground start\""
	if [ $((${CardRBS_TRUNK[$current_card]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_rbs_trunk_mode
	msg="$dialog ${help} \
		--clear --title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select RBS trunk mode\" 10 70 3 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardRBS_TRUNK[$current_card]=$(cat $tmp)


	if [ $((${CardRBS_TRUNK[$current_card]})) -ne 0 ]
  then
	  msg="\"0\" \"- FSX/FSO (default)\""
	  if [ $((${CardRBS_OFFICE[$current_card]})) -eq 0 ]
  	then
  		msg="$msg on"
  	else
  		msg="$msg off"
  	fi
  	msg="$msg \"1\" \"- SAS/SAO\""
  	if [ $((${CardRBS_OFFICE[$current_card]})) -eq 1 ]
  	then
  		msg="$msg on"
  	else
  		msg="$msg off"
  	fi
	  set_help_id adapter_rbs_office
  	msg="$dialog ${help} --clear \
  		--title \"$card_title\" --backtitle \"$backtitle\" \
  		--radiolist \"Please select RBS trunk mode\" 9 70 2 $msg"
  	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
  	sh ${diva_dir}/cards.dlg
  	if [ $(($?)) -ne 0 ]
  	then
  		continue
  	fi
  	CardRBS_OFFICE[$current_card]=$(cat $tmp)

    if [ $((${CardNT[$current_card]})) -eq 0 ]
    then
	    msg="\"0\" \"- Use Answer Supervision (default)\""
  	  if [ $((${CardRBS_AS[$current_card]})) -eq 0 ]
    	then
    		msg="$msg on"
    	else
    		msg="$msg off"
    	fi
    	msg="$msg \"1\" \"- Answer Supervision not available\""
    	if [ $((${CardRBS_AS[$current_card]})) -eq 1 ]
    	then
    		msg="$msg on"
    	else
    		msg="$msg off"
    	fi
  	  set_help_id adapter_rbs_answer_supervision
    	msg="$dialog ${help} --clear \
    		--title \"$card_title\" --backtitle \"$backtitle\" \
    		--radiolist \"Please select Answer Supervision mode\" 9 70 2 $msg"
    	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
    	sh ${diva_dir}/cards.dlg
    	if [ $(($?)) -ne 0 ]
    	then
    		continue
    	fi
    	CardRBS_AS[$current_card]=$(cat $tmp)
    fi
  fi


	msg="\"0\" \"- Pulse dialing\""
	if [ $((${CardRBS_DIAL[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- DTMF dialing (default)\""
	if [ $((${CardRBS_DIAL[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- MF dialing\""
	if [ $((${CardRBS_DIAL[$current_card]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_rbs_dial_type
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select RBS trunk dialing mode\" 10 70 3 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardRBS_DIAL[$current_card]=$(cat $tmp)

#
# RBS Bearer Capabilities
#
	msg="\"0\" \"- Voice/analog (default)\""
	if [ $((${CardRBS_BC[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Data/digital\""
	if [ $((${CardRBS_BC[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_rbs_bc
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Signal incoming calls to application as\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardRBS_BC[$current_card]=$(cat $tmp)

#
#  RBS Glare Resolving Party
#
	msg="\"0\" \"- No"
	if [ $((${CardNT[$current_card]})) -eq 1 ]
	then
		msg="$msg (default in NT mode)\""
	else
		msg="$msg\""
	fi
	if [ $((${CardRBS_GLARE[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Yes"
	if [ $((${CardNT[$current_card]})) -eq 0 ]
	then
		msg="$msg (default in TE mode)\""
	else
		msg="$msg\""
	fi
	if [ $((${CardRBS_GLARE[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_rbs_glare_resolve
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select RBS glare-resolving party\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardRBS_GLARE[$current_card]=$(cat $tmp)

	i=1
	msg=" "
	while [ $((i)) -le 255 ]
	do
		msg="$msg \"$((i))\" \"Sec"
		if [ $((${CardNT[$current_card]})) -eq 1 ]
		then
			if [ $((i)) -eq 15 ]
			then
				msg="$msg (default)\""
			else
				msg="$msg\""
			fi
		else
			if [ $((i)) -eq 10 ]
			then
				msg="$msg (default)\""
			else
				msg="$msg\""
			fi
		fi
		if [ $((${CardRBS_RXTO[$current_card]})) -eq $((i)) ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		i=$(($i+1))
	done
	set_help_id adapter_rbs_received_digit_timeout
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select RBS received digit timeout\" 19 70 12 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardRBS_RXTO[$current_card]=$(cat $tmp)

#
# RBS ANSWER TIMEOUT
#
	i=1
	msg=" "
	while [ $((i)) -le 255 ]
	do
		msg="$msg \"$((i))\" \"Sec"
		if [ $((i)) -eq 120 ]
		then
			msg="$msg (default)\""
		else
			msg="$msg\""
		fi
		if [ $((${CardRBS_ANSWTO[$current_card]})) -eq $((i)) ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		i=$(($i+1))
	done
	set_help_id adapter_rbs_answer_timeout
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select RBS answer timeout\" 19 70 12 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardRBS_ANSWTO[$current_card]=$(cat $tmp)
fi
fi #} End of RBS configuration

#
# DID Number Length
#
i=0
if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
then
	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then #{
		if [ $((${CardNT2[$current_card]})) -eq 1 -a \
			 $((${PriProtNT2[${CardPROT[$current_card]}]})) -eq 1 ]
		then
			i=1
		else
			i=0
		fi
		if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 1 -o \
			 $((i)) -eq 1 ]
		then
			i=1
		else
			i=0
		fi
		if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -eq 1 -o \
			 $((i)) -eq 1 ]
		then
			i=1
		else
			i=0
		fi
	else #}{
		if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
		then #{
# --------------------------------------
#   BRI Board
# --------------------------------------
			if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 0 -a \
			 	$((${CardNT2[$current_card]})) -eq 1 ]
			then
				i=1
			else
				i=0
			fi
# --------------------------------------
		else #}{
# --------------------------------------
#   Analog Board
# --------------------------------------
			i=0
# --------------------------------------
		fi #}
	fi
fi #}

if [ $((i)) -eq 1 ]
then #{

	i=0
	msg=" "
  while [ $((i)) -le 120 ]
  do
        if [ $((i)) -eq 0 ]
        then
               	msg="$msg \"0\" \"- present call immediate to application (default)\""
        else
	  	msg="$msg \"$((i))\" \"- Wait $((i)) seconds for more digits before presenting\""
	fi
	if [ $((${CardDidTimeout[$current_card]})) -eq $((i)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
  	i=$(($i+1))
  done
  set_help_id adapter_did_timeout
  msg="$dialog ${help} --clear --title \"$card_title\" --backtitle \"$backtitle\" \
  	  --radiolist \"Please select the Direct Inward Dialing Collect Timeout in seconds\" 20 70 12 $msg"
  echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
  sh ${diva_dir}/cards.dlg
  if [ $(($?)) -eq 0 ]
  then
    CardDidTimeout[$current_card]=$(cat $tmp)
  else
    continue
  fi

  if [ $((StartCtransferOn)) -eq 1 ]
  then
  	$dialog --title "Note" \
  		--backtitle "$backtitle" \
  		--clear --msgbox "Please note that you have to change the Global Call Routing configuration in the Webserver, because the 'Advanced Routing method' is activated." 10 70
  else

	i=0
	msg=" "
	while [ $((i)) -le 20 ]
	do
		if [ $((i)) -eq 0 ]
		then
			msg="$msg \"$((i))\" \"- Forward call to application as is\""
		fi
		if [ $((i)) -eq 1 ]
		then
			msg="$msg \"$((i))\" \"- Accumulate one or more dialing digits\""
		fi
		if [ $((i)) -ge 2 ]
		then
			msg="$msg \"$((i))\" \"- Accumulate $((i)) or more dialing digits\""
		fi
		if [ $((${CardDIDLEN[$current_card]})) -eq $((i)) ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		i=$(($i+1))
	done
	set_help_id adapter_did_len
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select Direct Inward Dialing number length\" 19 70 12 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -eq 0 ]
	then
		CardDIDLEN[$current_card]=$(cat $tmp)
	fi

	msg=" "
	msg="$msg \"0\" \"- Not used (default)\""
	if [ "${CardSPECIAL[$current_card]}" != "" ]
	then
		msg="$msg off"
	else
		msg="$msg on"
	fi
	msg="$msg \"1\" \"- Use DID Special Number\""
	if [ "${CardSPECIAL[$current_card]}" != "" ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_did_special
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Use Direct Inward Dialing Special Number?\" 10 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	configure_special=$(cat $tmp)
	if [ $((${configure_special})) -eq 1 ]
	then
		$dialog $help --clear --title "$card_title" --backtitle "$backtitle" \
			--inputbox "Please enter Direct Inward Dialing Special Number" 10 70 ${CardSPECIAL[$current_card]} 2>$tmp
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardSPECIAL[$current_card]=$(cat $tmp)
	else
		CardSPECIAL[$current_card]=""
	fi
    fi
#
# Configure RBS protocol *ANI*DNI* format
#
	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then #{
		if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 1 ]
		then #{
			msg=" "
			msg="$msg \"0\" \"- Not used (default)\""
			if [ $((${Card_ANIDNI_2_ON[$current_card]})) -eq 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"1\" \"- ANI*DNI (ANI*DNIS)\""
			if [ $((${Card_ANIDNI_2_ON[$current_card]})) -ne 0 -a \
					 $((${Card_ANIDNI_1_ON[$current_card]})) -eq 0 -a \
					 $((${Card_ANIDNI_3_ON[$current_card]})) -eq 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"2\" \"- *ANI*DNI* (*ANI*DNIS*)\""
			if [ $((${Card_ANIDNI_2_ON[$current_card]})) -ne 0 -a \
					 $((${Card_ANIDNI_1_ON[$current_card]})) -ne 0 -a \
					 $((${Card_ANIDNI_3_ON[$current_card]})) -ne 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"3\" \"- *ANI*DNI (*ANI*DNIS)\""
			if [ $((${Card_ANIDNI_2_ON[$current_card]})) -ne 0 -a \
					 $((${Card_ANIDNI_1_ON[$current_card]})) -ne 0 -a \
					 $((${Card_ANIDNI_3_ON[$current_card]})) -eq 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"4\" \"- ANI*DNI* (ANI*DNIS*)\""
			if [ $((${Card_ANIDNI_2_ON[$current_card]})) -ne 0 -a \
					 $((${Card_ANIDNI_1_ON[$current_card]})) -eq 0 -a \
					 $((${Card_ANIDNI_3_ON[$current_card]})) -ne 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi

			set_help_id anidni_format
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please choose *ANI*DNIS* format\" 12 70 5 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			msg=$(cat $tmp)
			echo "Ausgabe: "$msg
			case $((msg)) in
				1) Card_ANIDNI_1_ON[$current_card]=0
  				 Card_ANIDNI_2_ON[$current_card]=1
  				 Card_ANIDNI_3_ON[$current_card]=0
					;;
				2) Card_ANIDNI_1_ON[$current_card]=1
  				 Card_ANIDNI_2_ON[$current_card]=1
  				 Card_ANIDNI_3_ON[$current_card]=1
					;;
				3) Card_ANIDNI_1_ON[$current_card]=1
  				 Card_ANIDNI_2_ON[$current_card]=1
  				 Card_ANIDNI_3_ON[$current_card]=0
					;;
				4)
				Card_ANIDNI_1_ON[$current_card]=0
  				 Card_ANIDNI_2_ON[$current_card]=1
  				 Card_ANIDNI_3_ON[$current_card]=1
  				 ;;
				*) Card_ANIDNI_1_ON[$current_card]=0
  				 Card_ANIDNI_2_ON[$current_card]=0
  				 Card_ANIDNI_3_ON[$current_card]=0
					;;
			esac
		fi #}
	fi #}

fi #}


#
# ETSI Call Transfer
#
i=0
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${PriProtETSI_SuppSrv[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		i=1
	fi
else
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		if [ $((${BriProtETSI_SuppSrv[${CardPROT[$current_card]}]})) -eq 1 ]
		then
			i=1
		fi
	else
# --------------------------------------
#   Analog Board
# --------------------------------------
		i=0
# --------------------------------------
	fi
fi

if [ $((i)) -eq 1 ]
then # {

	i=0
	msg=" "
	msg="$msg \"0\" \"- Default\""
	if [ $((${Card_ECT[$current_card]})) -eq 0 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi
	msg="$msg \"1\" \"- Auto\""
	if [ $((${Card_ECT[$current_card]})) -eq 1 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi
	msg="$msg \"2\" \"- Explicit\""
	if [ $((${Card_ECT[$current_card]})) -eq 2 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi

	set_help_id adapter_ect
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select ETSI Call Transfer mode\" 10 70 3 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	Card_ECT[$current_card]=$(cat $tmp)

	msg=" "
	msg="$msg \"0\" \"- Deflection (default)\""
	if [ $((${Card_DEFLECTION[$current_card]})) -eq 0 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi
	msg="$msg \"1\" \"- Rerouting\""
	if [ $((${Card_DEFLECTION[$current_card]})) -eq 1 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi

	set_help_id adapter_deflection
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select Deflection Type\" 10 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	Card_DEFLECTION[$current_card]=$(cat $tmp)

fi # }

if [ $((${CardPRI[$current_card]})) -eq 0 -a \
     $((${Card_ANALOG[$current_card]})) -eq 0 -a \
     $((${CardP2P[$current_card]})) -eq 0  -a \
     "${BriProtPROT[${CardPROT[$current_card]}]}" == "ETSI" ]
then
	msg=" "
	msg="$msg \"0\" \"- Off (default)\""
	if [ $((${Card_LINKBALANCE[$current_card]})) -eq 0 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi
	msg="$msg \"1\" \"- On\""
	if [ $((${Card_LINKBALANCE[$current_card]})) -eq 1 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi

	set_help_id etsi_linkbalance
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select ECT Link Balance\" 10 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	Card_LINKBALANCE[$current_card]=$(cat $tmp)
else
	Card_LINKBALANCE[$current_card]=0
fi

# TAKE LAST RDN
cfg_qsig=0
cfg_etsi=0

if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
then

	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then
		cfg_qsig=$((${PriProtQSIG[${CardPROT[$current_card]}]}))
	else
		if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
		then
# --------------------------------------
#   BRI Board
# --------------------------------------
			cfg_qsig=$((${BriProtQSIG[${CardPROT[$current_card]}]}))
# --------------------------------------
		fi
	fi

	if [ $((${CardPRI[$current_card]})) -eq 1 ]
	then
		if [ "${PriProtPROT[${CardPROT[$current_card]}]}" == "ETSI" ]
		then
			cfg_etsi=1
		fi
	else
		if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
		then
# --------------------------------------
#   BRI Board
# --------------------------------------
			if [ "${BriProtPROT[${CardPROT[$current_card]}]}" == "ETSI" ]
			then
				cfg_etsi=1
			fi
# --------------------------------------
		fi
	fi
fi

if [ $((cfg_etsi)) -eq 1 -o $((cfg_qsig)) -eq 1 ]
then
	msg="\"0\" \"- Take first RDN (default)\""
	if [ $((${CardQSIG_TAKELASTRDN[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Take last RDN\""
	if [ $((${CardQSIG_TAKELASTRDN[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id qsig_takelastrdn
	msg="$dialog ${help} --clear --title \"$card_title\" \
		--backtitle \"$backtitle\" \
		--radiolist \"Please select ETSI/QSIG RDN mode\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardQSIG_TAKELASTRDN[$current_card]=$(cat $tmp)
fi

#
# ETSI MWI feature
#
i=0
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${PriProtETSI_SuppSrv[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		i=1
	fi
else
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		if [ $((${BriProtETSI_SuppSrv[${CardPROT[$current_card]}]})) -eq 1 ]
		then
			i=1
		fi
# --------------------------------------
	fi
fi

if [ $((i)) -eq 1 ]
then
	i=0
	msg=" "
	msg="$msg \"0\" \"- Default (uses REGISTER Message)\""
	if [ $((${Card_ETSI_MWI[$current_card]})) -eq 0 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi
	msg="$msg \"1\" \"- Use Dummy Call Reference Facilities\""
	if [ $((${Card_ETSI_MWI[$current_card]})) -eq 1 ]
	then
	  msg="$msg on"
	else
	  msg="$msg off"
	fi
	set_help_id adapter_mwi
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select ETSI Message Waiting mode\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	Card_ETSI_MWI[$current_card]=$(cat $tmp)
fi

i=0
msg=" "
msg="$msg \"0\" \"- Disabled (default)\""
if [ $((${Card_ADDMISSINGRDN[$current_card]})) -eq 0 ]
then
  msg="$msg on"
else
  msg="$msg off"
fi
msg="$msg \"1\" \"- Use Called Number\""
if [ $((${Card_ADDMISSINGRDN[$current_card]})) -eq 1 ]
then
  msg="$msg on"
else
  msg="$msg off"
fi
set_help_id adapter_addmissingrdn
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please select Redirecting Number Emulation\" 9 70 2 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
Card_ADDMISSINGRDN[$current_card]=$(cat $tmp)


#
# R2 protocol parameters
#
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then #{
	if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		if [ $((${PriProtR2Dialect[${CardPROT[$current_card]}]})) -gt 0 ]
		then
			i=0
			msg=" "
			while [ $((i)) -le 22 ]
			do
				if [ $((i)) -eq 0 ]
				then
					msg="$msg \"$((i))\" \"- none\""
				fi
				if [ $((i)) -eq 1 ]
				then
					msg="$msg \"$((i))\" \"- one digit\""
				fi
				if [ $((i)) -eq 2 ]
				then
					msg="$msg \"$((i))\" \"- $((i)) digits (default)\""
				fi
				if [ $((i)) -gt 2 ]
				then
					msg="$msg \"$((i))\" \"- $((i)) digits\""
				fi
				if [ $((${CardR2_CTRYLEN[$current_card]})) -eq $((i)) ]
				then
					msg="$msg on"
				else
					msg="$msg off"
				fi
				i=$(($i+1))
			done
			set_help_id adapter_r2_ctrylen_india
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please select routing information length\" 19 70 12 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardR2_CTRYLEN[$current_card]=$(cat $tmp)
		else
			i=0
			msg=" "
			while [ $((i)) -le 22 ]
			do
				if [ $((i)) -eq 0 ]
				then
					msg="$msg \"$((i))\" \"- none (default)\""
				fi
				if [ $((i)) -eq 1 ]
				then
					msg="$msg \"$((i))\" \"- one digit\""
				fi
				if [ $((i)) -gt 1 ]
				then
					msg="$msg \"$((i))\" \"- $((i)) digits\""
				fi
				if [ $((${CardR2_CTRYLEN[$current_card]})) -eq $((i)) ]
				then
					msg="$msg on"
				else
					msg="$msg off"
				fi
				i=$(($i+1))
			done
			set_help_id adapter_r2_ctrylen_china
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please select country code length\" 19 70 12 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardR2_CTRYLEN[$current_card]=$(cat $tmp)
		fi
		if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -eq 1 ]  && 
			! ( [ $((${PriProtR2Dialect[${CardPROT[$current_card]}]})) -eq 0 ] || 
			[ $((${PriProtR2Dialect[${CardPROT[$current_card]}]})) -eq 3 ]    )
		then  # all R2 except CN1 and Thailand
			msg="\"0\" \"Request CLI, default\""
			if [ $((${CardR2_NOCLI[$current_card]})) -eq 0 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"1\" \"Don't request CLI\""
			if [ $((${CardR2_NOCLI[$current_card]})) -eq 1 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			set_help_id adapter_r2_nocli
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please configure Called Line Identification (CLI) options\" 9 70 2 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardR2_NOCLI[$current_card]=$(cat $tmp)
		fi
		if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -eq 1 ]
		then
			msg="\"1\" \"ON (default)\""
			if [ $((${CardR2_AUTOALERT[$current_card]})) -eq 1 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"0\" \"OFF\""
			if [ $((${CardR2_AUTOALERT[$current_card]})) -eq 1 ]
			then
				msg="$msg off"
			else
				msg="$msg on"
			fi
			set_help_id adapter_r2_autoalert    # ???????????
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please configure Automatic Alert option\" 9 70 2 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardR2_AUTOALERT[$current_card]=$(cat $tmp)
		fi
	fi
fi #}

#
# LAYER1 FRAMING
#
if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
then #{

if [ $((${CardPRI[$current_card]})) -eq 1 ]
then #{
if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 0 ]
then
	msg="\"0\" \"- National default (default)\""
	if [ $((${CardCRC[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Doubleframing (no CRC4)\""
	if [ $((${CardCRC[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- Multiframing (CRC4)\""
	if [ $((${CardCRC[$current_card]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"3\" \"- Autodetection\""
	if [ $((${CardCRC[$current_card]})) -eq 3 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_layer1_framing
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select layer 1 framing\" 10 70 3 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardCRC[$current_card]=$(cat $tmp)
fi
fi #}

fi #}

#
# TX Attenuation
#
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then #{
if [ $((${PriProtCH[${CardPROT[$current_card]}]})) -lt 30 ]
then
	msg="\"0\" \"- 0 dBm (default)\""
	if [ $((${Card_TX_ATTENUATION[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- -7.5 dBm\""
	if [ $((${Card_TX_ATTENUATION[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"2\" \"- -15 dBm\""
	if [ $((${Card_TX_ATTENUATION[$current_card]})) -eq 2 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_tx_attenuation
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select transmit path attenuation\" 10 70 3 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	Card_TX_ATTENUATION[$current_card]=$(cat $tmp)
fi
fi #}

#
#  D-CHANNEL LAYER2 ACTIVATION POLICY
#

if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 -a \
		 $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
then #{
	if [ $((${BriProtQSIG[${CardPROT[$current_card]}]})) -eq 0 ]
  then
		if [ $((${CardL2_CHANGED[$current_card]})) -eq 0 ]
		then
			if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 1 ]
			then
				CardL2[$current_card]=2
			else
				CardL2[$current_card]=1
			fi
		fi

		old_l2=${CardL2[$current_card]}
		if [ $((${CardNT[$current_card]})) -ne 0 ]
		then
			if [ $((${CardL2[$current_card]})) -gt 1 ]
			then
				CardL2[$current_card]=1
			fi
		fi

		msg="\"0\" \"- On demand\""
		if [ $((${CardL2[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 0 ]
		then
			msg="$msg \"1\" \"- Deactivation only by other side (default)\""
		else
			if [ $((${CardNT[$current_card]})) -eq 0 ]
			then
				msg="$msg \"1\" \"- Deactivation only by other side\""
			else
				msg="$msg \"1\" \"- Deactivation only by other side (default)\""
			fi
		fi
		if [ $((${CardL2[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		if [ $((${CardNT[$current_card]})) -eq 0 ]
		then
			if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 0 ]
			then
				msg="$msg \"2\" \"- Always active\""
			else
				msg="$msg \"2\" \"- Always active (default)\""
			fi
			if [ $((${CardL2[$current_card]})) -eq 2 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
		fi
		set_help_id adapter_layer2_activation_policy
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please select D-channel layer 2 activation policy\" 10 70 3 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardL2[$current_card]=$(cat $tmp)

		if [ $((${CardL2[$current_card]})) -ne $((old_l2)) ]
		then
			CardL2_CHANGED[$current_card]=1
		fi
  fi
fi #}

#
#  VOICE COMPANDING OPTIONS
#

if [ $((${Card_ANALOG[$current_card]})) -eq 0 -o $((current_line)) -eq 0 ]
# hide when configuring single analog lines
then # {
msg="\"0\" \"- Protocol default\""
if [ $((${CardLAW[$current_card]})) -eq 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi

msg="$msg \"1\" \"- Force A-Law\""
if [ $((${CardLAW[$current_card]})) -eq 1 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"2\" \"- Force u-Law\""
if [ $((${CardLAW[$current_card]})) -eq 2 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
set_help_id adapter_companding_type
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please select voice companding options\" 10 70 3 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
CardLAW[$current_card]=$(cat $tmp)
fi # }

ltmp=1
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -eq 3 ]
	then
		ltmp=0
	fi
fi

if [ $((${Card_ANALOG[$current_card]})) -ne 0 ]
then
	ltmp=0
fi

if [ $((${Card_ResourceBoard[$current_card]})) -gt 0 ]
then
  ltmp=0
fi

if [ $((ltmp)) -eq 1 ]
then #{
	#
	# HUNT GROUP OPERATION MODE
	#
	msg="\"0\" \"- Standard operation (default)\""
	if [ $((${CardHI[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Hunt Group operation (only PABX in H.G. mode)\""
	if [ $((${CardHI[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_hunt_group
	msg="$dialog ${help} --clear \
		--title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please configure Hunt Group operation mode\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardHI[$current_card]=$(cat $tmp)
fi #}

#
# FRACTIONAL LINE OPTIONS
#
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then #{
  if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -eq 0 -a $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
  then
		msg="\"0\" \"- Standard operation (default)\""
		if [ $((${CardFL[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- Fractional line operation\""
		if [ $((${CardFL[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id adapter_fractional_line
		msg="$dialog ${help} --clear \
			--title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please configure trunk operation mode\" 9 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardFL[$current_card]=$(cat $tmp)

		if [ $((${CardFL[$current_card]})) -eq 1 ]
		then
			i=1
			msg=" "
			while [ $((i)) -le $((${PriProtCH[${CardPROT[$current_card]}]})) ]
			do
				msg="$msg \"$((i))\" \"Start at channel $((i))\""
				if [ $((${CardFL_LEN[$current_card]})) -eq $((i)) ]
				then
					msg="$msg on"
				else
					msg="$msg off"
				fi
				i=$(($i+1))
			done
			set_help_id adapter_fractional_lo_ch
			msg="$dialog ${help} --clear \
				--title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please select lowest available channel (fraction start)\" 19 70 12 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardFL_LEN[$current_card]=$(cat $tmp)
		fi
	fi
fi #}

#
# TEI VALUE/L2 OPERATION MODE
#
RealP2P=1
if [ $((${CardPRI[$current_card]})) -eq 0 ]
then #{
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then #{
# --------------------------------------
#   BRI Board
# --------------------------------------
		if [ $((${BriProtNOSIG[${CardPROT[$current_card]}]})) -eq 0 -a $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
		then #{
			if [ $((${BriProtQSIG[${CardPROT[$current_card]}]})) -eq 0 ]
			then #{
				msg="\"0\" \"- Point to Multipoint (default)\""
				if [ $((${CardP2P[$current_card]})) -eq 0 ]
				then #{
					msg="$msg on"
				else #}{
					msg="$msg off"
				fi #}
				msg="$msg \"1\" \"- Point to Point (fixed TEI)\""
				if [ $((${CardP2P[$current_card]})) -eq 1 ]
				then #{
					msg="$msg on"
				else #}{
					msg="$msg off"
				fi #}
				set_help_id adapter_trunk_operation_mode
				msg="$dialog ${help} --clear \
					--title \"$card_title\" --backtitle \"$backtitle\" \
					--radiolist \"Please configure trunk operation mode\" 9 70 2 $msg"
				echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
				sh ${diva_dir}/cards.dlg
				if [ $(($?)) -ne 0 ]
				then #{
					continue
				fi #}
				CardP2P[$current_card]=$(cat $tmp)
			else #}{
				CardP2P[$current_card]=1
			  if [ $((${BriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
				then #{
		    	CardP2P[$current_card]=0
 	   		fi #}
			fi #}
		else #}{
			CardP2P[$current_card]=0
		fi #}
# --------------------------------------
	else #}{
# --------------------------------------
#   Analog Board
# --------------------------------------
		CardP2P[$current_card]=0
	  RealP2P=0
# --------------------------------------
	fi #}
else #}{
	CardP2P[$current_card]=1
	if [ $((${PriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
  then
	  CardP2P[$current_card]=0
  fi
	if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -eq 1 ]
	then
	  CardP2P[$current_card]=0
	fi
	if [ $((${PriProtRBS[${CardPROT[$current_card]}]})) -eq 1 ]
	then
	  RealP2P=0
	fi
	if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
	then
	  CardP2P[$current_card]=0
	fi
fi #}

if [ $((${CardP2P[$current_card]})) -eq 1 -a $((RealP2P)) -eq 1 ]
then
	msg="\"0\" \"- Use standard TEI (TEI 0, default)\""
	if [ $((${CardSTEI[$current_card]})) -eq 0 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	msg="$msg \"1\" \"- Use custom TEI\""
	if [ $((${CardSTEI[$current_card]})) -eq 1 ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	set_help_id adapter_choose_tei
	msg="$dialog ${help} \
		--clear --title \"$card_title\" --backtitle \"$backtitle\" \
		--radiolist \"Please select TEI value\" 9 70 2 $msg"
	echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
	sh ${diva_dir}/cards.dlg
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
	CardSTEI[$current_card]=$(cat $tmp)

	if [ $((${CardSTEI[$current_card]})) -eq 1 ]
	then
		i=0
		msg=" "
		while [ $((i)) -le $((63)) ]
		do
			if [ $((i)) -eq 0 ]
			then
				msg="$msg \"$((i))\" \"- TEI $((i)) (default)\""
			else
				msg="$msg \"$((i))\" \"- TEI $((i))\""
			fi
			if [ $((${CardNTEI[$current_card]})) -eq $((i)) ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			i=$(($i+1))
		done
		set_help_id adapter_choose_tei
		msg="$dialog ${help} \
			--clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please select TEI value\" 19 70 12 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardNTEI[$current_card]=$(cat $tmp)
	fi
fi

i=0
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
  if [ $((${PriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
  then
    i=1
  fi
  if [ $((${PriProtR2[${CardPROT[$current_card]}]})) -gt 0 ]
  then
    i=1
  fi
else
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
  	if [ $((${CardNT[$current_card]})) -eq 1 -o $((${BriProtQSIG[${CardPROT[$current_card]}]})) -eq 1 ]
  	then
    	i=1
  	fi
# --------------------------------------
	else
# --------------------------------------
#   ANALOG Board
# --------------------------------------
		i=0
# --------------------------------------
	fi
fi

ltmp=1
if [ $((${CardPRI[$current_card]})) -eq 1 ]
then
	if [ $((${PriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
	then
    if [ $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
    then
		  ltmp=0
    else
      i=1
    fi
	fi
else
	if [ $((${Card_ANALOG[$current_card]})) -eq 0 ]
	then
# --------------------------------------
#   BRI Board
# --------------------------------------
		if [ $((${BriProtNOSIG[${CardPROT[$current_card]}]})) -gt 0 ]
		then
			ltmp=0
		fi
# --------------------------------------
	else
# --------------------------------------
#   Analog Board
# --------------------------------------
		ltmp=0
# --------------------------------------
	fi
fi


if [ $((ltmp)) -eq 1 ]
then
	#
	# CONFIGURE SOURCE OF LOCAL TONES
	#
	if [ $((${CardP2P[$current_card]})) -eq 1 -o $((i)) -eq 1 ]
	then
		msg="\"0\" \"- Tones provided by ISDN equipment (default)\""
		if [ $((${CardLTONE[$current_card]})) -eq 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		msg="$msg \"1\" \"- Tones provided by Diva Board\""
		if [ $((${CardLTONE[$current_card]})) -eq 1 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		set_help_id adapter_in_band_tones
		msg="$dialog ${help} \
			--clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please select source of local tones (BUSY, ALERTING, ...)\" 9 70 2 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
		sh ${diva_dir}/cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardLTONE[$current_card]=$(cat $tmp)
	fi
fi

if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 ]
then #{
	if [ $((${BriProtNI[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		i=0
		msg=""
		while [ $((i)) -le $((20)) ]
		do
			msg="$msg \"$((i))\" \"\""
			if [ $((${CardUS_EKTS_N_CACH_HANDLES[$current_card]})) -eq $((i)) ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			i=$(($i+1))
		done
		msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please enter the number of Call Appearances (Call References) if CACH (Call Appearance Call Handling) is active\" 20 70 12 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}cards.dlg
		sh ${diva_dir}cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardUS_EKTS_N_CACH_HANDLES[$current_card]=$(cat $tmp)

		i=0
		msg=""
		while [ $((i)) -le $((127)) ]
		do
			if [ $((i)) -eq 61 ]
			then
				msg="$msg \"$((i))\" \"(default)\""
			else
				msg="$msg \"$((i))\" \"\""
			fi
			if [ $((${CardUS_EKTS_BEGIN_CONF[$current_card]})) -eq $((i)) ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			i=$(($i+1))
		done
		msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please enter programmable value of 'Begin Conference' feature activator\" 20 70 12 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}cards.dlg
		sh ${diva_dir}cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardUS_EKTS_BEGIN_CONF[$current_card]=$(cat $tmp)

		i=0
		msg=""
		while [ $((i)) -le $((127)) ]
		do
			if [ $((i)) -eq 63 ]
			then
				msg="$msg \"$((i))\" \"(default)\""
			else
				msg="$msg \"$((i))\" \"\""
			fi
			if [ $((${CardUS_EKTS_DROP_CONF[$current_card]})) -eq $((i)) ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			i=$(($i+1))
		done
		msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please enter programmable value of 'Drop Conference' feature activator\" 20 70 12 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}cards.dlg
		sh ${diva_dir}cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardUS_EKTS_DROP_CONF[$current_card]=$(cat $tmp)

		i=0
		msg=""
		while [ $((i)) -le $((127)) ]
		do
			if [ $((i)) -eq 62 ]
			then
				msg="$msg \"$((i))\" \"(default)\""
			else
				msg="$msg \"$((i))\" \"\""
			fi
			if [ $((${CardUS_EKTS_CALL_TRANSFER[$current_card]})) -eq $((i)) ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			i=$(($i+1))
		done
		msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please enter programmable value of 'Call Transfer' feature activator\" 20 70 12 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}cards.dlg
		sh ${diva_dir}cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardUS_EKTS_CALL_TRANSFER[$current_card]=$(cat $tmp)
	fi

	if [ $((${BriProtUS[${CardPROT[$current_card]}]})) -eq 1 ]
	then
		i=0
		msg=""
		while [ $((i)) -le $((127)) ]
		do
			if [ $((i)) -eq 62 ]
			then
				msg="$msg \"$((i))\" \"(default)\""
			else
				msg="$msg \"$((i))\" \"\""
			fi
			if [ $((${CardUS_EKTS_MWI[$current_card]})) -eq $((i)) ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			i=$(($i+1))
		done
		msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
			--radiolist \"Please enter programmable value of 'Voice Mail' feature activator\" 19 70 12 $msg"
		echo "$msg 2>$tmp" > ${diva_dir}cards.dlg
		sh ${diva_dir}cards.dlg
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardUS_EKTS_MWI[$current_card]=$(cat $tmp)
	fi
fi #}

#
# Select the Link Count for the ETSI protocols
#
if [ $((${CardPRI[$current_card]})) -eq 0 -a \
		 $((${Card_ANALOG[$current_card]})) -eq 0 -a \
		 $((${Card_ResourceBoard[$current_card]})) -eq 0 ]
then #{
	if [ $((${BriProtUS[${CardPROT[$current_card]}]}))    -eq 0 -a \
			 $((${BriProtNOSIG[${CardPROT[$current_card]}]})) -eq 0 -a \
			 $((${BriProtQSIG[${CardPROT[$current_card]}]}))  -eq 0 -a \
			 $((${CardP2P[$current_card]}))										-eq 0 ]
	then
		if [ $((${CardNT[$current_card]})) -eq  0 ]
		then
			msg="\"1\" \"- one TEI (default)\""
			if [ $((${CardBRI_LK[$current_card]})) -le 1 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			msg="$msg \"2\" \"- two TEI's\""
			if [ $((${CardBRI_LK[$current_card]})) -gt 1 ]
			then
				msg="$msg on"
			else
				msg="$msg off"
			fi
			set_help_id bri_adapter_tei_count
			msg="$dialog ${help} \
				--clear --title \"$card_title\" --backtitle \"$backtitle\" \
				--radiolist \"Please configure amount of TEI's\" 9 70 2 $msg"
			echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
			sh ${diva_dir}/cards.dlg
			if [ $(($?)) -ne 0 ]
			then
				continue
			fi
			CardBRI_LK[$current_card]=$(cat $tmp)
		else
			CardBRI_LK[$current_card]=0
		fi
	fi

	if [ $((${CardBRI_LK[$current_card]})) -gt 1 ]
	then
		$dialog --clear --title "$card_title" --backtitle "$backtitle" \
			--inputbox "Please enter MSN to be used with TEI-1" 10 70 ${CardSPID1MSN[$current_card]} 2>$tmp
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardSPID1MSN[$current_card]=$(cat $tmp)

		$dialog --clear --title "$card_title" --backtitle "$backtitle" \
			--inputbox "Please enter MSN to be used with TEI-2" 10 70 ${CardSPID2MSN[$current_card]} 2>$tmp
		if [ $(($?)) -ne 0 ]
		then
			continue
		fi
		CardSPID2MSN[$current_card]=$(cat $tmp)
	else
		CardSPID2MSN[$current_card]=""
		CardSPID1MSN[$current_card]=""
	fi

fi #}

#
# GLOBAL FAX OPTIONS - MAX FAX SPEED LIMIT
#

if [ $((${Card_ANALOG[$current_card]})) -eq 0 -o $((current_line)) -eq 0 ]
then # {
msg="\"0\"          \"- No fax speed limit (default)\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((0)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"31200\" \"- Limit to 31200 bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((31200)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"28800\" \"- Limit to 28800 bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((28800)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"26400\" \"- Limit to 26400 bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((26400)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"24000\" \"- Limit to 24000 bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((24000)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"21600\" \"- Limit to 21600 bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((21600)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"19200\" \"- Limit to 19200 bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((19200)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"14400\" \"- Limit to 14400 bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((14400)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"9600\"  \"- Limit to 9600  bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((9600)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"4800\"  \"- Limit to 4800  bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((4800)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"2400\"  \"- Limit to 2400  bps\""
if [ $((${CardFAX_SPEED[$current_card]})) -eq $((2400)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
set_help_id adapter_fax_speed_limit
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please configure global fax option - maximal fax speed limit\" 18 70 11 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
CardFAX_SPEED[$current_card]=$(cat $tmp)

#
# GLOBAL GAX OPTIONS - MIN FAX SPEED LIMIT
#
msg="\"0\"          \"- No fax speed limit (default)\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((0)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"31200\" \"- Not less than 31200 bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((31200)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"28800\" \"- Not less than 28800 bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((28800)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"26400\" \"- Not less than 26400 bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((26400)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"24000\" \"- Not less than 24000 bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((24000)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"21600\" \"- Not less than 21600 bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((21600)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"19200\" \"- Not less than 19200 bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((19200)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"14400\" \"- Not less than 14400 bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((14400)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"9600\"  \"- Not less than 9600  bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((9600)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"4800\"  \"- Not less than 4800  bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((4800)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"2400\"  \"- Not less than 2400  bps\""
if [ $((${CardMIN_FAX_SPEED[$current_card]})) -eq $((2400)) ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
set_help_id adapter_fax_speed_limit
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please configure global fax option - minimal fax speed limit\" 18 70 11 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
CardMIN_FAX_SPEED[$current_card]=$(cat $tmp)

#
# Max session overhead
#
i=30
msg=""
msg="$msg \"0\" \"Off (default)"
msg="$msg\""
if [ $((${Card_FAX_MAX_OVERHEAD[$current_card]})) -eq 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
while [ $((i)) -le $((240)) ]
do
	msg="$msg \"$((i))\" \"Sec"
	msg="$msg\""
	if [ $((${Card_FAX_MAX_OVERHEAD[$current_card]})) -eq $((i)) ]
	then
		msg="$msg on"
	else
		msg="$msg off"
	fi
	i=$(($i+30))
done

set_help_id max_fax_overhead
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please select non productive fax session time limit\" 16 70 9 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
Card_FAX_MAX_OVERHEAD[$current_card]=$(cat $tmp)

#
#  GLOBAL FAX OPTIONS - T.30
#
msg="     \"0\"  \"- Disable fine resolution\""
if [ $((${CardFAX_FINE[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"1\"  \"- Disable error correction mode (ECM)\""
if [ $((${CardFAX_ECM[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"2\"  \"- Use ECM frame length of 64 bytes\""
if [ $((${CardFAX_E64B[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"3\"  \"- Disable 2D fax document compression\""
if [ $((${CardFAX_C2D[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"4\"  \"- Disable T.6 fax document compression\""
if [ $((${CardFAX_CT6[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"5\"  \"- Disable uncompressed T.6 fax document lines\""
if [ $((${CardFAX_DUC[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"6\"  \"- Refuse incoming polling requests\""
if [ $((${CardFAX_NPL[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"7\"  \"- Hide 'total pages' information in fax message\""
if [ $((${CardFAX_HTL[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"8\"  \"- Hide 'head line' information in fax message\""
if [ $((${CardFAX_HHL[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"9\"  \"- Hide 'page info' information in fax message\""
if [ $((${CardFAX_HPI[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"10\" \"- Disable fallback to lower speed on failure\""
if [ $((${CardFAX_DFB[$current_card]})) -ne 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi

set_help_id adapter_fax_t30_options
msg="$dialog ${help} --clear \
    --title \"$card_title\" --backtitle \"$backtitle\" \
		--separate-output \
		--checklist \"Please configure global fax options - T.30 protocol\" 18 70 11 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi

grep "^0$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_FINE[$current_card]=0x0001
else
	CardFAX_FINE[$current_card]=0
fi
grep "^1$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_ECM[$current_card]=0x0002
else
	CardFAX_ECM[$current_card]=0
fi
grep "^2$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_E64B[$current_card]=0x0004
else
	CardFAX_E64B[$current_card]=0
fi
grep "^3$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_C2D[$current_card]=0x0008
else
	CardFAX_C2D[$current_card]=0
fi
grep "^4$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_CT6[$current_card]=0x0010
else
	CardFAX_CT6[$current_card]=0
fi
grep "^5$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_DUC[$current_card]=0x0020
else
	CardFAX_DUC[$current_card]=0
fi
grep "^6$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_NPL[$current_card]=0x0040
else
	CardFAX_NPL[$current_card]=0
fi
grep "^7$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_HTL[$current_card]=0x0080
else
	CardFAX_HTL[$current_card]=0
fi
grep "^8$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_HHL[$current_card]=0x0100
else
	CardFAX_HHL[$current_card]=0
fi
grep "^9$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_HPI[$current_card]=0x0180
else
	CardFAX_HPI[$current_card]=0
fi
grep "^10$" $tmp > /dev/null 2>&1
if [ $(($?)) -eq 0 ]
then
	CardFAX_DFB[$current_card]=0x0200
else
	CardFAX_DFB[$current_card]=0
fi

# -----------------------------------
#  Part 68 Limiter options
# -----------------------------------
msg="\"0\" \"- National default\""
if [ $((${Card_DISABLE_PART68[$current_card]})) -eq 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"1\" \"- Force on\""
if [ $((${Card_DISABLE_PART68[$current_card]})) -eq 1 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"2\" \"- Force off\""
if [ $((${Card_DISABLE_PART68[$current_card]})) -eq 2 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi

set_help_id part68_limiter
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please configure Part 68 voice signal limiter\" 10 70 3 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
Card_DISABLE_PART68[$current_card]=$(cat $tmp)

# -----------------------------------
#  DTMF supression optiions
# -----------------------------------
msg="\"0\" \"- Off (default)\""
if [ $((${Card_DTMF_SUPRESSION[$current_card]})) -eq 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"1\" \"- On\""
if [ $((${Card_DTMF_SUPRESSION[$current_card]})) -eq 1 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi

set_help_id dtmf_supression
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please configure DTMF clamping\" 9 70 2 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
Card_DTMF_SUPRESSION[$current_card]=$(cat $tmp)
fi # }

# -----------------------------------
# DTMF Collect
# -----------------------------------
if [ $((${Card_ANALOG[$current_card]})) -ne 0 ]
then
	if [ $((current_line)) -eq 0 ]
	then
		msg=" "
		j=$(($current_card))
		high=12
	else
		msg=" \"G\" \"Use global setting\""
		j=$(($current_line))
		if [ $((${Card_DTMF_COLLECT[$j]})) -lt 0 ]
		then
			msg="$msg on"
		else
			msg="$msg off"
		fi
		high=13
	fi
  i=0
  while [ $((i)) -le $((21)) ]
  do
    if [ $((i)) -eq 0 ]
    then
      msg="$msg \"$((i))\" \"(disable)\""
    else
      msg="$msg \"$((i))\" \"\""
    fi
    if [ $((${Card_DTMF_COLLECT[$j]})) -eq $((i)) ]
    then
      msg="$msg on"
    else
      msg="$msg off"
    fi
    i=$(($i+1))
  done
	set_help_id dtmf_collect
  msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
    --radiolist \"Please enter number of DTMF digits to collect\" $(($high+7)) 70 $high $msg"
  echo "$msg 2>$tmp" > ${diva_dir}cards.dlg
  sh ${diva_dir}cards.dlg
  if [ $(($?)) -ne 0 ]
  then
    continue
  fi
	v_tmp=$(cat $tmp)
	if [ "${v_tmp}" = "G" ]
	then
		Card_DTMF_COLLECT[$j]=-1
	else
		Card_DTMF_COLLECT[$j]=$((v_tmp))
	fi
fi

# -----------------------------------
#  Audio Recording AGC
# -----------------------------------
if [ $((${Card_ANALOG[$current_card]})) -eq 0 -o $((current_line)) -eq 0 ]
then
msg="\"0\" \"- Automatic Gain Control Off (default)\""
if [ $((${Card_REC_AGC[$current_card]})) -eq 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"1\" \"- Automatic Gain Control On\""
if [ $((${Card_REC_AGC[$current_card]})) -eq 1 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi

set_help_id audio_rec_agc
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please configure Audio Recording AGC\" 9 70 2 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
Card_REC_AGC[$current_card]=$(cat $tmp)
fi

# -----------------------------------
#  Echo Canceller Tail Length
# -----------------------------------
msg="\"0\" \"- 128 ms (default)\""
if [ $((${Card_EC_TAIL[$current_card]})) -eq 0 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi
msg="$msg \"1\" \"- 256 ms\""
if [ $((${Card_EC_TAIL[$current_card]})) -eq 256 ]
then
	msg="$msg on"
else
	msg="$msg off"
fi

set_help_id ec_tail
msg="$dialog ${help} --clear \
	--title \"$card_title\" --backtitle \"$backtitle\" \
	--radiolist \"Please configure Echo Canceller Tail Length\" 9 70 2 $msg"
echo "$msg 2>$tmp" > ${diva_dir}/cards.dlg
sh ${diva_dir}/cards.dlg
if [ $(($?)) -ne 0 ]
then
	continue
fi
Card_EC_TAIL[$current_card]=$((256 * $(cat $tmp)))

# -----------------------------------
# RBS_SILENCE_TIMEOUT
# -----------------------------------
if [ $((${Card_ANALOG[$current_card]})) -ne 0 -a $((current_line)) -eq 0 ]
then
  i=0
  msg=""
  while [ $((i)) -le $((31)) ]
  do
    if [ $((i)) -eq 0 ]
    then
      msg="$msg \"$((i))\" \"(disable)\""
    else
      msg="$msg \"$((i))\" \"\""
    fi
    if [ $((${Card_RBS_SILENCE_TIMEOUT[$current_card]})) -eq $((i)) ]
    then
      msg="$msg on"
    else
      msg="$msg off"
    fi
    i=$(($i+1))
  done
	set_help_id rbs_silence_timeout
  msg="$dialog --clear --title \"$card_title\" --backtitle \"$backtitle\" \
    --radiolist \"Please enter timeout on silence before hangup\" 19 70 12 $msg"
  echo "$msg 2>$tmp" > ${diva_dir}cards.dlg
  sh ${diva_dir}cards.dlg
  if [ $(($?)) -ne 0 ]
  then
    continue
  fi
  Card_RBS_SILENCE_TIMEOUT[$current_card]=$(cat $tmp)
fi


# ------------------------------------
#  Extended configuration options
# ------------------------------------
if [ $((start_extended_configuration)) -eq 1 ]
then
	extended_adapter_configuration
	if [ $(($?)) -ne 0 ]
	then
		continue
	fi
fi

# } END OF THE MAIN LOOP
done
